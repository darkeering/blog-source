{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/Anatolo/source/images/favicon.webp","path":"images/favicon.webp","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/images/gongan.png","path":"images/gongan.png","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/images/logo.jpg","path":"images/logo.jpg","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/images/logo.webp","path":"images/logo.webp","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/images/logo@2x.webp","path":"images/logo@2x.webp","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/css/blog_basic.styl","path":"css/blog_basic.styl","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/css/font-awesome.css","path":"css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/css/insight.css","path":"css/insight.css","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/js/add-bookmark.js","path":"js/add-bookmark.js","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/js/baidu-tongji.js","path":"js/baidu-tongji.js","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/js/tagcanvas.js","path":"js/tagcanvas.js","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/js/tagcloud.js","path":"js/tagcloud.js","modified":0,"renderable":1},{"_id":"themes/Anatolo/source/js/visitors.js","path":"js/visitors.js","modified":0,"renderable":1},{"_id":"source/assets/vscode-gitbash-1.png","path":"assets/vscode-gitbash-1.png","modified":0,"renderable":0},{"_id":"source/assets/vscode-gitbash-2.png","path":"assets/vscode-gitbash-2.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/qiankun-base.md","hash":"1a334d78d4ae63581117f06d980dd801ea694935","modified":1675951564460},{"_id":"source/_posts/chained-calls.md","hash":"86564681ea26631e6049792b8afceaa484107029","modified":1675951564460},{"_id":"source/_posts/promise.md","hash":"379ceb477b8fa8f01eb42ec492d41701d1ef1dd1","modified":1675951564460},{"_id":"source/_posts/hooks-context-state.md","hash":"b4bf83a83685a14e1090593329fee85dce6a9e09","modified":1675951564460},{"_id":"source/_posts/qiankun-rc-child.md","hash":"3172bbf139920a725db49b0211fdd491fcb5aedc","modified":1675951564460},{"_id":"source/_posts/qiankun-ng-child.md","hash":"dc8e8685f9d6adf5f681be0eba1dcb7146ce3cf8","modified":1675951564460},{"_id":"themes/Anatolo/package.json","hash":"4565bca74bb4da9192c0b822b00796e9e1cd721a","modified":1675592619975},{"_id":"themes/Anatolo/languages/en.yml","hash":"46b500a4ff216193ada572894835d32a9afce9da","modified":1675592619969},{"_id":"themes/Anatolo/LICENSE","hash":"5c07e26ca967fa59fcee315aac5e66217318786f","modified":1675592619962},{"_id":"themes/Anatolo/_config.yml","hash":"e28841160940c42c1b8680c29442c3485b4e0e80","modified":1675696982591},{"_id":"themes/Anatolo/README.md","hash":"819253488d3dbe8cab93f1a9765fad915849ae04","modified":1675592619962},{"_id":"themes/Anatolo/languages/pt-BR.yml","hash":"49763390b15345ee44f0a1ebd0cc5bcb1579a380","modified":1675592619969},{"_id":"themes/Anatolo/languages/zh-cn.yml","hash":"6aaa07597d6e305cdcaf8e701773db8751a5ae59","modified":1675592619969},{"_id":"themes/Anatolo/layout/index.pug","hash":"3ae73a5dde0ae01de86cac850ab255deee2fcf47","modified":1675592619969},{"_id":"themes/Anatolo/layout/archive.pug","hash":"c82013536abdb2ab8e4a95d183bce5c146aa71e8","modified":1675592619969},{"_id":"themes/Anatolo/layout/page.pug","hash":"05aeea0ce45f76e91906a6e67b6643710e81e9a7","modified":1675592619972},{"_id":"themes/Anatolo/layout/category.pug","hash":"a26211b880f1ca1c4acc48ace875b0a7bf78059f","modified":1675592619969},{"_id":"themes/Anatolo/layout/mixins.pug","hash":"811e4c98a254c241a4abd351de6aff10adccdb9f","modified":1675666125005},{"_id":"themes/Anatolo/layout/post.pug","hash":"9232c12ec1783b6711614493acc15db561ab05d6","modified":1675592619974},{"_id":"themes/Anatolo/scripts/index.js","hash":"c99843a04570938ce5e2450d46c6cdb52f63975b","modified":1675592619975},{"_id":"themes/Anatolo/includes/generators/insight.js","hash":"8fcac981ab9537fc110ff8a6d00f67bd6f41aeec","modified":1675592619963},{"_id":"themes/Anatolo/includes/generators/tags.js","hash":"9da7d771aac3d188c35eca40a9c6a64c5eaac513","modified":1675592619963},{"_id":"themes/Anatolo/includes/helpers/site.js","hash":"6b6575f834ef0d9390bd5243acc54804e59d0e6e","modified":1675592619963},{"_id":"themes/Anatolo/includes/tasks/welcome.js","hash":"785651ca1d4cd9dd2b5ed7d8d6331015c41dfff6","modified":1675592619969},{"_id":"themes/Anatolo/layout/tag.pug","hash":"68b3291cb17f61611581e970522b89ce99e71ecd","modified":1675592619974},{"_id":"themes/Anatolo/layout/tags.pug","hash":"ecaa717b5fbeecef8b3a48f365ad8438207ef76d","modified":1675592619975},{"_id":"themes/Anatolo/layout/partial/layout.pug","hash":"6df1374fb869c7ffe92bb96ff9a5e8aeb23d69b6","modified":1675592619972},{"_id":"themes/Anatolo/layout/partial/head.pug","hash":"037f93634d68ee9e5600dcba2d4f5fce113c325f","modified":1675592619972},{"_id":"themes/Anatolo/layout/partial/nav.pug","hash":"03075e491e61ce559c722654c1737be4d34c84d8","modified":1675592619974},{"_id":"themes/Anatolo/layout/partial/footer.pug","hash":"a115a6a6edb040ef1c7902a17999b2d1c4545b11","modified":1675592619972},{"_id":"themes/Anatolo/layout/partial/comments.pug","hash":"f556cc33659011d74f0f08db3187c0a4e71a2196","modified":1675592619972},{"_id":"themes/Anatolo/layout/partial/sidebar.pug","hash":"579b8eba164854493380f0128e8b3ab2b9ab7300","modified":1675592619974},{"_id":"themes/Anatolo/layout/partial/toc.pug","hash":"c675dbbc92f327b4ad3906527c44959db2bbc9f5","modified":1675592619974},{"_id":"themes/Anatolo/layout/partial/search.pug","hash":"dc59645052474c3bbee16a253166829da5ef6215","modified":1675592619974},{"_id":"themes/Anatolo/source/images/favicon.webp","hash":"b2c2e853f326a171da7dce74aa45a363a750c359","modified":1675592619986},{"_id":"themes/Anatolo/layout/partial/social_links.pug","hash":"35abc17db5272074fbeb4c72b706f3ab08bf5634","modified":1675592619974},{"_id":"themes/Anatolo/source/images/gongan.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1675592619986},{"_id":"themes/Anatolo/source/images/logo.webp","hash":"9371dc18ac0528af787431109538cde4910da98d","modified":1675592619986},{"_id":"themes/Anatolo/source/images/logo@2x.webp","hash":"48e26e26b8e4a07d7e5c0a4b3654675cc870f3aa","modified":1675592619986},{"_id":"themes/Anatolo/source/css/blog_basic.styl","hash":"55bc464894c27dad8e65af3e59937fc194e34f81","modified":1675592619975},{"_id":"themes/Anatolo/source/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1675592619975},{"_id":"themes/Anatolo/source/css/insight.css","hash":"2b3ed9e1934af183290bd99d7c759864a5b81009","modified":1675592619975},{"_id":"themes/Anatolo/source/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1675592619975},{"_id":"themes/Anatolo/source/css/search.css","hash":"b671c37428e5988f49a1547ced8e3c2d3f96cbcc","modified":1675592619975},{"_id":"themes/Anatolo/source/css/style.styl","hash":"47cba3d25de53b6c26d8a3b367c20403f2fbc09b","modified":1675592619975},{"_id":"themes/Anatolo/source/js/add-bookmark.js","hash":"eaf0bd18132b26d12601b6273bb8c37c745da5f1","modified":1675592619990},{"_id":"themes/Anatolo/source/js/baidu-tongji.js","hash":"21a9ee9901819b61630813a89b4688ba1f1aca86","modified":1675592619990},{"_id":"themes/Anatolo/source/js/insight.js","hash":"c2ce23243fe50e2182788ea7a44af9390c3ade7f","modified":1675592619990},{"_id":"themes/Anatolo/source/js/jquery.appear.js","hash":"8e936fd0f45787309d917541e911c3440f7565b1","modified":1675592619990},{"_id":"themes/Anatolo/source/js/jquery-migrate-1.2.1.min.js","hash":"875bce76a77590c3c438bbc6e014b39c23c8c88d","modified":1675592619990},{"_id":"themes/Anatolo/source/js/tagcloud.js","hash":"885a01a809312837617a069a72914a4e200be227","modified":1675592619994},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1675592619986},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1675592619986},{"_id":"themes/Anatolo/source/js/visitors.js","hash":"d08fea0c772848fa927554f9f520e19d17f98953","modified":1675592619994},{"_id":"themes/Anatolo/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1675592619975},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1675592619975},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1675592619986},{"_id":"themes/Anatolo/source/js/tagcanvas.js","hash":"934f653862ea18888532b5f046d97ff8df26c4a1","modified":1675592619994},{"_id":"themes/Anatolo/source/images/logo.jpg","hash":"d6df08c03b4a7ab3c0987482e22b78ad511c4f3f","modified":1675506816199},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1675592619975},{"_id":"themes/Anatolo/source/js/jquery.js","hash":"aa6ccf721c4e76921abda46c120772d364e5b285","modified":1675592619994},{"_id":"public/content.json","hash":"e70609dc2b5a69912a5f267c2c5c05ba80c5d61c","modified":1675957564097},{"_id":"public/2023/02/05/qiankun-ng-child/index.html","hash":"0e8e84c4c139307e2df8365bb5a470b843562e17","modified":1675952962801},{"_id":"public/2023/02/05/qiankun-base/index.html","hash":"a9b1eb2d6c3f968ceee09edaedd8047e2070cf03","modified":1675952962801},{"_id":"public/2023/02/05/chained-calls/index.html","hash":"fafd8bc899f801e932fe5c3a2a0b2901ee32fe31","modified":1675952962801},{"_id":"public/index.html","hash":"8a142bf8101ccce4900d38d96af102affbb56eb0","modified":1675957564097},{"_id":"public/tags/状态管理/index.html","hash":"03fec204a64b4d7342dcf5c6140ab2ec70a676e1","modified":1675952962801},{"_id":"public/tags/react/index.html","hash":"3ec9ef735a990bf9b535bc2460a39c274113ec84","modified":1675952962801},{"_id":"public/tags/自定义/index.html","hash":"7794db54853d328e113875135ac6e27744e827e4","modified":1675952962801},{"_id":"public/tags/js/index.html","hash":"aa3e5216229822cf3b83421375ce5607b3b44611","modified":1675952962801},{"_id":"public/tags/链式调用/index.html","hash":"aaab06b16574da4f6c3cab5519ceba6a415b2eaf","modified":1675952962801},{"_id":"public/tags/微前端/index.html","hash":"2ac70fe56e251db5c9573817e4386624f54c8b83","modified":1675952962801},{"_id":"public/tags/angular/index.html","hash":"1d31db0a90917961ffbced3b4bd81dd8efe41755","modified":1675952962801},{"_id":"public/archives/index.html","hash":"74d4f8667a9a62d3971bba5f0bbfad52ea035066","modified":1675957564097},{"_id":"public/archives/2023/index.html","hash":"74d4f8667a9a62d3971bba5f0bbfad52ea035066","modified":1675957564097},{"_id":"public/archives/2023/02/index.html","hash":"74d4f8667a9a62d3971bba5f0bbfad52ea035066","modified":1675957564097},{"_id":"public/tags/index.html","hash":"5948c3eee38048c775351c22356059cd3c8922bc","modified":1675952962801},{"_id":"public/2023/02/07/promise/index.html","hash":"68b21189ea1b67ddff82c43d1146b72d544498cc","modified":1675957564097},{"_id":"public/2023/02/06/hooks-context-state/index.html","hash":"c1d8bbd1ade5806973cbb851312e861eb6c1ce1e","modified":1675952962801},{"_id":"public/2023/02/05/qiankun-rc-child/index.html","hash":"fa5863fa0edaf12443fdf7fb6a4daa26ef7be191","modified":1675952962801},{"_id":"public/images/favicon.webp","hash":"b2c2e853f326a171da7dce74aa45a363a750c359","modified":1675952962801},{"_id":"public/images/gongan.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1675952962801},{"_id":"public/images/logo@2x.webp","hash":"48e26e26b8e4a07d7e5c0a4b3654675cc870f3aa","modified":1675952962801},{"_id":"public/images/logo.webp","hash":"9371dc18ac0528af787431109538cde4910da98d","modified":1675952962801},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1675952962801},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1675952962801},{"_id":"public/css/blog_basic.css","hash":"277c08a8a9305ddbe45a5fae2e44d0726d8f2ee1","modified":1675952962801},{"_id":"public/css/insight.css","hash":"b468a47b30b47017b06ff6c431c49a316288a501","modified":1675952962801},{"_id":"public/css/style.css","hash":"c0f346d04e643520b1bd77552bd3d723c5a88366","modified":1675952962801},{"_id":"public/css/search.css","hash":"c1cb306e075386517ac15bf4ef37c647d37ec6b5","modified":1675952962801},{"_id":"public/js/add-bookmark.js","hash":"3cd1622f94f184ca7a542fcbcce75cf9130b9208","modified":1675952962801},{"_id":"public/js/baidu-tongji.js","hash":"49d6d863bc54d843efcc1cd5a92b0e3d65c4bdd6","modified":1675952962801},{"_id":"public/js/insight.js","hash":"16f64c50efc78abb3d94c079d3cda0b74e809f5e","modified":1675952962801},{"_id":"public/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1675952962801},{"_id":"public/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1675952962801},{"_id":"public/js/tagcloud.js","hash":"cd02ffd8e5192cb25f50f6c5c920a3249ff1614f","modified":1675952962801},{"_id":"public/js/visitors.js","hash":"717a2483ae4d7682d944e79c2a1efd959fa112bc","modified":1675952962801},{"_id":"public/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1675952962801},{"_id":"public/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1675952962801},{"_id":"public/js/tagcanvas.js","hash":"db9a61a79350d1618a74a8f3448f06046c3d9a6c","modified":1675952962801},{"_id":"public/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1675952962801},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1675952962801},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1675952962801},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1675952962801},{"_id":"public/images/logo.jpg","hash":"d6df08c03b4a7ab3c0987482e22b78ad511c4f3f","modified":1675952962801},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1675952962801},{"_id":"source/assets/vscode-gitbash-2.png","hash":"2b7baa9685b7388d97e80438e1982a05658100cd","modified":1675956981760},{"_id":"source/_posts/vscode-gitbash.md","hash":"c65a96457784d8dd16a5ed0bec924614d7f760dd","modified":1675957554301},{"_id":"source/assets/vscode-gitbash-1.png","hash":"7a10f8b3e29e07380c03e3624f0d8e5fcfbb3ffc","modified":1675956880132},{"_id":"public/2023/02/09/vscode-gitbash/index.html","hash":"047ab63c0a527d3410111dc77b9bd7b0d383bcd6","modified":1675957564097},{"_id":"public/assets/vscode-gitbash-2.png","hash":"2b7baa9685b7388d97e80438e1982a05658100cd","modified":1675957564097},{"_id":"public/assets/vscode-gitbash-1.png","hash":"7a10f8b3e29e07380c03e3624f0d8e5fcfbb3ffc","modified":1675957564097}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"手写简易promise","date":"2023-02-07T08:00:00.000Z","_content":"\n## 原 promise 最简单的怎么用？\n\n```typescript\nconst p1 = new _Promise((resolve, reject) => {\n  console.log(\"create promise\");\n  resolve(\"p1 resolve\");\n})\n  .then(\n    (data) => {\n      console.log(data);\n      return \"p2 resolve\";\n    },\n    (err) => {\n      console.log(err);\n    }\n  )\n  .then(\n    (data) => {\n      console.log(data);\n    },\n    (err) => {\n      console.log(err);\n    }\n  );\n// create promise\n// p1 resolve\n// p2 resolve\n```\n\n## 自己的 promise\n\n- 创建 class 类\n\n  > 这是一个最简单的 promise，不包括链式调用，不包括异步\n\n  ```typescript\n  const PENDING = \"pending\";\n  const FULFILLED = \"fulfilled\";\n  const REJECTED = \"rejected\";\n\n  class _Promise {\n    constructor(executor) {\n      this.status = PENDING;\n      this.value = undefined;\n      this.reason = undefined;\n      let resolve = (value) => {\n        this.status = FULFILLED;\n        this.value = value;\n      };\n      let reject = (reason) => {\n        this.status = REJECTED;\n        this.reason = reason;\n      };\n      executor(resolve, reject);\n    }\n\n    then(onSuccess, onError) {\n      if (this.status === FULFILLED) {\n        onSuccess(this.value);\n      }\n      if (this.status === REJECTED) {\n        onError(this.reason);\n      }\n    }\n  }\n  ```\n\n- 处理异步\n\n  > 如果 executor 函数里面有异步函数\n\n  ```typescript\n  const PENDING = \"pending\";\n  const FULFILLED = \"fulfilled\";\n  const REJECTED = \"rejected\";\n\n  class _Promise {\n    constructor(executor) {\n      this.status = PENDING;\n      this.value = undefined;\n      this.reason = undefined;\n      this.resolveCbs = [];\n      this.rejectCbs = [];\n      let resolve = (value) => {\n        if (this.status === PENDING) {\n          this.status = FULFILLED;\n          this.value = value;\n          this.resolveCbs.forEach((cb) => cb(this.value));\n        }\n      };\n      let reject = (reason) => {\n        if (this.status === PENDING) {\n          this.status = REJECTED;\n          this.reason = reason;\n          this.rejectCbs.forEach((cb) => cb(this.value));\n        }\n      };\n      executor(resolve, reject);\n    }\n\n    then(onResolve, onReject) {\n      if (this.status === FULFILLED) {\n        onResolve(this.value);\n      }\n      if (this.status === REJECTED) {\n        onReject(this.reason);\n      }\n\n      if (this.status === PENDING) {\n        this.resolveCbs.push(onResolve);\n        this.rejectCbs.push(onReject);\n      }\n    }\n  }\n  ```\n\n- 处理链式调用\n","source":"_posts/promise.md","raw":"---\ntitle: 手写简易promise\ndate: 2023-02-07 16:00:00\ntags:\n---\n\n## 原 promise 最简单的怎么用？\n\n```typescript\nconst p1 = new _Promise((resolve, reject) => {\n  console.log(\"create promise\");\n  resolve(\"p1 resolve\");\n})\n  .then(\n    (data) => {\n      console.log(data);\n      return \"p2 resolve\";\n    },\n    (err) => {\n      console.log(err);\n    }\n  )\n  .then(\n    (data) => {\n      console.log(data);\n    },\n    (err) => {\n      console.log(err);\n    }\n  );\n// create promise\n// p1 resolve\n// p2 resolve\n```\n\n## 自己的 promise\n\n- 创建 class 类\n\n  > 这是一个最简单的 promise，不包括链式调用，不包括异步\n\n  ```typescript\n  const PENDING = \"pending\";\n  const FULFILLED = \"fulfilled\";\n  const REJECTED = \"rejected\";\n\n  class _Promise {\n    constructor(executor) {\n      this.status = PENDING;\n      this.value = undefined;\n      this.reason = undefined;\n      let resolve = (value) => {\n        this.status = FULFILLED;\n        this.value = value;\n      };\n      let reject = (reason) => {\n        this.status = REJECTED;\n        this.reason = reason;\n      };\n      executor(resolve, reject);\n    }\n\n    then(onSuccess, onError) {\n      if (this.status === FULFILLED) {\n        onSuccess(this.value);\n      }\n      if (this.status === REJECTED) {\n        onError(this.reason);\n      }\n    }\n  }\n  ```\n\n- 处理异步\n\n  > 如果 executor 函数里面有异步函数\n\n  ```typescript\n  const PENDING = \"pending\";\n  const FULFILLED = \"fulfilled\";\n  const REJECTED = \"rejected\";\n\n  class _Promise {\n    constructor(executor) {\n      this.status = PENDING;\n      this.value = undefined;\n      this.reason = undefined;\n      this.resolveCbs = [];\n      this.rejectCbs = [];\n      let resolve = (value) => {\n        if (this.status === PENDING) {\n          this.status = FULFILLED;\n          this.value = value;\n          this.resolveCbs.forEach((cb) => cb(this.value));\n        }\n      };\n      let reject = (reason) => {\n        if (this.status === PENDING) {\n          this.status = REJECTED;\n          this.reason = reason;\n          this.rejectCbs.forEach((cb) => cb(this.value));\n        }\n      };\n      executor(resolve, reject);\n    }\n\n    then(onResolve, onReject) {\n      if (this.status === FULFILLED) {\n        onResolve(this.value);\n      }\n      if (this.status === REJECTED) {\n        onReject(this.reason);\n      }\n\n      if (this.status === PENDING) {\n        this.resolveCbs.push(onResolve);\n        this.rejectCbs.push(onReject);\n      }\n    }\n  }\n  ```\n\n- 处理链式调用\n","slug":"promise","published":1,"updated":"2023-02-09T14:06:04.460Z","_id":"cldx463ub0000j0tm29fgci5s","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"原-promise-最简单的怎么用？\"><a href=\"#原-promise-最简单的怎么用？\" class=\"headerlink\" title=\"原 promise 最简单的怎么用？\"></a>原 promise 最简单的怎么用？</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;create promise&quot;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;p1 resolve&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;p2 resolve&quot;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"comment\">// create promise</span></span><br><span class=\"line\"><span class=\"comment\">// p1 resolve</span></span><br><span class=\"line\"><span class=\"comment\">// p2 resolve</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自己的-promise\"><a href=\"#自己的-promise\" class=\"headerlink\" title=\"自己的 promise\"></a>自己的 promise</h2><ul>\n<li><p>创建 class 类</p>\n<blockquote>\n<p>这是一个最简单的 promise，不包括链式调用，不包括异步</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onSuccess, onError</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onSuccess</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onError</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>处理异步</p>\n<blockquote>\n<p>如果 executor 函数里面有异步函数</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolveCbs</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">rejectCbs</span> = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">resolveCbs</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">cb</span>) =&gt;</span> <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">rejectCbs</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">cb</span>) =&gt;</span> <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">resolveCbs</span>.<span class=\"title function_\">push</span>(onResolve);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">rejectCbs</span>.<span class=\"title function_\">push</span>(onReject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>处理链式调用</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原-promise-最简单的怎么用？\"><a href=\"#原-promise-最简单的怎么用？\" class=\"headerlink\" title=\"原 promise 最简单的怎么用？\"></a>原 promise 最简单的怎么用？</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;create promise&quot;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;p1 resolve&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;p2 resolve&quot;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"comment\">// create promise</span></span><br><span class=\"line\"><span class=\"comment\">// p1 resolve</span></span><br><span class=\"line\"><span class=\"comment\">// p2 resolve</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自己的-promise\"><a href=\"#自己的-promise\" class=\"headerlink\" title=\"自己的 promise\"></a>自己的 promise</h2><ul>\n<li><p>创建 class 类</p>\n<blockquote>\n<p>这是一个最简单的 promise，不包括链式调用，不包括异步</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onSuccess, onError</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onSuccess</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onError</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>处理异步</p>\n<blockquote>\n<p>如果 executor 函数里面有异步函数</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolveCbs</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">rejectCbs</span> = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">resolveCbs</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">cb</span>) =&gt;</span> <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">rejectCbs</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">cb</span>) =&gt;</span> <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">resolveCbs</span>.<span class=\"title function_\">push</span>(onResolve);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">rejectCbs</span>.<span class=\"title function_\">push</span>(onReject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>处理链式调用</p>\n</li>\n</ul>\n"},{"title":"react 简化版类似angular service的状态管理","date":"2023-02-06T04:59:48.000Z","_content":"\n## 原理\n\n> react 的 context.Provider 组件会在子组件创建一个一个上下文，函数子组件总可以通过 useContext 方法来获取 context 传递的数据\n\n## 实现\n\n- 首先，我们需要先创建一个 context\n\n  ```typescript\n  const SERVICE_CONTEXT = createContext(null);\n  ```\n\n- 然后在我们需要的组件外层包上 context.Provider 组件，我们可以通过一个方法来实现\n\n  ```typescript\n  function createServiceProvider<C>(Comp: React.FC<C>) {\n    return React.memo((props: any) => {\n      return (\n        <SERVICE_CONTEXT.Provider>\n          <Comp {...props}></Comp>\n        </SERVICE_CONTEXT.Provider>\n      );\n    });\n  }\n  ```\n\n- service 的创建就像 angular 一样，直接创建一个 service 的 class，这中间的 Subject 使用的是 rxjs，直接 `npm i rxjs` 就行\n\n  ```typescript\n  class UserService {\n    name = \"admin\";\n    age: number = 18;\n    age$ = new Subject<number>();\n\n    setAge(age: number) {\n      this.age = age;\n      this.age$.next(this.age);\n    }\n  }\n  ```\n\n- 之后，我们需要把我们 service 通过 createServiceProvider 函数注册到他的上下文中\n\n  > 首先我们考虑的全局唯一的情况，就可以在 App 组件上面用，此时没有外层 service，所以代码运行到这里只需要直接进行实例化，然后在全局的上下文中都可以使用到注册的 service\n\n  ```typescript\n  function createServiceProvider<C>(Comp: React.FC<C>, services: any) {\n    return React.memo((props: any) => {\n      // const outerContext = useContext(SERVICE_CONTEXT);\n      let providers: any = {};\n      // if (outerContext) providers = Object.create(outerContext);\n\n      for (let service of services) {\n        providers[service.name] = new service();\n      }\n\n      return (\n        <SERVICE_CONTEXT.Provider value={providers}>\n          <Comp {...props}></Comp>\n        </SERVICE_CONTEXT.Provider>\n      );\n    });\n  }\n  ```\n\n- 那么在组件中怎么用呢？\n\n  - 可以直接用 hook 钩子来获取\n\n    ```typescript\n    // 获取全部的service，然后需要哪个获取哪个\n    const providers: any = useContext(SERVICE_CONTEXT);\n    const provider = providers[<service.name>];\n    ```\n\n  - 自定义 hook 函数\n    ```typescript\n    function useServiceHook<T>(service: new () => T): T {\n      const providers: any = useContext(SERVICE_CONTEXT);\n      const provider = providers[(service as any).name];\n      if (provider) {\n        return provider;\n      } else {\n        throw new Error(\n          `未找到${\n            (service as any).name\n          }的依赖值，请在上层servcieComponent中提供对应的service`\n        );\n      }\n    }\n    ```\n\n- 接下来我们在组件中使用\n\n  ```typescript\n  export default createServiceProvider(User, [UserService]);\n\n  function User() {\n    const userService = useServiceHook(UserService);\n    const [name, setname] = useState(userService.name);\n    const [age, setage] = useState(userService.age);\n    useEffect(() => {\n      const subscriptions: Subscription[] = [];\n      subscriptions.push(\n        userService.age$.subscribe((age) => {\n          setage(age);\n        })\n      );\n      return () => {\n        subscriptions.forEach((i) => i.unsubscribe());\n      };\n    }, []);\n\n    const addAge = () => {\n      userService.setAge(age + 1);\n    };\n    return (\n      <div>\n        <span>\n          I am user: {name}, my age is {age}\n        </span>{\" \"}\n        <button onClick={addAge}>add age</button>\n      </div>\n    );\n  }\n  ```\n\n- 在子组件中使用，创建一个另一个组件和另一个 service，然后把之前 createServiceProvider 函数中注释的内容放开，分别试试 User 组件中注册和不注册 UserService (createServiceProvider(User, [UserService]) 和 createServiceProvider(User))\n\n  > User 不注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 会同步变化\n  > User 注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 不会同步变化\n  > 这是因为父组件 Home 也注册了 UserService，User 子组件如果不注册自己的 service，就会共享父组件的 service 数据，但是如果 User 子组件注册了自己的 service，对于同一个 service 就具有不同的上下文\n\n  ```typescript\n  class ManageService {\n    manageId: number = 1;\n    manageId$ = new Subject<number>();\n\n    setManageId(id: number) {\n      this.manageId = id;\n      this.manageId$.next(this.manageId);\n    }\n  }\n\n  export default createServiceProvider(Home, [ManageService, UserService]);\n\n  function Home() {\n    const manageService = useServiceHook(ManageService);\n    const [manageId, setmanageId] = useState(manageService.manageId);\n\n    useEffect(() => {\n      const subscription = manageService.manageId$.subscribe((manageId) => {\n        setmanageId(manageId);\n      });\n      return () => {\n        subscription.unsubscribe();\n      };\n    }, []);\n\n    const addManageId = () => {\n      manageService.setManageId(manageId + 1);\n    };\n    return (\n      <div>\n        <div>\n          <span>I am manage, manageId: {manageId}</span>{\" \"}\n          <button onClick={addManageId}>add manageId</button>\n        </div>\n        <User></User>\n        <User></User>\n      </div>\n    );\n  }\n  ```\n\n# 链接\n\nGithub 地址：https://github.com/darkeering/hooks-context-state-dar\n","source":"_posts/hooks-context-state.md","raw":"---\ntitle: react 简化版类似angular service的状态管理\ndate: 2023-02-06 12:59:48\ntags: [状态管理, react, 自定义]\n---\n\n## 原理\n\n> react 的 context.Provider 组件会在子组件创建一个一个上下文，函数子组件总可以通过 useContext 方法来获取 context 传递的数据\n\n## 实现\n\n- 首先，我们需要先创建一个 context\n\n  ```typescript\n  const SERVICE_CONTEXT = createContext(null);\n  ```\n\n- 然后在我们需要的组件外层包上 context.Provider 组件，我们可以通过一个方法来实现\n\n  ```typescript\n  function createServiceProvider<C>(Comp: React.FC<C>) {\n    return React.memo((props: any) => {\n      return (\n        <SERVICE_CONTEXT.Provider>\n          <Comp {...props}></Comp>\n        </SERVICE_CONTEXT.Provider>\n      );\n    });\n  }\n  ```\n\n- service 的创建就像 angular 一样，直接创建一个 service 的 class，这中间的 Subject 使用的是 rxjs，直接 `npm i rxjs` 就行\n\n  ```typescript\n  class UserService {\n    name = \"admin\";\n    age: number = 18;\n    age$ = new Subject<number>();\n\n    setAge(age: number) {\n      this.age = age;\n      this.age$.next(this.age);\n    }\n  }\n  ```\n\n- 之后，我们需要把我们 service 通过 createServiceProvider 函数注册到他的上下文中\n\n  > 首先我们考虑的全局唯一的情况，就可以在 App 组件上面用，此时没有外层 service，所以代码运行到这里只需要直接进行实例化，然后在全局的上下文中都可以使用到注册的 service\n\n  ```typescript\n  function createServiceProvider<C>(Comp: React.FC<C>, services: any) {\n    return React.memo((props: any) => {\n      // const outerContext = useContext(SERVICE_CONTEXT);\n      let providers: any = {};\n      // if (outerContext) providers = Object.create(outerContext);\n\n      for (let service of services) {\n        providers[service.name] = new service();\n      }\n\n      return (\n        <SERVICE_CONTEXT.Provider value={providers}>\n          <Comp {...props}></Comp>\n        </SERVICE_CONTEXT.Provider>\n      );\n    });\n  }\n  ```\n\n- 那么在组件中怎么用呢？\n\n  - 可以直接用 hook 钩子来获取\n\n    ```typescript\n    // 获取全部的service，然后需要哪个获取哪个\n    const providers: any = useContext(SERVICE_CONTEXT);\n    const provider = providers[<service.name>];\n    ```\n\n  - 自定义 hook 函数\n    ```typescript\n    function useServiceHook<T>(service: new () => T): T {\n      const providers: any = useContext(SERVICE_CONTEXT);\n      const provider = providers[(service as any).name];\n      if (provider) {\n        return provider;\n      } else {\n        throw new Error(\n          `未找到${\n            (service as any).name\n          }的依赖值，请在上层servcieComponent中提供对应的service`\n        );\n      }\n    }\n    ```\n\n- 接下来我们在组件中使用\n\n  ```typescript\n  export default createServiceProvider(User, [UserService]);\n\n  function User() {\n    const userService = useServiceHook(UserService);\n    const [name, setname] = useState(userService.name);\n    const [age, setage] = useState(userService.age);\n    useEffect(() => {\n      const subscriptions: Subscription[] = [];\n      subscriptions.push(\n        userService.age$.subscribe((age) => {\n          setage(age);\n        })\n      );\n      return () => {\n        subscriptions.forEach((i) => i.unsubscribe());\n      };\n    }, []);\n\n    const addAge = () => {\n      userService.setAge(age + 1);\n    };\n    return (\n      <div>\n        <span>\n          I am user: {name}, my age is {age}\n        </span>{\" \"}\n        <button onClick={addAge}>add age</button>\n      </div>\n    );\n  }\n  ```\n\n- 在子组件中使用，创建一个另一个组件和另一个 service，然后把之前 createServiceProvider 函数中注释的内容放开，分别试试 User 组件中注册和不注册 UserService (createServiceProvider(User, [UserService]) 和 createServiceProvider(User))\n\n  > User 不注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 会同步变化\n  > User 注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 不会同步变化\n  > 这是因为父组件 Home 也注册了 UserService，User 子组件如果不注册自己的 service，就会共享父组件的 service 数据，但是如果 User 子组件注册了自己的 service，对于同一个 service 就具有不同的上下文\n\n  ```typescript\n  class ManageService {\n    manageId: number = 1;\n    manageId$ = new Subject<number>();\n\n    setManageId(id: number) {\n      this.manageId = id;\n      this.manageId$.next(this.manageId);\n    }\n  }\n\n  export default createServiceProvider(Home, [ManageService, UserService]);\n\n  function Home() {\n    const manageService = useServiceHook(ManageService);\n    const [manageId, setmanageId] = useState(manageService.manageId);\n\n    useEffect(() => {\n      const subscription = manageService.manageId$.subscribe((manageId) => {\n        setmanageId(manageId);\n      });\n      return () => {\n        subscription.unsubscribe();\n      };\n    }, []);\n\n    const addManageId = () => {\n      manageService.setManageId(manageId + 1);\n    };\n    return (\n      <div>\n        <div>\n          <span>I am manage, manageId: {manageId}</span>{\" \"}\n          <button onClick={addManageId}>add manageId</button>\n        </div>\n        <User></User>\n        <User></User>\n      </div>\n    );\n  }\n  ```\n\n# 链接\n\nGithub 地址：https://github.com/darkeering/hooks-context-state-dar\n","slug":"hooks-context-state","published":1,"updated":"2023-02-09T14:06:04.460Z","_id":"cldx463ug0001j0tm0ntx1tt2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><blockquote>\n<p>react 的 context.Provider 组件会在子组件创建一个一个上下文，函数子组件总可以通过 useContext 方法来获取 context 传递的数据</p>\n</blockquote>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><ul>\n<li><p>首先，我们需要先创建一个 context</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SERVICE_CONTEXT</span> = <span class=\"title function_\">createContext</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>然后在我们需要的组件外层包上 context.Provider 组件，我们可以通过一个方法来实现</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createServiceProvider&lt;C&gt;(<span class=\"title class_\">Comp</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;C&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SERVICE_CONTEXT.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Comp</span> &#123;<span class=\"attr\">...props</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Comp</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">SERVICE_CONTEXT.Provider</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>service 的创建就像 angular 一样，直接创建一个 service 的 class，这中间的 Subject 使用的是 rxjs，直接 <code>npm i rxjs</code> 就行</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&quot;admin&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span> = <span class=\"number\">18</span>;</span><br><span class=\"line\">  age$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setAge</span>(<span class=\"params\">age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>之后，我们需要把我们 service 通过 createServiceProvider 函数注册到他的上下文中</p>\n<blockquote>\n<p>首先我们考虑的全局唯一的情况，就可以在 App 组件上面用，此时没有外层 service，所以代码运行到这里只需要直接进行实例化，然后在全局的上下文中都可以使用到注册的 service</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createServiceProvider&lt;C&gt;(<span class=\"title class_\">Comp</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;C&gt;, <span class=\"attr\">services</span>: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// const outerContext = useContext(SERVICE_CONTEXT);</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">providers</span>: <span class=\"built_in\">any</span> = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// if (outerContext) providers = Object.create(outerContext);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> service <span class=\"keyword\">of</span> services) &#123;</span><br><span class=\"line\">      providers[service.<span class=\"property\">name</span>] = <span class=\"keyword\">new</span> <span class=\"title function_\">service</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SERVICE_CONTEXT.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;providers&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Comp</span> &#123;<span class=\"attr\">...props</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Comp</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">SERVICE_CONTEXT.Provider</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>那么在组件中怎么用呢？</p>\n<ul>\n<li><p>可以直接用 hook 钩子来获取</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取全部的service，然后需要哪个获取哪个</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">providers</span>: <span class=\"built_in\">any</span> = <span class=\"title function_\">useContext</span>(<span class=\"variable constant_\">SERVICE_CONTEXT</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> provider = providers[&lt;service.<span class=\"property\">name</span>&gt;];</span><br></pre></td></tr></table></figure></li>\n<li><p>自定义 hook 函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> useServiceHook&lt;T&gt;(<span class=\"attr\">service</span>: <span class=\"keyword\">new</span> () =&gt; T): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">providers</span>: <span class=\"built_in\">any</span> = <span class=\"title function_\">useContext</span>(<span class=\"variable constant_\">SERVICE_CONTEXT</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> provider = providers[(service <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">name</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (provider) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> provider;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">`未找到<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        (service <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).name</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">      &#125;</span>的依赖值，请在上层servcieComponent中提供对应的service`</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>接下来我们在组件中使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">createServiceProvider</span>(<span class=\"title class_\">User</span>, [<span class=\"title class_\">UserService</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> userService = <span class=\"title function_\">useServiceHook</span>(<span class=\"title class_\">UserService</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, setname] = <span class=\"title function_\">useState</span>(userService.<span class=\"property\">name</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [age, setage] = <span class=\"title function_\">useState</span>(userService.<span class=\"property\">age</span>);</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">subscriptions</span>: <span class=\"title class_\">Subscription</span>[] = [];</span><br><span class=\"line\">    subscriptions.<span class=\"title function_\">push</span>(</span><br><span class=\"line\">      userService.<span class=\"property\">age$</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setage</span>(age);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      subscriptions.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> i.<span class=\"title function_\">unsubscribe</span>());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">addAge</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    userService.<span class=\"title function_\">setAge</span>(age + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        I am user: &#123;name&#125;, my age is &#123;age&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addAge&#125;</span>&gt;</span>add age<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在子组件中使用，创建一个另一个组件和另一个 service，然后把之前 createServiceProvider 函数中注释的内容放开，分别试试 User 组件中注册和不注册 UserService (createServiceProvider(User, [UserService]) 和 createServiceProvider(User))</p>\n<blockquote>\n<p>User 不注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 会同步变化<br>User 注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 不会同步变化<br>这是因为父组件 Home 也注册了 UserService，User 子组件如果不注册自己的 service，就会共享父组件的 service 数据，但是如果 User 子组件注册了自己的 service，对于同一个 service 就具有不同的上下文</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ManageService</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">manageId</span>: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  manageId$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setManageId</span>(<span class=\"params\">id: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">manageId</span> = id;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">manageId$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">manageId</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">createServiceProvider</span>(<span class=\"title class_\">Home</span>, [<span class=\"title class_\">ManageService</span>, <span class=\"title class_\">UserService</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> manageService = <span class=\"title function_\">useServiceHook</span>(<span class=\"title class_\">ManageService</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [manageId, setmanageId] = <span class=\"title function_\">useState</span>(manageService.<span class=\"property\">manageId</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> subscription = manageService.<span class=\"property\">manageId$</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">manageId</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setmanageId</span>(manageId);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      subscription.<span class=\"title function_\">unsubscribe</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">addManageId</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    manageService.<span class=\"title function_\">setManageId</span>(manageId + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>I am manage, manageId: &#123;manageId&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addManageId&#125;</span>&gt;</span>add manageId<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">User</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">User</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">User</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">User</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>Github 地址：<a href=\"https://github.com/darkeering/hooks-context-state-dar\">https://github.com/darkeering/hooks-context-state-dar</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><blockquote>\n<p>react 的 context.Provider 组件会在子组件创建一个一个上下文，函数子组件总可以通过 useContext 方法来获取 context 传递的数据</p>\n</blockquote>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><ul>\n<li><p>首先，我们需要先创建一个 context</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SERVICE_CONTEXT</span> = <span class=\"title function_\">createContext</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>然后在我们需要的组件外层包上 context.Provider 组件，我们可以通过一个方法来实现</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createServiceProvider&lt;C&gt;(<span class=\"title class_\">Comp</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;C&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SERVICE_CONTEXT.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Comp</span> &#123;<span class=\"attr\">...props</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Comp</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">SERVICE_CONTEXT.Provider</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>service 的创建就像 angular 一样，直接创建一个 service 的 class，这中间的 Subject 使用的是 rxjs，直接 <code>npm i rxjs</code> 就行</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&quot;admin&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span> = <span class=\"number\">18</span>;</span><br><span class=\"line\">  age$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setAge</span>(<span class=\"params\">age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>之后，我们需要把我们 service 通过 createServiceProvider 函数注册到他的上下文中</p>\n<blockquote>\n<p>首先我们考虑的全局唯一的情况，就可以在 App 组件上面用，此时没有外层 service，所以代码运行到这里只需要直接进行实例化，然后在全局的上下文中都可以使用到注册的 service</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createServiceProvider&lt;C&gt;(<span class=\"title class_\">Comp</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;C&gt;, <span class=\"attr\">services</span>: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// const outerContext = useContext(SERVICE_CONTEXT);</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">providers</span>: <span class=\"built_in\">any</span> = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// if (outerContext) providers = Object.create(outerContext);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> service <span class=\"keyword\">of</span> services) &#123;</span><br><span class=\"line\">      providers[service.<span class=\"property\">name</span>] = <span class=\"keyword\">new</span> <span class=\"title function_\">service</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SERVICE_CONTEXT.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;providers&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Comp</span> &#123;<span class=\"attr\">...props</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Comp</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">SERVICE_CONTEXT.Provider</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>那么在组件中怎么用呢？</p>\n<ul>\n<li><p>可以直接用 hook 钩子来获取</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取全部的service，然后需要哪个获取哪个</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">providers</span>: <span class=\"built_in\">any</span> = <span class=\"title function_\">useContext</span>(<span class=\"variable constant_\">SERVICE_CONTEXT</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> provider = providers[&lt;service.<span class=\"property\">name</span>&gt;];</span><br></pre></td></tr></table></figure></li>\n<li><p>自定义 hook 函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> useServiceHook&lt;T&gt;(<span class=\"attr\">service</span>: <span class=\"keyword\">new</span> () =&gt; T): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">providers</span>: <span class=\"built_in\">any</span> = <span class=\"title function_\">useContext</span>(<span class=\"variable constant_\">SERVICE_CONTEXT</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> provider = providers[(service <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">name</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (provider) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> provider;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">`未找到<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        (service <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).name</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">      &#125;</span>的依赖值，请在上层servcieComponent中提供对应的service`</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>接下来我们在组件中使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">createServiceProvider</span>(<span class=\"title class_\">User</span>, [<span class=\"title class_\">UserService</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> userService = <span class=\"title function_\">useServiceHook</span>(<span class=\"title class_\">UserService</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, setname] = <span class=\"title function_\">useState</span>(userService.<span class=\"property\">name</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [age, setage] = <span class=\"title function_\">useState</span>(userService.<span class=\"property\">age</span>);</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">subscriptions</span>: <span class=\"title class_\">Subscription</span>[] = [];</span><br><span class=\"line\">    subscriptions.<span class=\"title function_\">push</span>(</span><br><span class=\"line\">      userService.<span class=\"property\">age$</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setage</span>(age);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      subscriptions.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> i.<span class=\"title function_\">unsubscribe</span>());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">addAge</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    userService.<span class=\"title function_\">setAge</span>(age + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        I am user: &#123;name&#125;, my age is &#123;age&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addAge&#125;</span>&gt;</span>add age<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在子组件中使用，创建一个另一个组件和另一个 service，然后把之前 createServiceProvider 函数中注释的内容放开，分别试试 User 组件中注册和不注册 UserService (createServiceProvider(User, [UserService]) 和 createServiceProvider(User))</p>\n<blockquote>\n<p>User 不注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 会同步变化<br>User 注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 不会同步变化<br>这是因为父组件 Home 也注册了 UserService，User 子组件如果不注册自己的 service，就会共享父组件的 service 数据，但是如果 User 子组件注册了自己的 service，对于同一个 service 就具有不同的上下文</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ManageService</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">manageId</span>: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  manageId$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setManageId</span>(<span class=\"params\">id: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">manageId</span> = id;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">manageId$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">manageId</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">createServiceProvider</span>(<span class=\"title class_\">Home</span>, [<span class=\"title class_\">ManageService</span>, <span class=\"title class_\">UserService</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> manageService = <span class=\"title function_\">useServiceHook</span>(<span class=\"title class_\">ManageService</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [manageId, setmanageId] = <span class=\"title function_\">useState</span>(manageService.<span class=\"property\">manageId</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> subscription = manageService.<span class=\"property\">manageId$</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">manageId</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setmanageId</span>(manageId);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      subscription.<span class=\"title function_\">unsubscribe</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">addManageId</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    manageService.<span class=\"title function_\">setManageId</span>(manageId + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>I am manage, manageId: &#123;manageId&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addManageId&#125;</span>&gt;</span>add manageId<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">User</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">User</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">User</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">User</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>Github 地址：<a href=\"https://github.com/darkeering/hooks-context-state-dar\">https://github.com/darkeering/hooks-context-state-dar</a></p>\n"},{"title":"js 链式调用","date":"2023-02-05T09:23:39.000Z","_content":"\n# 原理\n\n> 主要是在原型链上面添加函数，最后返回的是函数本身的 this 对象，操作的数据也是实例化对象的时候的数据\n\n## class 实现\n\n```typescript\nclass A {\n  constructor(data) {\n    this.data = data;\n  }\n\n  where(cb) {\n    this.data = this.data.filter(cb);\n    return this;\n  }\n\n  groupby(key) {\n    const map = new Map();\n    this.data.forEach((d) => {\n      if (map.has(d[key])) {\n        map.get(d[key]).push(d);\n      } else {\n        map.set(d[key], [d]);\n      }\n    });\n\n    this.data = Array.from(map.values());\n    return this;\n  }\n\n  excute() {\n    console.log(this.data);\n  }\n}\n\nfunction query(data) {\n  return new A(data);\n}\n\nconst data = [\n  { id: 1, grade: 5, sex: 0 },\n  { id: 2, grade: 9, sex: 0 },\n  { id: 3, grade: 9, sex: 1 },\n  { id: 4, grade: 12, sex: 0 },\n];\n\nquery(data)\n  .where((i) => i.sex === 0)\n  .groupby(\"grade\")\n  .excute();\n// [\n//   [ { id: 1, grade: 5, sex: 0 } ],\n//   [ { id: 2, grade: 9, sex: 0 } ],\n//   [ { id: 4, grade: 12, sex: 0 } ]\n// ]\n```\n","source":"_posts/chained-calls.md","raw":"---\ntitle: js 链式调用\ndate: 2023-02-05 17:23:39\ntags: [js, 链式调用]\n---\n\n# 原理\n\n> 主要是在原型链上面添加函数，最后返回的是函数本身的 this 对象，操作的数据也是实例化对象的时候的数据\n\n## class 实现\n\n```typescript\nclass A {\n  constructor(data) {\n    this.data = data;\n  }\n\n  where(cb) {\n    this.data = this.data.filter(cb);\n    return this;\n  }\n\n  groupby(key) {\n    const map = new Map();\n    this.data.forEach((d) => {\n      if (map.has(d[key])) {\n        map.get(d[key]).push(d);\n      } else {\n        map.set(d[key], [d]);\n      }\n    });\n\n    this.data = Array.from(map.values());\n    return this;\n  }\n\n  excute() {\n    console.log(this.data);\n  }\n}\n\nfunction query(data) {\n  return new A(data);\n}\n\nconst data = [\n  { id: 1, grade: 5, sex: 0 },\n  { id: 2, grade: 9, sex: 0 },\n  { id: 3, grade: 9, sex: 1 },\n  { id: 4, grade: 12, sex: 0 },\n];\n\nquery(data)\n  .where((i) => i.sex === 0)\n  .groupby(\"grade\")\n  .excute();\n// [\n//   [ { id: 1, grade: 5, sex: 0 } ],\n//   [ { id: 2, grade: 9, sex: 0 } ],\n//   [ { id: 4, grade: 12, sex: 0 } ]\n// ]\n```\n","slug":"chained-calls","published":1,"updated":"2023-02-09T14:06:04.460Z","_id":"cldx463ui0002j0tm649b16j7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><blockquote>\n<p>主要是在原型链上面添加函数，最后返回的是函数本身的 this 对象，操作的数据也是实例化对象的时候的数据</p>\n</blockquote>\n<h2 id=\"class-实现\"><a href=\"#class-实现\" class=\"headerlink\" title=\"class 实现\"></a>class 实现</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">where</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"title function_\">filter</span>(cb);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">groupby</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (map.<span class=\"title function_\">has</span>(d[key])) &#123;</span><br><span class=\"line\">        map.<span class=\"title function_\">get</span>(d[key]).<span class=\"title function_\">push</span>(d);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        map.<span class=\"title function_\">set</span>(d[key], [d]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(map.<span class=\"title function_\">values</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">excute</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">query</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">grade</span>: <span class=\"number\">5</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">grade</span>: <span class=\"number\">9</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">grade</span>: <span class=\"number\">9</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">grade</span>: <span class=\"number\">12</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">query</span>(data)</span><br><span class=\"line\">  .<span class=\"title function_\">where</span>(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> i.<span class=\"property\">sex</span> === <span class=\"number\">0</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">groupby</span>(<span class=\"string\">&quot;grade&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">excute</span>();</span><br><span class=\"line\"><span class=\"comment\">// [</span></span><br><span class=\"line\"><span class=\"comment\">//   [ &#123; id: 1, grade: 5, sex: 0 &#125; ],</span></span><br><span class=\"line\"><span class=\"comment\">//   [ &#123; id: 2, grade: 9, sex: 0 &#125; ],</span></span><br><span class=\"line\"><span class=\"comment\">//   [ &#123; id: 4, grade: 12, sex: 0 &#125; ]</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><blockquote>\n<p>主要是在原型链上面添加函数，最后返回的是函数本身的 this 对象，操作的数据也是实例化对象的时候的数据</p>\n</blockquote>\n<h2 id=\"class-实现\"><a href=\"#class-实现\" class=\"headerlink\" title=\"class 实现\"></a>class 实现</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">where</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"title function_\">filter</span>(cb);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">groupby</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (map.<span class=\"title function_\">has</span>(d[key])) &#123;</span><br><span class=\"line\">        map.<span class=\"title function_\">get</span>(d[key]).<span class=\"title function_\">push</span>(d);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        map.<span class=\"title function_\">set</span>(d[key], [d]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(map.<span class=\"title function_\">values</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">excute</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">query</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">grade</span>: <span class=\"number\">5</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">grade</span>: <span class=\"number\">9</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">grade</span>: <span class=\"number\">9</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">grade</span>: <span class=\"number\">12</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">query</span>(data)</span><br><span class=\"line\">  .<span class=\"title function_\">where</span>(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> i.<span class=\"property\">sex</span> === <span class=\"number\">0</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">groupby</span>(<span class=\"string\">&quot;grade&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">excute</span>();</span><br><span class=\"line\"><span class=\"comment\">// [</span></span><br><span class=\"line\"><span class=\"comment\">//   [ &#123; id: 1, grade: 5, sex: 0 &#125; ],</span></span><br><span class=\"line\"><span class=\"comment\">//   [ &#123; id: 2, grade: 9, sex: 0 &#125; ],</span></span><br><span class=\"line\"><span class=\"comment\">//   [ &#123; id: 4, grade: 12, sex: 0 &#125; ]</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"微前端 qiankun 基座应用","date":"2023-02-05T11:04:10.000Z","_content":"\n# 生成项目\n\n```typescript\nnpx create-react-app <app-name> --template=typescript\n```\n\n# qiankun 配置\n\n1. 添加 qiankun\n\n   ```typescript\n   yarn add qiankun\n   ```\n\n2. src 下添加 `public-path.js`\n\n   ```typescript\n   if (window.__POWERED_BY_QIANKUN__) {\n     // eslint-disable-next-line no-undef\n     __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n   }\n   ```\n\n3. 修改 `index.jsx`\n\n   ```typescript\n   import \"zone.js/dist/zone\"; // 如果子应用有angular，把子应用的zone.js引入删除，在base应用import\n   import React from \"react\";\n   import ReactDOM from \"react-dom/client\";\n   import \"./index.css\";\n   import App from \"./App\";\n   import reportWebVitals from \"./reportWebVitals\";\n   import { registerMicroApps, start } from \"qiankun\";\n   import { BrowserRouter } from \"react-router-dom\";\n   // qiankun 配置\n   registerMicroApps([\n     {\n       name: \"rc-child\", // 每一个子应用的名字  React应用的名字不重要\n       entry: \"//localhost:3001\", // 子应用的端口 必须一致\n       container: \"#rc-child\", // 子应用在父应用的挂载点\n       activeRule: (location) => location.pathname.startsWith(\"/rc-child\"), // 父应用中激活子应用的规则\n     },\n     {\n       name: \"ng-child\", // 每一个子应用的名字  React应用的名字不重要\n       entry: \"//localhost:3002\", // 子应用的端口 必须一致\n       container: \"#ng-child\", // 子应用在父应用的挂载点\n       activeRule: (location) => location.pathname.startsWith(\"/ng-child\"), // 父应用中激活子应用的规则\n     },\n   ]);\n   // 启动 父应用\n   start();\n\n   const root = ReactDOM.createRoot(\n     document.getElementById(\"root\") as HTMLElement\n   );\n   root.render(\n     <BrowserRouter>\n       <App></App>\n     </BrowserRouter>\n   );\n\n   // If you want to start measuring performance in your app, pass a function\n   // to log results (for example: reportWebVitals(console.log))\n   // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n   reportWebVitals();\n   ```\n\n# 组件库 react-darui\n\n# 参考链接\n\n> [antd 组件库](https://ant.design/components/overview-cn/)\n\n> [qiankun 实践](https://juejin.cn/post/6986258669172490271)\n","source":"_posts/qiankun-base.md","raw":"---\ntitle: 微前端 qiankun 基座应用\ndate: 2023-02-05 19:04:10\ntags: [微前端, react]\n---\n\n# 生成项目\n\n```typescript\nnpx create-react-app <app-name> --template=typescript\n```\n\n# qiankun 配置\n\n1. 添加 qiankun\n\n   ```typescript\n   yarn add qiankun\n   ```\n\n2. src 下添加 `public-path.js`\n\n   ```typescript\n   if (window.__POWERED_BY_QIANKUN__) {\n     // eslint-disable-next-line no-undef\n     __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n   }\n   ```\n\n3. 修改 `index.jsx`\n\n   ```typescript\n   import \"zone.js/dist/zone\"; // 如果子应用有angular，把子应用的zone.js引入删除，在base应用import\n   import React from \"react\";\n   import ReactDOM from \"react-dom/client\";\n   import \"./index.css\";\n   import App from \"./App\";\n   import reportWebVitals from \"./reportWebVitals\";\n   import { registerMicroApps, start } from \"qiankun\";\n   import { BrowserRouter } from \"react-router-dom\";\n   // qiankun 配置\n   registerMicroApps([\n     {\n       name: \"rc-child\", // 每一个子应用的名字  React应用的名字不重要\n       entry: \"//localhost:3001\", // 子应用的端口 必须一致\n       container: \"#rc-child\", // 子应用在父应用的挂载点\n       activeRule: (location) => location.pathname.startsWith(\"/rc-child\"), // 父应用中激活子应用的规则\n     },\n     {\n       name: \"ng-child\", // 每一个子应用的名字  React应用的名字不重要\n       entry: \"//localhost:3002\", // 子应用的端口 必须一致\n       container: \"#ng-child\", // 子应用在父应用的挂载点\n       activeRule: (location) => location.pathname.startsWith(\"/ng-child\"), // 父应用中激活子应用的规则\n     },\n   ]);\n   // 启动 父应用\n   start();\n\n   const root = ReactDOM.createRoot(\n     document.getElementById(\"root\") as HTMLElement\n   );\n   root.render(\n     <BrowserRouter>\n       <App></App>\n     </BrowserRouter>\n   );\n\n   // If you want to start measuring performance in your app, pass a function\n   // to log results (for example: reportWebVitals(console.log))\n   // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n   reportWebVitals();\n   ```\n\n# 组件库 react-darui\n\n# 参考链接\n\n> [antd 组件库](https://ant.design/components/overview-cn/)\n\n> [qiankun 实践](https://juejin.cn/post/6986258669172490271)\n","slug":"qiankun-base","published":1,"updated":"2023-02-09T14:06:04.460Z","_id":"cldx463ul0004j0tmbwfthsg9","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app &lt;app-name&gt; --template=typescript</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"qiankun-配置\"><a href=\"#qiankun-配置\" class=\"headerlink\" title=\"qiankun 配置\"></a>qiankun 配置</h1><ol>\n<li><p>添加 qiankun</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add qiankun</span><br></pre></td></tr></table></figure></li>\n<li><p>src 下添加 <code>public-path.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-undef</span></span><br><span class=\"line\">  __webpack_public_path__ = <span class=\"variable language_\">window</span>.<span class=\"property\">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>index.jsx</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;zone.js/dist/zone&quot;</span>; <span class=\"comment\">// 如果子应用有angular，把子应用的zone.js引入删除，在base应用import</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom/client&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reportWebVitals <span class=\"keyword\">from</span> <span class=\"string\">&quot;./reportWebVitals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; registerMicroApps, start &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;qiankun&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// qiankun 配置</span></span><br><span class=\"line\"><span class=\"title function_\">registerMicroApps</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;rc-child&quot;</span>, <span class=\"comment\">// 每一个子应用的名字  React应用的名字不重要</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;//localhost:3001&quot;</span>, <span class=\"comment\">// 子应用的端口 必须一致</span></span><br><span class=\"line\">    <span class=\"attr\">container</span>: <span class=\"string\">&quot;#rc-child&quot;</span>, <span class=\"comment\">// 子应用在父应用的挂载点</span></span><br><span class=\"line\">    <span class=\"attr\">activeRule</span>: <span class=\"function\">(<span class=\"params\">location</span>) =&gt;</span> location.<span class=\"property\">pathname</span>.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;/rc-child&quot;</span>), <span class=\"comment\">// 父应用中激活子应用的规则</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;ng-child&quot;</span>, <span class=\"comment\">// 每一个子应用的名字  React应用的名字不重要</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;//localhost:3002&quot;</span>, <span class=\"comment\">// 子应用的端口 必须一致</span></span><br><span class=\"line\">    <span class=\"attr\">container</span>: <span class=\"string\">&quot;#ng-child&quot;</span>, <span class=\"comment\">// 子应用在父应用的挂载点</span></span><br><span class=\"line\">    <span class=\"attr\">activeRule</span>: <span class=\"function\">(<span class=\"params\">location</span>) =&gt;</span> location.<span class=\"property\">pathname</span>.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;/ng-child&quot;</span>), <span class=\"comment\">// 父应用中激活子应用的规则</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"comment\">// 启动 父应用</span></span><br><span class=\"line\"><span class=\"title function_\">start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">createRoot</span>(</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span></span><br><span class=\"line\">);</span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">App</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">App</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If you want to start measuring performance in your app, pass a function</span></span><br><span class=\"line\"><span class=\"comment\">// to log results (for example: reportWebVitals(console.log))</span></span><br><span class=\"line\"><span class=\"comment\">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span></span><br><span class=\"line\"><span class=\"title function_\">reportWebVitals</span>();</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"组件库-react-darui\"><a href=\"#组件库-react-darui\" class=\"headerlink\" title=\"组件库 react-darui\"></a>组件库 react-darui</h1><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://ant.design/components/overview-cn/\">antd 组件库</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6986258669172490271\">qiankun 实践</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app &lt;app-name&gt; --template=typescript</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"qiankun-配置\"><a href=\"#qiankun-配置\" class=\"headerlink\" title=\"qiankun 配置\"></a>qiankun 配置</h1><ol>\n<li><p>添加 qiankun</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add qiankun</span><br></pre></td></tr></table></figure></li>\n<li><p>src 下添加 <code>public-path.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-undef</span></span><br><span class=\"line\">  __webpack_public_path__ = <span class=\"variable language_\">window</span>.<span class=\"property\">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>index.jsx</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;zone.js/dist/zone&quot;</span>; <span class=\"comment\">// 如果子应用有angular，把子应用的zone.js引入删除，在base应用import</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom/client&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reportWebVitals <span class=\"keyword\">from</span> <span class=\"string\">&quot;./reportWebVitals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; registerMicroApps, start &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;qiankun&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// qiankun 配置</span></span><br><span class=\"line\"><span class=\"title function_\">registerMicroApps</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;rc-child&quot;</span>, <span class=\"comment\">// 每一个子应用的名字  React应用的名字不重要</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;//localhost:3001&quot;</span>, <span class=\"comment\">// 子应用的端口 必须一致</span></span><br><span class=\"line\">    <span class=\"attr\">container</span>: <span class=\"string\">&quot;#rc-child&quot;</span>, <span class=\"comment\">// 子应用在父应用的挂载点</span></span><br><span class=\"line\">    <span class=\"attr\">activeRule</span>: <span class=\"function\">(<span class=\"params\">location</span>) =&gt;</span> location.<span class=\"property\">pathname</span>.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;/rc-child&quot;</span>), <span class=\"comment\">// 父应用中激活子应用的规则</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;ng-child&quot;</span>, <span class=\"comment\">// 每一个子应用的名字  React应用的名字不重要</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;//localhost:3002&quot;</span>, <span class=\"comment\">// 子应用的端口 必须一致</span></span><br><span class=\"line\">    <span class=\"attr\">container</span>: <span class=\"string\">&quot;#ng-child&quot;</span>, <span class=\"comment\">// 子应用在父应用的挂载点</span></span><br><span class=\"line\">    <span class=\"attr\">activeRule</span>: <span class=\"function\">(<span class=\"params\">location</span>) =&gt;</span> location.<span class=\"property\">pathname</span>.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;/ng-child&quot;</span>), <span class=\"comment\">// 父应用中激活子应用的规则</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"comment\">// 启动 父应用</span></span><br><span class=\"line\"><span class=\"title function_\">start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">createRoot</span>(</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span></span><br><span class=\"line\">);</span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">App</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">App</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If you want to start measuring performance in your app, pass a function</span></span><br><span class=\"line\"><span class=\"comment\">// to log results (for example: reportWebVitals(console.log))</span></span><br><span class=\"line\"><span class=\"comment\">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span></span><br><span class=\"line\"><span class=\"title function_\">reportWebVitals</span>();</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"组件库-react-darui\"><a href=\"#组件库-react-darui\" class=\"headerlink\" title=\"组件库 react-darui\"></a>组件库 react-darui</h1><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://ant.design/components/overview-cn/\">antd 组件库</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6986258669172490271\">qiankun 实践</a></p>\n</blockquote>\n"},{"title":"微前端 qiankun angular子应用","date":"2023-02-05T11:07:16.000Z","_content":"\n# 生成项目\n\n```typescript\nng new <app-name> --skip-tests\n```\n\n# qiankun 配置\n\n1. 添加打包工具\n   ```typescript\n   yarn add @angular-builders/custom-webpack\n   ```\n2. 配置 `angular.json`\n   ```typescript\n   architect > build\n   \"builder\": \"@angular-builders/custom-webpack:browser\"\n   \"customWebpackConfig\": {\n     \"path\": \"./custom-webpack.config.js\"\n   }\n   architect > serve\n   \"builder\": \"@angular-builders/custom-webpack:dev-server\"\n   ```\n3. 根目录添加 `custom-webpack.config.js`\n   ```typescript\n   const appName = require(\"./package.json\").name;\n   module.exports = {\n     devServer: {\n       headers: {\n         \"Access-Control-Allow-Origin\": \"*\",\n       },\n     },\n     output: {\n       library: `${appName}-[name]`,\n       libraryTarget: \"umd\",\n     },\n   };\n   ```\n4. src 下添加 `public-path.js`\n   ```typescript\n   if (window.__POWERED_BY_QIANKUN__) {\n     // eslint-disable-next-line no-undef\n     __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n   }\n   ```\n5. 修改 `polyfills.ts`\n\n   ```typescript\n   // import 'zone.js';  // Included with Angular CLI.\n   ```\n\n6. 修改 `main.ts`\n\n   ```typescript\n   import \"./public-path\";\n   import { enableProdMode, NgModuleRef } from \"@angular/core\";\n   import { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n\n   import { AppModule } from \"./app/app.module\";\n   import { environment } from \"./environments/environment\";\n\n   if (environment.production) {\n     enableProdMode();\n   }\n\n   let app: void | NgModuleRef<AppModule>;\n   async function render() {\n     app = await platformBrowserDynamic()\n       .bootstrapModule(AppModule)\n       .catch((err) => console.error(err));\n   }\n   if (!(window as any).__POWERED_BY_QIANKUN__) {\n     render();\n   }\n\n   export async function bootstrap(props: Object) {\n     console.log(props);\n   }\n\n   export async function mount(props: Object) {\n     render();\n   }\n\n   export async function unmount(props: Object) {\n     console.log(props);\n     // @ts-ignore\n     app.destroy();\n   }\n   ```\n\n# 组件库 ng-darui\n\n# 参考链接\n\n> [华为组件库](https://devui.design/)\n","source":"_posts/qiankun-ng-child.md","raw":"---\ntitle: 微前端 qiankun angular子应用\ndate: 2023-02-05 19:07:16\ntags: [微前端, angular]\n---\n\n# 生成项目\n\n```typescript\nng new <app-name> --skip-tests\n```\n\n# qiankun 配置\n\n1. 添加打包工具\n   ```typescript\n   yarn add @angular-builders/custom-webpack\n   ```\n2. 配置 `angular.json`\n   ```typescript\n   architect > build\n   \"builder\": \"@angular-builders/custom-webpack:browser\"\n   \"customWebpackConfig\": {\n     \"path\": \"./custom-webpack.config.js\"\n   }\n   architect > serve\n   \"builder\": \"@angular-builders/custom-webpack:dev-server\"\n   ```\n3. 根目录添加 `custom-webpack.config.js`\n   ```typescript\n   const appName = require(\"./package.json\").name;\n   module.exports = {\n     devServer: {\n       headers: {\n         \"Access-Control-Allow-Origin\": \"*\",\n       },\n     },\n     output: {\n       library: `${appName}-[name]`,\n       libraryTarget: \"umd\",\n     },\n   };\n   ```\n4. src 下添加 `public-path.js`\n   ```typescript\n   if (window.__POWERED_BY_QIANKUN__) {\n     // eslint-disable-next-line no-undef\n     __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n   }\n   ```\n5. 修改 `polyfills.ts`\n\n   ```typescript\n   // import 'zone.js';  // Included with Angular CLI.\n   ```\n\n6. 修改 `main.ts`\n\n   ```typescript\n   import \"./public-path\";\n   import { enableProdMode, NgModuleRef } from \"@angular/core\";\n   import { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n\n   import { AppModule } from \"./app/app.module\";\n   import { environment } from \"./environments/environment\";\n\n   if (environment.production) {\n     enableProdMode();\n   }\n\n   let app: void | NgModuleRef<AppModule>;\n   async function render() {\n     app = await platformBrowserDynamic()\n       .bootstrapModule(AppModule)\n       .catch((err) => console.error(err));\n   }\n   if (!(window as any).__POWERED_BY_QIANKUN__) {\n     render();\n   }\n\n   export async function bootstrap(props: Object) {\n     console.log(props);\n   }\n\n   export async function mount(props: Object) {\n     render();\n   }\n\n   export async function unmount(props: Object) {\n     console.log(props);\n     // @ts-ignore\n     app.destroy();\n   }\n   ```\n\n# 组件库 ng-darui\n\n# 参考链接\n\n> [华为组件库](https://devui.design/)\n","slug":"qiankun-ng-child","published":1,"updated":"2023-02-09T14:06:04.460Z","_id":"cldx463ul0005j0tm63f91huq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng <span class=\"keyword\">new</span> &lt;app-name&gt; --skip-tests</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"qiankun-配置\"><a href=\"#qiankun-配置\" class=\"headerlink\" title=\"qiankun 配置\"></a>qiankun 配置</h1><ol>\n<li><p>添加打包工具</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add <span class=\"meta\">@angular</span>-builders/custom-webpack</span><br></pre></td></tr></table></figure></li>\n<li><p>配置 <code>angular.json</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">architect &gt; build</span><br><span class=\"line\"><span class=\"string\">&quot;builder&quot;</span>: <span class=\"string\">&quot;@angular-builders/custom-webpack:browser&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;customWebpackConfig&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;./custom-webpack.config.js&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">architect &gt; serve</span><br><span class=\"line\"><span class=\"string\">&quot;builder&quot;</span>: <span class=\"string\">&quot;@angular-builders/custom-webpack:dev-server&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>根目录添加 <code>custom-webpack.config.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> appName = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./package.json&quot;</span>).<span class=\"property\">name</span>;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">`<span class=\"subst\">$&#123;appName&#125;</span>-[name]`</span>,</span><br><span class=\"line\">    <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&quot;umd&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>src 下添加 <code>public-path.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-undef</span></span><br><span class=\"line\">  __webpack_public_path__ = <span class=\"variable language_\">window</span>.<span class=\"property\">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>polyfills.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import &#x27;zone.js&#x27;;  // Included with Angular CLI.</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>main.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./public-path&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; enableProdMode, <span class=\"title class_\">NgModuleRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@angular/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@angular/platform-browser-dynamic&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app/app.module&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./environments/environment&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (environment.<span class=\"property\">production</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">enableProdMode</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">app</span>: <span class=\"built_in\">void</span> | <span class=\"title class_\">NgModuleRef</span>&lt;<span class=\"title class_\">AppModule</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  app = <span class=\"keyword\">await</span> <span class=\"title function_\">platformBrowserDynamic</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">bootstrapModule</span>(<span class=\"title class_\">AppModule</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\">props: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">mount</span>(<span class=\"params\">props: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unmount</span>(<span class=\"params\">props: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props);</span><br><span class=\"line\">  <span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\">  app.<span class=\"title function_\">destroy</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"组件库-ng-darui\"><a href=\"#组件库-ng-darui\" class=\"headerlink\" title=\"组件库 ng-darui\"></a>组件库 ng-darui</h1><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://devui.design/\">华为组件库</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng <span class=\"keyword\">new</span> &lt;app-name&gt; --skip-tests</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"qiankun-配置\"><a href=\"#qiankun-配置\" class=\"headerlink\" title=\"qiankun 配置\"></a>qiankun 配置</h1><ol>\n<li><p>添加打包工具</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add <span class=\"meta\">@angular</span>-builders/custom-webpack</span><br></pre></td></tr></table></figure></li>\n<li><p>配置 <code>angular.json</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">architect &gt; build</span><br><span class=\"line\"><span class=\"string\">&quot;builder&quot;</span>: <span class=\"string\">&quot;@angular-builders/custom-webpack:browser&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;customWebpackConfig&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;./custom-webpack.config.js&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">architect &gt; serve</span><br><span class=\"line\"><span class=\"string\">&quot;builder&quot;</span>: <span class=\"string\">&quot;@angular-builders/custom-webpack:dev-server&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>根目录添加 <code>custom-webpack.config.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> appName = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./package.json&quot;</span>).<span class=\"property\">name</span>;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">`<span class=\"subst\">$&#123;appName&#125;</span>-[name]`</span>,</span><br><span class=\"line\">    <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&quot;umd&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>src 下添加 <code>public-path.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-undef</span></span><br><span class=\"line\">  __webpack_public_path__ = <span class=\"variable language_\">window</span>.<span class=\"property\">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>polyfills.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import &#x27;zone.js&#x27;;  // Included with Angular CLI.</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>main.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./public-path&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; enableProdMode, <span class=\"title class_\">NgModuleRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@angular/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@angular/platform-browser-dynamic&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app/app.module&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./environments/environment&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (environment.<span class=\"property\">production</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">enableProdMode</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">app</span>: <span class=\"built_in\">void</span> | <span class=\"title class_\">NgModuleRef</span>&lt;<span class=\"title class_\">AppModule</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  app = <span class=\"keyword\">await</span> <span class=\"title function_\">platformBrowserDynamic</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">bootstrapModule</span>(<span class=\"title class_\">AppModule</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\">props: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">mount</span>(<span class=\"params\">props: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unmount</span>(<span class=\"params\">props: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props);</span><br><span class=\"line\">  <span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\">  app.<span class=\"title function_\">destroy</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"组件库-ng-darui\"><a href=\"#组件库-ng-darui\" class=\"headerlink\" title=\"组件库 ng-darui\"></a>组件库 ng-darui</h1><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://devui.design/\">华为组件库</a></p>\n</blockquote>\n"},{"title":"微前端 qiankun react子应用","date":"2023-02-05T11:06:12.000Z","_content":"\n# 生成项目\n\n```typescript\nnpx create-react-app <app-name> --template=typescript\n```\n\n# qiankun 配置\n\n1. 添加打包工具\n   ```typescript\n   yarn add @rescripts/cli\n   ```\n2. 配置打包信息，在根目录下添加 `.rescriptsrc.js`\n\n   ```typescript\n   const { name } = require(\"./package\");\n   module.exports = {\n     webpack: (config) => {\n       config.output.library = `${name}-[name]`;\n       config.output.libraryTarget = \"umd\";\n       // config.output.jsonpFunction = `webpackJsonp_${name}`;\n       config.output.globalObject = \"window\";\n\n       return config;\n     },\n\n     devServer: (_) => {\n       const config = _;\n       config.port = \"3002\";\n       config.headers = {\n         \"Access-Control-Allow-Origin\": \"*\",\n       };\n       config.historyApiFallback = true;\n       config.hot = false;\n       // config.watchContentBase = false;\n       config.liveReload = false;\n\n       return config;\n     },\n   };\n   ```\n\n3. src 下添加 `public-path.js`\n   ```typescript\n   if (window.__POWERED_BY_QIANKUN__) {\n     // eslint-disable-next-line no-undef\n     __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n   }\n   ```\n4. 修改 `index.jsx`\n\n   ```typescript\n   import \"./public-path\";\n   import React from \"react\";\n   import ReactDOM from \"react-dom\";\n   import App from \"./App\";\n   import { BrowserRouter } from \"react-router-dom\";\n\n   function render(props) {\n     const { container } = props;\n     ReactDOM.render(\n       <BrowserRouter\n         basename={window.__POWERED_BY_QIANKUN__ ? \"/rc-child\" : \"/\"}\n       >\n         <App />\n       </BrowserRouter>,\n       container\n         ? container.querySelector(\"#root\")\n         : document.querySelector(\"#root\")\n     );\n   }\n\n   if (!window.__POWERED_BY_QIANKUN__) {\n     render({});\n   }\n\n   export async function bootstrap() {\n     console.log(\"[react16] react app bootstraped\");\n   }\n\n   export async function mount(props) {\n     console.log(\"[react16] props from main framework\", props);\n     render(props);\n   }\n\n   export async function unmount(props) {\n     const { container } = props;\n     ReactDOM.unmountComponentAtNode(\n       container\n         ? container.querySelector(\"#root\")\n         : document.querySelector(\"#root\")\n     );\n   }\n   ```\n\n# 组件库 react-darui\n\n# 参考链接\n\n> [antd 组件库](https://ant.design/components/overview-cn/)\n","source":"_posts/qiankun-rc-child.md","raw":"---\ntitle: 微前端 qiankun react子应用\ndate: 2023-02-05 19:06:12\ntags: [微前端, react]\n---\n\n# 生成项目\n\n```typescript\nnpx create-react-app <app-name> --template=typescript\n```\n\n# qiankun 配置\n\n1. 添加打包工具\n   ```typescript\n   yarn add @rescripts/cli\n   ```\n2. 配置打包信息，在根目录下添加 `.rescriptsrc.js`\n\n   ```typescript\n   const { name } = require(\"./package\");\n   module.exports = {\n     webpack: (config) => {\n       config.output.library = `${name}-[name]`;\n       config.output.libraryTarget = \"umd\";\n       // config.output.jsonpFunction = `webpackJsonp_${name}`;\n       config.output.globalObject = \"window\";\n\n       return config;\n     },\n\n     devServer: (_) => {\n       const config = _;\n       config.port = \"3002\";\n       config.headers = {\n         \"Access-Control-Allow-Origin\": \"*\",\n       };\n       config.historyApiFallback = true;\n       config.hot = false;\n       // config.watchContentBase = false;\n       config.liveReload = false;\n\n       return config;\n     },\n   };\n   ```\n\n3. src 下添加 `public-path.js`\n   ```typescript\n   if (window.__POWERED_BY_QIANKUN__) {\n     // eslint-disable-next-line no-undef\n     __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n   }\n   ```\n4. 修改 `index.jsx`\n\n   ```typescript\n   import \"./public-path\";\n   import React from \"react\";\n   import ReactDOM from \"react-dom\";\n   import App from \"./App\";\n   import { BrowserRouter } from \"react-router-dom\";\n\n   function render(props) {\n     const { container } = props;\n     ReactDOM.render(\n       <BrowserRouter\n         basename={window.__POWERED_BY_QIANKUN__ ? \"/rc-child\" : \"/\"}\n       >\n         <App />\n       </BrowserRouter>,\n       container\n         ? container.querySelector(\"#root\")\n         : document.querySelector(\"#root\")\n     );\n   }\n\n   if (!window.__POWERED_BY_QIANKUN__) {\n     render({});\n   }\n\n   export async function bootstrap() {\n     console.log(\"[react16] react app bootstraped\");\n   }\n\n   export async function mount(props) {\n     console.log(\"[react16] props from main framework\", props);\n     render(props);\n   }\n\n   export async function unmount(props) {\n     const { container } = props;\n     ReactDOM.unmountComponentAtNode(\n       container\n         ? container.querySelector(\"#root\")\n         : document.querySelector(\"#root\")\n     );\n   }\n   ```\n\n# 组件库 react-darui\n\n# 参考链接\n\n> [antd 组件库](https://ant.design/components/overview-cn/)\n","slug":"qiankun-rc-child","published":1,"updated":"2023-02-09T14:06:04.460Z","_id":"cldx463um0006j0tm0jx76zq6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app &lt;app-name&gt; --template=typescript</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"qiankun-配置\"><a href=\"#qiankun-配置\" class=\"headerlink\" title=\"qiankun 配置\"></a>qiankun 配置</h1><ol>\n<li><p>添加打包工具</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add <span class=\"meta\">@rescripts</span>/cli</span><br></pre></td></tr></table></figure></li>\n<li><p>配置打包信息，在根目录下添加 <code>.rescriptsrc.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; name &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./package&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">webpack</span>: <span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    config.<span class=\"property\">output</span>.<span class=\"property\">library</span> = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>-[name]`</span>;</span><br><span class=\"line\">    config.<span class=\"property\">output</span>.<span class=\"property\">libraryTarget</span> = <span class=\"string\">&quot;umd&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// config.output.jsonpFunction = `webpackJsonp_$&#123;name&#125;`;</span></span><br><span class=\"line\">    config.<span class=\"property\">output</span>.<span class=\"property\">globalObject</span> = <span class=\"string\">&quot;window&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: <span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> config = _;</span><br><span class=\"line\">    config.<span class=\"property\">port</span> = <span class=\"string\">&quot;3002&quot;</span>;</span><br><span class=\"line\">    config.<span class=\"property\">headers</span> = &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    config.<span class=\"property\">historyApiFallback</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    config.<span class=\"property\">hot</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// config.watchContentBase = false;</span></span><br><span class=\"line\">    config.<span class=\"property\">liveReload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>src 下添加 <code>public-path.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-undef</span></span><br><span class=\"line\">  __webpack_public_path__ = <span class=\"variable language_\">window</span>.<span class=\"property\">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>index.jsx</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./public-path&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container &#125; = props;</span><br><span class=\"line\">  <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">basename</span>=<span class=\"string\">&#123;window.__POWERED_BY_QIANKUN__</span> ? &quot;/<span class=\"attr\">rc-child</span>&quot; <span class=\"attr\">:</span> &quot;/&quot;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">BrowserRouter</span>&gt;</span></span>,</span><br><span class=\"line\">    container</span><br><span class=\"line\">      ? container.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">      : <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(&#123;&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[react16] react app bootstraped&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">mount</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[react16] props from main framework&quot;</span>, props);</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unmount</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container &#125; = props;</span><br><span class=\"line\">  <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">unmountComponentAtNode</span>(</span><br><span class=\"line\">    container</span><br><span class=\"line\">      ? container.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">      : <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"组件库-react-darui\"><a href=\"#组件库-react-darui\" class=\"headerlink\" title=\"组件库 react-darui\"></a>组件库 react-darui</h1><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://ant.design/components/overview-cn/\">antd 组件库</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app &lt;app-name&gt; --template=typescript</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"qiankun-配置\"><a href=\"#qiankun-配置\" class=\"headerlink\" title=\"qiankun 配置\"></a>qiankun 配置</h1><ol>\n<li><p>添加打包工具</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add <span class=\"meta\">@rescripts</span>/cli</span><br></pre></td></tr></table></figure></li>\n<li><p>配置打包信息，在根目录下添加 <code>.rescriptsrc.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; name &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./package&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">webpack</span>: <span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    config.<span class=\"property\">output</span>.<span class=\"property\">library</span> = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>-[name]`</span>;</span><br><span class=\"line\">    config.<span class=\"property\">output</span>.<span class=\"property\">libraryTarget</span> = <span class=\"string\">&quot;umd&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// config.output.jsonpFunction = `webpackJsonp_$&#123;name&#125;`;</span></span><br><span class=\"line\">    config.<span class=\"property\">output</span>.<span class=\"property\">globalObject</span> = <span class=\"string\">&quot;window&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: <span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> config = _;</span><br><span class=\"line\">    config.<span class=\"property\">port</span> = <span class=\"string\">&quot;3002&quot;</span>;</span><br><span class=\"line\">    config.<span class=\"property\">headers</span> = &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    config.<span class=\"property\">historyApiFallback</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    config.<span class=\"property\">hot</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// config.watchContentBase = false;</span></span><br><span class=\"line\">    config.<span class=\"property\">liveReload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>src 下添加 <code>public-path.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-undef</span></span><br><span class=\"line\">  __webpack_public_path__ = <span class=\"variable language_\">window</span>.<span class=\"property\">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>index.jsx</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./public-path&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container &#125; = props;</span><br><span class=\"line\">  <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">basename</span>=<span class=\"string\">&#123;window.__POWERED_BY_QIANKUN__</span> ? &quot;/<span class=\"attr\">rc-child</span>&quot; <span class=\"attr\">:</span> &quot;/&quot;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">BrowserRouter</span>&gt;</span></span>,</span><br><span class=\"line\">    container</span><br><span class=\"line\">      ? container.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">      : <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(&#123;&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[react16] react app bootstraped&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">mount</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[react16] props from main framework&quot;</span>, props);</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unmount</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container &#125; = props;</span><br><span class=\"line\">  <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">unmountComponentAtNode</span>(</span><br><span class=\"line\">    container</span><br><span class=\"line\">      ? container.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">      : <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"组件库-react-darui\"><a href=\"#组件库-react-darui\" class=\"headerlink\" title=\"组件库 react-darui\"></a>组件库 react-darui</h1><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://ant.design/components/overview-cn/\">antd 组件库</a></p>\n</blockquote>\n"},{"title":"vscode的终端设置成gitbash","date":"2023-02-09T14:44:30.000Z","_content":"\n1. 打开 vscode 设置\n\n2. 点击右上角转成 json 格式\n\n3. 添加代码\n\n   ```typescript\n   \"terminal.integrated.profiles.windows\": {\n       \"gitBash\": {\n           \"path\": \"D:\\\\soft\\\\Git\\\\bin\\\\bash.exe\", //本地bash程序的路径\n       }\n   },\n   \"terminal.integrated.defaultProfile.windows\": \"gitBash\",\n   ```\n\n4. 回到设置，搜索 shell windows，在以下的下拉框中选择 gitbash\n   ![vscode-gitbash-1](/assets/vscode-gitbash-1.png)\n\n5. 重新打开终端就能看见了，如果不行就重启 vscode\n   ![vscode-gitbash-2](/assets/vscode-gitbash-2.png)\n","source":"_posts/vscode-gitbash.md","raw":"---\ntitle: vscode的终端设置成gitbash\ndate: 2023-02-09 22:44:30\ntags:\n---\n\n1. 打开 vscode 设置\n\n2. 点击右上角转成 json 格式\n\n3. 添加代码\n\n   ```typescript\n   \"terminal.integrated.profiles.windows\": {\n       \"gitBash\": {\n           \"path\": \"D:\\\\soft\\\\Git\\\\bin\\\\bash.exe\", //本地bash程序的路径\n       }\n   },\n   \"terminal.integrated.defaultProfile.windows\": \"gitBash\",\n   ```\n\n4. 回到设置，搜索 shell windows，在以下的下拉框中选择 gitbash\n   ![vscode-gitbash-1](/assets/vscode-gitbash-1.png)\n\n5. 重新打开终端就能看见了，如果不行就重启 vscode\n   ![vscode-gitbash-2](/assets/vscode-gitbash-2.png)\n","slug":"vscode-gitbash","published":1,"updated":"2023-02-09T15:51:07.150Z","_id":"cldx7nv180000141ua9qua97w","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li><p>打开 vscode 设置</p>\n</li>\n<li><p>点击右上角转成 json 格式</p>\n</li>\n<li><p>添加代码</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;terminal.integrated.profiles.windows&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;gitBash&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;D:\\\\soft\\\\Git\\\\bin\\\\bash.exe&quot;</span>, <span class=\"comment\">//本地bash程序的路径</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">&quot;terminal.integrated.defaultProfile.windows&quot;</span>: <span class=\"string\">&quot;gitBash&quot;</span>,</span><br></pre></td></tr></table></figure></li>\n<li><p>回到设置，搜索 shell windows，在以下的下拉框中选择 gitbash<br><img src=\"/assets/vscode-gitbash-1.png\" alt=\"vscode-gitbash-1\"></p>\n</li>\n<li><p>重新打开终端就能看见了，如果不行就重启 vscode<br><img src=\"/assets/vscode-gitbash-2.png\" alt=\"vscode-gitbash-2\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>打开 vscode 设置</p>\n</li>\n<li><p>点击右上角转成 json 格式</p>\n</li>\n<li><p>添加代码</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;terminal.integrated.profiles.windows&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;gitBash&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;D:\\\\soft\\\\Git\\\\bin\\\\bash.exe&quot;</span>, <span class=\"comment\">//本地bash程序的路径</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">&quot;terminal.integrated.defaultProfile.windows&quot;</span>: <span class=\"string\">&quot;gitBash&quot;</span>,</span><br></pre></td></tr></table></figure></li>\n<li><p>回到设置，搜索 shell windows，在以下的下拉框中选择 gitbash<br><img src=\"/assets/vscode-gitbash-1.png\" alt=\"vscode-gitbash-1\"></p>\n</li>\n<li><p>重新打开终端就能看见了，如果不行就重启 vscode<br><img src=\"/assets/vscode-gitbash-2.png\" alt=\"vscode-gitbash-2\"></p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cldx463ug0001j0tm0ntx1tt2","tag_id":"cldx463uj0003j0tmdyiq2iaz","_id":"cldx463uo000aj0tm1kpy8457"},{"post_id":"cldx463ug0001j0tm0ntx1tt2","tag_id":"cldx463um0007j0tmdjhh0to5","_id":"cldx463uo000bj0tm8jxggg8y"},{"post_id":"cldx463ug0001j0tm0ntx1tt2","tag_id":"cldx463un0008j0tm1gxi2er4","_id":"cldx463uo000dj0tmcc3sfgob"},{"post_id":"cldx463ui0002j0tm649b16j7","tag_id":"cldx463un0009j0tm13lgesdq","_id":"cldx463uo000fj0tmge222cos"},{"post_id":"cldx463ui0002j0tm649b16j7","tag_id":"cldx463uo000cj0tmdizk65gj","_id":"cldx463uo000gj0tmev3hgdgo"},{"post_id":"cldx463ul0004j0tmbwfthsg9","tag_id":"cldx463uo000ej0tm1t4z55wz","_id":"cldx463uq000jj0tm1fv38kxc"},{"post_id":"cldx463ul0004j0tmbwfthsg9","tag_id":"cldx463um0007j0tmdjhh0to5","_id":"cldx463uq000kj0tmd7pcfk5r"},{"post_id":"cldx463ul0005j0tm63f91huq","tag_id":"cldx463uo000ej0tm1t4z55wz","_id":"cldx463us000nj0tmakgzavnq"},{"post_id":"cldx463ul0005j0tm63f91huq","tag_id":"cldx463uq000lj0tmg9m55f9b","_id":"cldx463us000oj0tm47ogd3ox"},{"post_id":"cldx463um0006j0tm0jx76zq6","tag_id":"cldx463uo000ej0tm1t4z55wz","_id":"cldx463us000qj0tm5g0k2wb9"},{"post_id":"cldx463um0006j0tm0jx76zq6","tag_id":"cldx463um0007j0tmdjhh0to5","_id":"cldx463us000rj0tm9fpk8gd5"}],"Tag":[{"name":"状态管理","_id":"cldx463uj0003j0tmdyiq2iaz"},{"name":"react","_id":"cldx463um0007j0tmdjhh0to5"},{"name":"自定义","_id":"cldx463un0008j0tm1gxi2er4"},{"name":"js","_id":"cldx463un0009j0tm13lgesdq"},{"name":"链式调用","_id":"cldx463uo000cj0tmdizk65gj"},{"name":"微前端","_id":"cldx463uo000ej0tm1t4z55wz"},{"name":"angular","_id":"cldx463uq000lj0tmg9m55f9b"},{"name":"vscode","_id":"cldxa0fp90000xc1u9yga8vyw"}]}}