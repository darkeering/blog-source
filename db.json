{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/assets/vscode-gitbash/vscode-gitbash-1.png","path":"assets/vscode-gitbash/vscode-gitbash-1.png","modified":1,"renderable":0},{"_id":"source/assets/vscode-gitbash/vscode-gitbash-2.png","path":"assets/vscode-gitbash/vscode-gitbash-2.png","modified":1,"renderable":0},{"_id":"source/assets/promise/1.png","path":"assets/promise/1.png","modified":1,"renderable":0},{"_id":"source/assets/promise/2.png","path":"assets/promise/2.png","modified":1,"renderable":0},{"_id":"source/assets/promise/3.png","path":"assets/promise/3.png","modified":1,"renderable":0},{"_id":"source/assets/promise/5.png","path":"assets/promise/5.png","modified":1,"renderable":0},{"_id":"source/assets/promise/4.png","path":"assets/promise/4.png","modified":1,"renderable":0},{"_id":"source/assets/promise/6.png","path":"assets/promise/6.png","modified":1,"renderable":0},{"_id":"source/assets/promise/7.png","path":"assets/promise/7.png","modified":1,"renderable":0},{"_id":"source/assets/promise/8.png","path":"assets/promise/8.png","modified":1,"renderable":0},{"_id":"themes/Anatolo/source/css/blog_basic.styl","path":"css/blog_basic.styl","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/css/font-awesome.css","path":"css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/css/insight.css","path":"css/insight.css","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/images/favicon.webp","path":"images/favicon.webp","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/images/logo.jpg","path":"images/logo.jpg","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/images/gongan.png","path":"images/gongan.png","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/images/logo.webp","path":"images/logo.webp","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/js/add-bookmark.js","path":"js/add-bookmark.js","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/js/baidu-tongji.js","path":"js/baidu-tongji.js","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/images/logo@2x.webp","path":"images/logo@2x.webp","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/js/tagcanvas.js","path":"js/tagcanvas.js","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/js/tagcloud.js","path":"js/tagcloud.js","modified":1,"renderable":1},{"_id":"themes/Anatolo/source/js/visitors.js","path":"js/visitors.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/chained-calls.md","hash":"955ae72486b253c2091de79db12da346dc9ae91a","modified":1678417119771},{"_id":"source/_posts/module-federation.md","hash":"505b4be1979fa269f877d456358e354b29b06bf1","modified":1678416921581},{"_id":"source/_posts/hooks-context-state.md","hash":"c8f59bacda8453d7962fb0d9c856cbc7ce97bdeb","modified":1678417119771},{"_id":"source/_posts/module-federation3.md","hash":"0c1344195eb2a72844e7cdc8473fc702537b2878","modified":1678416932934},{"_id":"source/_posts/module-federation2.md","hash":"c71177330830ba414fffd5dfbf325f81651e572e","modified":1678416930103},{"_id":"source/_posts/promise.md","hash":"b94f5ef2fb06f207bf0e9eb15068b82276242f86","modified":1678416949750},{"_id":"source/_posts/qiankun-ng-child.md","hash":"9b5e8475753e79dcce8950aab0c547a7b91ed735","modified":1678417068972},{"_id":"source/_posts/qiankun-base.md","hash":"419d64a4624cfe74cd0bb96d196982980feb4940","modified":1678417068972},{"_id":"source/_posts/qiankun-rc-child.md","hash":"2026afbb966b1809526aee9226e19215363873c2","modified":1678417068972},{"_id":"source/_posts/vscode-gitbash.md","hash":"a560b984fd7dc49d4be9132f08be88037faa3d18","modified":1678417068972},{"_id":"source/assets/vscode-gitbash/vscode-gitbash-2.png","hash":"2adb7aab61d1759729a7ee63fa7b15533fb4835d","modified":1676018883076},{"_id":"source/assets/promise/2.png","hash":"f411d0acf1d183bcaea1045002fd34f33c444965","modified":1676025667129},{"_id":"source/assets/promise/1.png","hash":"23e7b20f4bc9202761522a0e481bc5a468ba02b7","modified":1676018752605},{"_id":"source/assets/promise/5.png","hash":"b9f2e497f34b6539b539feb8b8f6d57194ac70c6","modified":1676018825520},{"_id":"source/assets/promise/3.png","hash":"6e60f2f8409cd84432ac46a31dd5f5745520d8b7","modified":1676025685328},{"_id":"source/assets/promise/8.png","hash":"e394e99a8e218bc8ed259d5b868a43e13d4a467c","modified":1676025751435},{"_id":"themes/Anatolo/package.json","hash":"4565bca74bb4da9192c0b822b00796e9e1cd721a","modified":1675951564460},{"_id":"themes/Anatolo/LICENSE","hash":"5c07e26ca967fa59fcee315aac5e66217318786f","modified":1675951564460},{"_id":"themes/Anatolo/README.md","hash":"819253488d3dbe8cab93f1a9765fad915849ae04","modified":1675951564460},{"_id":"themes/Anatolo/layout/archive.pug","hash":"c82013536abdb2ab8e4a95d183bce5c146aa71e8","modified":1675951564460},{"_id":"themes/Anatolo/_config.yml","hash":"e28841160940c42c1b8680c29442c3485b4e0e80","modified":1675951564460},{"_id":"themes/Anatolo/layout/category.pug","hash":"a26211b880f1ca1c4acc48ace875b0a7bf78059f","modified":1675951564460},{"_id":"themes/Anatolo/languages/en.yml","hash":"46b500a4ff216193ada572894835d32a9afce9da","modified":1675951564460},{"_id":"themes/Anatolo/layout/index.pug","hash":"3ae73a5dde0ae01de86cac850ab255deee2fcf47","modified":1675951564460},{"_id":"themes/Anatolo/layout/mixins.pug","hash":"811e4c98a254c241a4abd351de6aff10adccdb9f","modified":1675951564460},{"_id":"themes/Anatolo/languages/zh-cn.yml","hash":"6aaa07597d6e305cdcaf8e701773db8751a5ae59","modified":1675951564460},{"_id":"themes/Anatolo/layout/page.pug","hash":"05aeea0ce45f76e91906a6e67b6643710e81e9a7","modified":1675951564460},{"_id":"themes/Anatolo/scripts/index.js","hash":"c99843a04570938ce5e2450d46c6cdb52f63975b","modified":1675951564460},{"_id":"themes/Anatolo/languages/pt-BR.yml","hash":"49763390b15345ee44f0a1ebd0cc5bcb1579a380","modified":1675951564460},{"_id":"themes/Anatolo/includes/generators/tags.js","hash":"9da7d771aac3d188c35eca40a9c6a64c5eaac513","modified":1675951564460},{"_id":"themes/Anatolo/includes/generators/insight.js","hash":"8fcac981ab9537fc110ff8a6d00f67bd6f41aeec","modified":1675951564460},{"_id":"themes/Anatolo/includes/tasks/welcome.js","hash":"785651ca1d4cd9dd2b5ed7d8d6331015c41dfff6","modified":1675951564460},{"_id":"themes/Anatolo/layout/tags.pug","hash":"ecaa717b5fbeecef8b3a48f365ad8438207ef76d","modified":1675951564460},{"_id":"themes/Anatolo/layout/tag.pug","hash":"68b3291cb17f61611581e970522b89ce99e71ecd","modified":1675951564460},{"_id":"themes/Anatolo/includes/helpers/site.js","hash":"6b6575f834ef0d9390bd5243acc54804e59d0e6e","modified":1675951564460},{"_id":"themes/Anatolo/layout/post.pug","hash":"9232c12ec1783b6711614493acc15db561ab05d6","modified":1675951564460},{"_id":"themes/Anatolo/layout/partial/comments.pug","hash":"f556cc33659011d74f0f08db3187c0a4e71a2196","modified":1675951564460},{"_id":"themes/Anatolo/layout/partial/footer.pug","hash":"a115a6a6edb040ef1c7902a17999b2d1c4545b11","modified":1675951564460},{"_id":"themes/Anatolo/layout/partial/head.pug","hash":"037f93634d68ee9e5600dcba2d4f5fce113c325f","modified":1675951564460},{"_id":"themes/Anatolo/layout/partial/layout.pug","hash":"6df1374fb869c7ffe92bb96ff9a5e8aeb23d69b6","modified":1675951564460},{"_id":"themes/Anatolo/layout/partial/sidebar.pug","hash":"579b8eba164854493380f0128e8b3ab2b9ab7300","modified":1675951564460},{"_id":"themes/Anatolo/layout/partial/search.pug","hash":"dc59645052474c3bbee16a253166829da5ef6215","modified":1675951564460},{"_id":"themes/Anatolo/layout/partial/nav.pug","hash":"03075e491e61ce559c722654c1737be4d34c84d8","modified":1675951564460},{"_id":"themes/Anatolo/layout/partial/toc.pug","hash":"c675dbbc92f327b4ad3906527c44959db2bbc9f5","modified":1675951564460},{"_id":"themes/Anatolo/source/css/blog_basic.styl","hash":"55bc464894c27dad8e65af3e59937fc194e34f81","modified":1675951564460},{"_id":"themes/Anatolo/layout/partial/social_links.pug","hash":"35abc17db5272074fbeb4c72b706f3ab08bf5634","modified":1675951564460},{"_id":"themes/Anatolo/source/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1675951564460},{"_id":"themes/Anatolo/source/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1675951564460},{"_id":"themes/Anatolo/source/css/insight.css","hash":"2b3ed9e1934af183290bd99d7c759864a5b81009","modified":1675951564460},{"_id":"themes/Anatolo/source/css/search.css","hash":"b671c37428e5988f49a1547ced8e3c2d3f96cbcc","modified":1675951564460},{"_id":"themes/Anatolo/source/css/style.styl","hash":"47cba3d25de53b6c26d8a3b367c20403f2fbc09b","modified":1675951564460},{"_id":"themes/Anatolo/source/images/favicon.webp","hash":"b2c2e853f326a171da7dce74aa45a363a750c359","modified":1675951564475},{"_id":"themes/Anatolo/source/images/gongan.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1675951564475},{"_id":"themes/Anatolo/source/images/logo.webp","hash":"9371dc18ac0528af787431109538cde4910da98d","modified":1675951564475},{"_id":"themes/Anatolo/source/images/logo@2x.webp","hash":"48e26e26b8e4a07d7e5c0a4b3654675cc870f3aa","modified":1675951564475},{"_id":"themes/Anatolo/source/js/add-bookmark.js","hash":"eaf0bd18132b26d12601b6273bb8c37c745da5f1","modified":1675951564475},{"_id":"themes/Anatolo/source/js/baidu-tongji.js","hash":"21a9ee9901819b61630813a89b4688ba1f1aca86","modified":1675951564475},{"_id":"themes/Anatolo/source/js/insight.js","hash":"c2ce23243fe50e2182788ea7a44af9390c3ade7f","modified":1675951564475},{"_id":"themes/Anatolo/source/js/jquery.appear.js","hash":"8e936fd0f45787309d917541e911c3440f7565b1","modified":1675951564475},{"_id":"themes/Anatolo/source/js/jquery-migrate-1.2.1.min.js","hash":"875bce76a77590c3c438bbc6e014b39c23c8c88d","modified":1675951564475},{"_id":"themes/Anatolo/source/js/tagcloud.js","hash":"885a01a809312837617a069a72914a4e200be227","modified":1675951564491},{"_id":"source/assets/vscode-gitbash/vscode-gitbash-1.png","hash":"2385863eb6030830eb54980b4a36792086486d64","modified":1676019162381},{"_id":"source/assets/promise/4.png","hash":"082406a313f499a47a5e9fdb6059c40eab446096","modified":1676018814028},{"_id":"source/assets/promise/6.png","hash":"6c54b197fbb0a6bfd62e3c60345cb9a869e0d065","modified":1676025710549},{"_id":"source/assets/promise/7.png","hash":"9d7a5f51a44f1ffa2e4e166f907197dd7383898c","modified":1676025732691},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1675951564475},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1675951564475},{"_id":"themes/Anatolo/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1675951564460},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1675951564475},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1675951564475},{"_id":"themes/Anatolo/source/js/visitors.js","hash":"d08fea0c772848fa927554f9f520e19d17f98953","modified":1675951564491},{"_id":"themes/Anatolo/source/js/tagcanvas.js","hash":"934f653862ea18888532b5f046d97ff8df26c4a1","modified":1675951564491},{"_id":"themes/Anatolo/source/images/logo.jpg","hash":"d6df08c03b4a7ab3c0987482e22b78ad511c4f3f","modified":1675951564475},{"_id":"themes/Anatolo/source/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1675951564475},{"_id":"themes/Anatolo/source/js/jquery.js","hash":"aa6ccf721c4e76921abda46c120772d364e5b285","modified":1675951564475},{"_id":"public/content.json","hash":"41cb72c53480670f127819b96a897113b502b25d","modified":1678431097264},{"_id":"public/2023/02/09/vscode-gitbash/index.html","hash":"1f2287807944a4316f1663fb36448c053e356497","modified":1678431097264},{"_id":"public/2023/02/05/qiankun-ng-child/index.html","hash":"b6954a3f0fa69ae05b09720ba3d78b4cc8ad4727","modified":1678431097264},{"_id":"public/2023/02/05/qiankun-base/index.html","hash":"3b1215ba7fd9a754f0063f837c9afc35acabd037","modified":1678431097264},{"_id":"public/2023/02/05/chained-calls/index.html","hash":"cb09e8edf54913e7ddae47a644d7c10e12c6d339","modified":1678431097264},{"_id":"public/index.html","hash":"6e3c4e8a9b82fcc3d9943a4ba4b1cb328085acae","modified":1678431097264},{"_id":"public/archives/index.html","hash":"c3dddba32fa9b13a4dda6f4afbde475fe0690078","modified":1678431097264},{"_id":"public/archives/2023/index.html","hash":"c3dddba32fa9b13a4dda6f4afbde475fe0690078","modified":1678431097264},{"_id":"public/archives/2023/02/index.html","hash":"c237c8fcbc538250a4381fd7837630b23b4d49e3","modified":1678431097264},{"_id":"public/archives/2023/03/index.html","hash":"e02ea02275927b854b9a3b697c4e35360838d601","modified":1678431097264},{"_id":"public/tags/js/index.html","hash":"cf217a78db4c79bc8d8fa3da57c29487adff7538","modified":1678431097264},{"_id":"public/tags/链式调用/index.html","hash":"8aca94f92c7858894b1ba1914529012ccb119739","modified":1678431097264},{"_id":"public/tags/微前端/index.html","hash":"d689491f53e313dbd6a928901b12fecb0ee86855","modified":1678431097264},{"_id":"public/tags/module-federation/index.html","hash":"1e6442f1566543773fba1f0caf26a8d2de1cf9cc","modified":1678431097264},{"_id":"public/tags/angular/index.html","hash":"243ec0baccee83c9d602660c2278ecb01224cf01","modified":1678431097264},{"_id":"public/tags/状态管理/index.html","hash":"6e4d9491cc1d320904144cd5811f0b5562dfe758","modified":1678431097264},{"_id":"public/tags/react/index.html","hash":"15bba8f366316b1e52ca8767302dbaff3636d658","modified":1678431097264},{"_id":"public/tags/promise/index.html","hash":"dda70d48b1d9e11e2741655099b18827034dde3a","modified":1678431097264},{"_id":"public/tags/qiankun/index.html","hash":"7c42d6f322cb1a0d458f4e75f91a61452a29bdfa","modified":1678431097264},{"_id":"public/tags/vscode/index.html","hash":"ad695ad87bfb6196b322800fe9170c4fa277e179","modified":1678431097264},{"_id":"public/tags/index.html","hash":"be5c270534b15ae43bdc7ab1360342f67c7dfaba","modified":1678431097264},{"_id":"public/2023/03/10/module-federation3/index.html","hash":"ebb3c4734af9cb354b80c01389542ec8bffce4bb","modified":1678431097264},{"_id":"public/2023/03/04/module-federation2/index.html","hash":"104bc2e4cf1331b4e9922cba9cb7470d3eecd548","modified":1678431097264},{"_id":"public/2023/02/17/module-federation/index.html","hash":"45de4da6152bc19f1e92f4d9612f06d1c5d24aa8","modified":1678431097264},{"_id":"public/2023/02/07/promise/index.html","hash":"48c963fcb2f8a60b52f95d0947761add4dc9cd7d","modified":1678431097264},{"_id":"public/2023/02/06/hooks-context-state/index.html","hash":"0d71350011712679905b81880b11b076be058dd4","modified":1678431097264},{"_id":"public/2023/02/05/qiankun-rc-child/index.html","hash":"93fa35e89253e270399d0f09b6afa56bbf088282","modified":1678431097264},{"_id":"public/assets/promise/1.png","hash":"23e7b20f4bc9202761522a0e481bc5a468ba02b7","modified":1678431097264},{"_id":"public/assets/vscode-gitbash/vscode-gitbash-2.png","hash":"2adb7aab61d1759729a7ee63fa7b15533fb4835d","modified":1678431097264},{"_id":"public/assets/promise/2.png","hash":"f411d0acf1d183bcaea1045002fd34f33c444965","modified":1678431097264},{"_id":"public/assets/promise/5.png","hash":"b9f2e497f34b6539b539feb8b8f6d57194ac70c6","modified":1678431097264},{"_id":"public/assets/promise/3.png","hash":"6e60f2f8409cd84432ac46a31dd5f5745520d8b7","modified":1678431097264},{"_id":"public/assets/promise/8.png","hash":"e394e99a8e218bc8ed259d5b868a43e13d4a467c","modified":1678431097264},{"_id":"public/images/favicon.webp","hash":"b2c2e853f326a171da7dce74aa45a363a750c359","modified":1678431097264},{"_id":"public/images/gongan.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1678431097264},{"_id":"public/images/logo.webp","hash":"9371dc18ac0528af787431109538cde4910da98d","modified":1678431097264},{"_id":"public/images/logo@2x.webp","hash":"48e26e26b8e4a07d7e5c0a4b3654675cc870f3aa","modified":1678431097264},{"_id":"public/assets/vscode-gitbash/vscode-gitbash-1.png","hash":"2385863eb6030830eb54980b4a36792086486d64","modified":1678431097264},{"_id":"public/assets/promise/4.png","hash":"082406a313f499a47a5e9fdb6059c40eab446096","modified":1678431097264},{"_id":"public/assets/promise/6.png","hash":"6c54b197fbb0a6bfd62e3c60345cb9a869e0d065","modified":1678431097264},{"_id":"public/assets/promise/7.png","hash":"9d7a5f51a44f1ffa2e4e166f907197dd7383898c","modified":1678431097264},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1678431097264},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1678431097264},{"_id":"public/css/blog_basic.css","hash":"277c08a8a9305ddbe45a5fae2e44d0726d8f2ee1","modified":1678431097264},{"_id":"public/css/insight.css","hash":"b468a47b30b47017b06ff6c431c49a316288a501","modified":1678431097264},{"_id":"public/css/style.css","hash":"c0f346d04e643520b1bd77552bd3d723c5a88366","modified":1678431097264},{"_id":"public/css/search.css","hash":"c1cb306e075386517ac15bf4ef37c647d37ec6b5","modified":1678431097264},{"_id":"public/js/add-bookmark.js","hash":"3cd1622f94f184ca7a542fcbcce75cf9130b9208","modified":1678431097264},{"_id":"public/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1678431097264},{"_id":"public/js/baidu-tongji.js","hash":"49d6d863bc54d843efcc1cd5a92b0e3d65c4bdd6","modified":1678431097264},{"_id":"public/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1678431097264},{"_id":"public/js/insight.js","hash":"16f64c50efc78abb3d94c079d3cda0b74e809f5e","modified":1678431097264},{"_id":"public/js/visitors.js","hash":"717a2483ae4d7682d944e79c2a1efd959fa112bc","modified":1678431097264},{"_id":"public/js/tagcloud.js","hash":"cd02ffd8e5192cb25f50f6c5c920a3249ff1614f","modified":1678431097264},{"_id":"public/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1678431097264},{"_id":"public/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1678431097264},{"_id":"public/js/tagcanvas.js","hash":"db9a61a79350d1618a74a8f3448f06046c3d9a6c","modified":1678431097264},{"_id":"public/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1678431097264},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1678431097264},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1678431097264},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1678431097264},{"_id":"public/images/logo.jpg","hash":"d6df08c03b4a7ab3c0987482e22b78ad511c4f3f","modified":1678431097264},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1678431097264}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"js 链式调用","date":"2023-02-05T09:23:39.000Z","_content":"\n# 原理\n\n> 主要是在原型链上面添加函数，最后返回的是函数本身的 this 对象，操作的数据也是实例化对象的时候的数据\n\n## class 实现\n\n```typescript\nclass A {\n  constructor(data) {\n    this.data = data;\n  }\n\n  where(cb) {\n    this.data = this.data.filter(cb);\n    return this;\n  }\n\n  groupby(key) {\n    const map = new Map();\n    this.data.forEach((d) => {\n      if (map.has(d[key])) {\n        map.get(d[key]).push(d);\n      } else {\n        map.set(d[key], [d]);\n      }\n    });\n\n    this.data = Array.from(map.values());\n    return this;\n  }\n\n  excute() {\n    console.log(this.data);\n  }\n}\n\nfunction query(data) {\n  return new A(data);\n}\n\nconst data = [\n  { id: 1, grade: 5, sex: 0 },\n  { id: 2, grade: 9, sex: 0 },\n  { id: 3, grade: 9, sex: 1 },\n  { id: 4, grade: 12, sex: 0 },\n];\n\nquery(data)\n  .where((i) => i.sex === 0)\n  .groupby(\"grade\")\n  .excute();\n// [\n//   [ { id: 1, grade: 5, sex: 0 } ],\n//   [ { id: 2, grade: 9, sex: 0 } ],\n//   [ { id: 4, grade: 12, sex: 0 } ]\n// ]\n```\n","source":"_posts/chained-calls.md","raw":"---\ntitle: js 链式调用\ndate: 2023-02-05 17:23:39\ntags: ['js', '链式调用']\n---\n\n# 原理\n\n> 主要是在原型链上面添加函数，最后返回的是函数本身的 this 对象，操作的数据也是实例化对象的时候的数据\n\n## class 实现\n\n```typescript\nclass A {\n  constructor(data) {\n    this.data = data;\n  }\n\n  where(cb) {\n    this.data = this.data.filter(cb);\n    return this;\n  }\n\n  groupby(key) {\n    const map = new Map();\n    this.data.forEach((d) => {\n      if (map.has(d[key])) {\n        map.get(d[key]).push(d);\n      } else {\n        map.set(d[key], [d]);\n      }\n    });\n\n    this.data = Array.from(map.values());\n    return this;\n  }\n\n  excute() {\n    console.log(this.data);\n  }\n}\n\nfunction query(data) {\n  return new A(data);\n}\n\nconst data = [\n  { id: 1, grade: 5, sex: 0 },\n  { id: 2, grade: 9, sex: 0 },\n  { id: 3, grade: 9, sex: 1 },\n  { id: 4, grade: 12, sex: 0 },\n];\n\nquery(data)\n  .where((i) => i.sex === 0)\n  .groupby(\"grade\")\n  .excute();\n// [\n//   [ { id: 1, grade: 5, sex: 0 } ],\n//   [ { id: 2, grade: 9, sex: 0 } ],\n//   [ { id: 4, grade: 12, sex: 0 } ]\n// ]\n```\n","slug":"chained-calls","published":1,"updated":"2023-03-10T02:58:39.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf26jiro0000601u4vr292uw","content":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><blockquote>\n<p>主要是在原型链上面添加函数，最后返回的是函数本身的 this 对象，操作的数据也是实例化对象的时候的数据</p>\n</blockquote>\n<h2 id=\"class-实现\"><a href=\"#class-实现\" class=\"headerlink\" title=\"class 实现\"></a>class 实现</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">where</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"title function_\">filter</span>(cb);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">groupby</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (map.<span class=\"title function_\">has</span>(d[key])) &#123;</span><br><span class=\"line\">        map.<span class=\"title function_\">get</span>(d[key]).<span class=\"title function_\">push</span>(d);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        map.<span class=\"title function_\">set</span>(d[key], [d]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(map.<span class=\"title function_\">values</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">excute</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">query</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">grade</span>: <span class=\"number\">5</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">grade</span>: <span class=\"number\">9</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">grade</span>: <span class=\"number\">9</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">grade</span>: <span class=\"number\">12</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">query</span>(data)</span><br><span class=\"line\">  .<span class=\"title function_\">where</span>(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> i.<span class=\"property\">sex</span> === <span class=\"number\">0</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">groupby</span>(<span class=\"string\">&quot;grade&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">excute</span>();</span><br><span class=\"line\"><span class=\"comment\">// [</span></span><br><span class=\"line\"><span class=\"comment\">//   [ &#123; id: 1, grade: 5, sex: 0 &#125; ],</span></span><br><span class=\"line\"><span class=\"comment\">//   [ &#123; id: 2, grade: 9, sex: 0 &#125; ],</span></span><br><span class=\"line\"><span class=\"comment\">//   [ &#123; id: 4, grade: 12, sex: 0 &#125; ]</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><blockquote>\n<p>主要是在原型链上面添加函数，最后返回的是函数本身的 this 对象，操作的数据也是实例化对象的时候的数据</p>\n</blockquote>\n<h2 id=\"class-实现\"><a href=\"#class-实现\" class=\"headerlink\" title=\"class 实现\"></a>class 实现</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">where</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"title function_\">filter</span>(cb);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">groupby</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (map.<span class=\"title function_\">has</span>(d[key])) &#123;</span><br><span class=\"line\">        map.<span class=\"title function_\">get</span>(d[key]).<span class=\"title function_\">push</span>(d);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        map.<span class=\"title function_\">set</span>(d[key], [d]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(map.<span class=\"title function_\">values</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">excute</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">query</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">grade</span>: <span class=\"number\">5</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">grade</span>: <span class=\"number\">9</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">grade</span>: <span class=\"number\">9</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">grade</span>: <span class=\"number\">12</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">query</span>(data)</span><br><span class=\"line\">  .<span class=\"title function_\">where</span>(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> i.<span class=\"property\">sex</span> === <span class=\"number\">0</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">groupby</span>(<span class=\"string\">&quot;grade&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">excute</span>();</span><br><span class=\"line\"><span class=\"comment\">// [</span></span><br><span class=\"line\"><span class=\"comment\">//   [ &#123; id: 1, grade: 5, sex: 0 &#125; ],</span></span><br><span class=\"line\"><span class=\"comment\">//   [ &#123; id: 2, grade: 9, sex: 0 &#125; ],</span></span><br><span class=\"line\"><span class=\"comment\">//   [ &#123; id: 4, grade: 12, sex: 0 &#125; ]</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"angular 利用 module federation 实现微前端，并实现通信","date":"2023-02-17T05:48:25.000Z","_content":"\n## 创建项目，并实现模块共享\n\n- 创建一个没有项目的空壳子\n\n  ```typescript\n    ng new shell --create-application=false\n  ```\n\n- 添加主应用和子应用 1\n\n  ```typescript\n    ng g application main\n    ng g application mfe1\n  ```\n\n- 安装 `@angular-architects/module-federation`\n\n  ```typescript\n    npm i @angular-architects/module-federation -D\n  ```\n\n- 初始化主项目和子项目\n\n  ```typescript\n    ng g @angular-architects/module-federation:init --project main --port 4200 --type host\n    ng g @angular-architects/module-federation:init --project mfe1 --port 4201 --type remote\n  ```\n\n- 在 mfe1 中创建一个 module，并创建一个组件\n\n  ```typescript\n  ng g m charts --project mfe1\n  ng g c charts/map --project mfe1\n  ```\n\n- 在 charts.module.ts 中使用 map 组件\n\n  ```typescript\n  // mfe1 => charts.module.ts\n  RouterModule.forChild([\n    {\n      path: \"\",\n      component: MapComponent,\n    },\n  ]);\n  ```\n\n- 修改 mfe1 的 webpack.config.js 文件，把 charts 这个 module 暴露出去\n\n  ```typescript\n  // mfe1 => webpack.config.js\n  module.exports = withModuleFederationPlugin({\n    name: \"mfe1\",\n\n    exposes: {\n      \"./Module\": \"./projects/mfe1/src/app/charts/charts.module.ts\",\n    },\n\n    shared: {\n      ...shareAll({\n        singleton: true,\n        strictVersion: true,\n        requiredVersion: \"auto\",\n      }),\n    },\n  });\n  ```\n\n- 在 main 中使用(消费)mfe1 暴露出来的 module\n\n  ```typescript\n  // main => webpack.config.js\n  module.exports = withModuleFederationPlugin({\n    remotes: {\n      mfe1: \"http://localhost:4201/remoteEntry.js\",\n    },\n\n    shared: {\n      ...shareAll({\n        singleton: true,\n        strictVersion: true,\n        requiredVersion: \"auto\",\n      }),\n    },\n  });\n  ```\n\n- 在代码中按照懒加载的形式使用这个 module，并且由于 mfe1/Module 没有定义，所欲需要在 app 文件夹下面创建一个 mfe.d.ts 的文件\n\n  ```typescript\n  // main => mfe.d.ts\n  declare module \"mfe1/Module\";\n\n  // main => app.module.ts\n  RouterModule.forRoot([\n    {\n      path: \"mfe1\",\n      loadChildren: () => import(\"mfe1/Module\").then((m) => m.ChartsModule),\n    },\n  ]);\n  ```\n\n- 再另起一个项目 outProject(**重新另起一个大的项目，而不是在这个 shell 项目下面生成一个 mfe2 的 application**)，按照之前的步骤创建一个另外的子项目 mfe2，comments module，text component\n\n  ```typescript\n  // mfe2 => comments.module.ts\n  RouterModule.forChild([\n    {\n      path: \"\",\n      component: TextComponent,\n    },\n  ]);\n\n  // mfe2 => webpack.config.js\n  module.exports = withModuleFederationPlugin({\n    name: \"mfe2\",\n\n    exposes: {\n      \"./Module\": \"./projects/mfe2/src/app/comments/comments.module.ts\",\n    },\n\n    shared: {\n      ...shareAll({\n        singleton: true,\n        strictVersion: true,\n        requiredVersion: \"auto\",\n      }),\n    },\n  });\n\n  // main => webpack.config.js\n  module.exports = withModuleFederationPlugin({\n    remotes: {\n      mfe1: \"http://localhost:4201/remoteEntry.js\",\n      mfe2: \"http://localhost:4202/remoteEntry.js\",\n    },\n\n    shared: {\n      ...shareAll({\n        singleton: true,\n        strictVersion: true,\n        requiredVersion: \"auto\",\n      }),\n      \"projects/shared-lib/src/public-api\": { singleton: true },\n    },\n  });\n\n  // main => mfe.d.ts\n  declare module \"mfe1/Module\";\n  declare module \"mfe2/Module\";\n\n  // main => app.module.ts\n  RouterModule.forRoot([\n    {\n      path: \"mfe1\",\n      loadChildren: () => import(\"mfe1/Module\").then((m) => m.ChartsModule),\n    },\n    {\n      path: \"mfe2\",\n      loadChildren: () => import(\"mfe2/Module\").then((m) => m.CommentsModule),\n    },\n  ]);\n  ```\n\n## 实现不同项目中的通信\n\n- 分别在两个项目中创建一个 library\n\n  ```typescript\n  ng g library shared-lib\n\n  // shell => shared-lib => shared-lib.service.ts\n  // outProject => shared-lib => shared-lib.service.ts\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SharedLibService {\n    name = 'main SharedLibService'\n    count = 0\n    count$ = new Subject<number>()\n    constructor() { }\n\n    setCount(count: number) {\n      this.count = count\n      this.count$.next(count)\n    }\n  }\n  ```\n\n- 分别在两个项目中使用\n\n  ```typescript\n  // main => app.component.html\n  <button type=\"button\" [routerLink]=\"'/mfe2'\">mfe2</button>\n  <button type=\"button\" [routerLink]=\"'/'\">home</button>\n\n  <p>main works name = {{name}}, count = {{count}}</p>\n  <button (click)=\"onclick()\">add</button>\n  <router-outlet></router-outlet>\n  <br />\n\n  // main => app.component.ts\n  title = 'main';\n  name = ''\n  count = 0\n  constructor(\n    private sharedLibService: SharedLibService\n  ) {\n    this.name = this.sharedLibService.name\n    this.sharedLibService.count$.subscribe(count => {\n      this.count = count\n    })\n  }\n  onclick() {\n    this.sharedLibService.setCount(this.count + 1)\n  }\n\n  // mfe2 => text.component.html\n  <p>text works! name = {{name}}; count = {{count}}</p>\n\n  // mfe2 => text.component.ts\n  name = ''\n  count = 0\n  constructor(\n    private sharedLibService: SharedLibService\n  ) {\n    this.name = this.sharedLibService.name\n    this.sharedLibService.count$.subscribe(count => {\n      this.count = count\n    })\n  }\n  ```\n\n  现在启动项目，点击 add 按钮，只会更改 main 中的 count 值\n\n- 最后一步，在两个项目的 webpack.config.js 中更改 shared\n\n  ```typescript\n  // main => webpack.config.js\n  // mfe2 => webpack.config.js\n  shared: {\n    ...shareAll({\n      singleton: true,\n      strictVersion: true,\n      requiredVersion: \"auto\",\n    }),\n    \"projects/shared-lib/src/public-api\": { singleton: true },\n  },\n  ```\n\n  现在再点击 add，两个 count 值都会同步发生改变，这样就可以实现在不同的两个代码仓库中实现通信，**还有最重要的一点是，一定要在代码中都使用 shared-lib service，这样才不会再 build 中因为 tree shaking 导致这个 service 没有加载出来**\n","source":"_posts/module-federation.md","raw":"---\ntitle: angular 利用 module federation 实现微前端，并实现通信\ndate: 2023-02-17 13:48:25\ntags: ['微前端', 'module federation', 'angular']\n---\n\n## 创建项目，并实现模块共享\n\n- 创建一个没有项目的空壳子\n\n  ```typescript\n    ng new shell --create-application=false\n  ```\n\n- 添加主应用和子应用 1\n\n  ```typescript\n    ng g application main\n    ng g application mfe1\n  ```\n\n- 安装 `@angular-architects/module-federation`\n\n  ```typescript\n    npm i @angular-architects/module-federation -D\n  ```\n\n- 初始化主项目和子项目\n\n  ```typescript\n    ng g @angular-architects/module-federation:init --project main --port 4200 --type host\n    ng g @angular-architects/module-federation:init --project mfe1 --port 4201 --type remote\n  ```\n\n- 在 mfe1 中创建一个 module，并创建一个组件\n\n  ```typescript\n  ng g m charts --project mfe1\n  ng g c charts/map --project mfe1\n  ```\n\n- 在 charts.module.ts 中使用 map 组件\n\n  ```typescript\n  // mfe1 => charts.module.ts\n  RouterModule.forChild([\n    {\n      path: \"\",\n      component: MapComponent,\n    },\n  ]);\n  ```\n\n- 修改 mfe1 的 webpack.config.js 文件，把 charts 这个 module 暴露出去\n\n  ```typescript\n  // mfe1 => webpack.config.js\n  module.exports = withModuleFederationPlugin({\n    name: \"mfe1\",\n\n    exposes: {\n      \"./Module\": \"./projects/mfe1/src/app/charts/charts.module.ts\",\n    },\n\n    shared: {\n      ...shareAll({\n        singleton: true,\n        strictVersion: true,\n        requiredVersion: \"auto\",\n      }),\n    },\n  });\n  ```\n\n- 在 main 中使用(消费)mfe1 暴露出来的 module\n\n  ```typescript\n  // main => webpack.config.js\n  module.exports = withModuleFederationPlugin({\n    remotes: {\n      mfe1: \"http://localhost:4201/remoteEntry.js\",\n    },\n\n    shared: {\n      ...shareAll({\n        singleton: true,\n        strictVersion: true,\n        requiredVersion: \"auto\",\n      }),\n    },\n  });\n  ```\n\n- 在代码中按照懒加载的形式使用这个 module，并且由于 mfe1/Module 没有定义，所欲需要在 app 文件夹下面创建一个 mfe.d.ts 的文件\n\n  ```typescript\n  // main => mfe.d.ts\n  declare module \"mfe1/Module\";\n\n  // main => app.module.ts\n  RouterModule.forRoot([\n    {\n      path: \"mfe1\",\n      loadChildren: () => import(\"mfe1/Module\").then((m) => m.ChartsModule),\n    },\n  ]);\n  ```\n\n- 再另起一个项目 outProject(**重新另起一个大的项目，而不是在这个 shell 项目下面生成一个 mfe2 的 application**)，按照之前的步骤创建一个另外的子项目 mfe2，comments module，text component\n\n  ```typescript\n  // mfe2 => comments.module.ts\n  RouterModule.forChild([\n    {\n      path: \"\",\n      component: TextComponent,\n    },\n  ]);\n\n  // mfe2 => webpack.config.js\n  module.exports = withModuleFederationPlugin({\n    name: \"mfe2\",\n\n    exposes: {\n      \"./Module\": \"./projects/mfe2/src/app/comments/comments.module.ts\",\n    },\n\n    shared: {\n      ...shareAll({\n        singleton: true,\n        strictVersion: true,\n        requiredVersion: \"auto\",\n      }),\n    },\n  });\n\n  // main => webpack.config.js\n  module.exports = withModuleFederationPlugin({\n    remotes: {\n      mfe1: \"http://localhost:4201/remoteEntry.js\",\n      mfe2: \"http://localhost:4202/remoteEntry.js\",\n    },\n\n    shared: {\n      ...shareAll({\n        singleton: true,\n        strictVersion: true,\n        requiredVersion: \"auto\",\n      }),\n      \"projects/shared-lib/src/public-api\": { singleton: true },\n    },\n  });\n\n  // main => mfe.d.ts\n  declare module \"mfe1/Module\";\n  declare module \"mfe2/Module\";\n\n  // main => app.module.ts\n  RouterModule.forRoot([\n    {\n      path: \"mfe1\",\n      loadChildren: () => import(\"mfe1/Module\").then((m) => m.ChartsModule),\n    },\n    {\n      path: \"mfe2\",\n      loadChildren: () => import(\"mfe2/Module\").then((m) => m.CommentsModule),\n    },\n  ]);\n  ```\n\n## 实现不同项目中的通信\n\n- 分别在两个项目中创建一个 library\n\n  ```typescript\n  ng g library shared-lib\n\n  // shell => shared-lib => shared-lib.service.ts\n  // outProject => shared-lib => shared-lib.service.ts\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SharedLibService {\n    name = 'main SharedLibService'\n    count = 0\n    count$ = new Subject<number>()\n    constructor() { }\n\n    setCount(count: number) {\n      this.count = count\n      this.count$.next(count)\n    }\n  }\n  ```\n\n- 分别在两个项目中使用\n\n  ```typescript\n  // main => app.component.html\n  <button type=\"button\" [routerLink]=\"'/mfe2'\">mfe2</button>\n  <button type=\"button\" [routerLink]=\"'/'\">home</button>\n\n  <p>main works name = {{name}}, count = {{count}}</p>\n  <button (click)=\"onclick()\">add</button>\n  <router-outlet></router-outlet>\n  <br />\n\n  // main => app.component.ts\n  title = 'main';\n  name = ''\n  count = 0\n  constructor(\n    private sharedLibService: SharedLibService\n  ) {\n    this.name = this.sharedLibService.name\n    this.sharedLibService.count$.subscribe(count => {\n      this.count = count\n    })\n  }\n  onclick() {\n    this.sharedLibService.setCount(this.count + 1)\n  }\n\n  // mfe2 => text.component.html\n  <p>text works! name = {{name}}; count = {{count}}</p>\n\n  // mfe2 => text.component.ts\n  name = ''\n  count = 0\n  constructor(\n    private sharedLibService: SharedLibService\n  ) {\n    this.name = this.sharedLibService.name\n    this.sharedLibService.count$.subscribe(count => {\n      this.count = count\n    })\n  }\n  ```\n\n  现在启动项目，点击 add 按钮，只会更改 main 中的 count 值\n\n- 最后一步，在两个项目的 webpack.config.js 中更改 shared\n\n  ```typescript\n  // main => webpack.config.js\n  // mfe2 => webpack.config.js\n  shared: {\n    ...shareAll({\n      singleton: true,\n      strictVersion: true,\n      requiredVersion: \"auto\",\n    }),\n    \"projects/shared-lib/src/public-api\": { singleton: true },\n  },\n  ```\n\n  现在再点击 add，两个 count 值都会同步发生改变，这样就可以实现在不同的两个代码仓库中实现通信，**还有最重要的一点是，一定要在代码中都使用 shared-lib service，这样才不会再 build 中因为 tree shaking 导致这个 service 没有加载出来**\n","slug":"module-federation","published":1,"updated":"2023-03-10T02:55:21.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf26jirv0001601u1djdgago","content":"<h2 id=\"创建项目，并实现模块共享\"><a href=\"#创建项目，并实现模块共享\" class=\"headerlink\" title=\"创建项目，并实现模块共享\"></a>创建项目，并实现模块共享</h2><ul>\n<li><p>创建一个没有项目的空壳子</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng <span class=\"keyword\">new</span> shell --create-application=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></li>\n<li><p>添加主应用和子应用 1</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g application main</span><br><span class=\"line\">ng g application mfe1</span><br></pre></td></tr></table></figure></li>\n<li><p>安装 <code>@angular-architects/module-federation</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i <span class=\"meta\">@angular</span>-architects/<span class=\"variable language_\">module</span>-federation -D</span><br></pre></td></tr></table></figure></li>\n<li><p>初始化主项目和子项目</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g <span class=\"meta\">@angular</span>-architects/<span class=\"variable language_\">module</span>-<span class=\"attr\">federation</span>:init --project main --port <span class=\"number\">4200</span> --<span class=\"keyword\">type</span> host</span><br><span class=\"line\">ng g <span class=\"meta\">@angular</span>-architects/<span class=\"variable language_\">module</span>-<span class=\"attr\">federation</span>:init --project mfe1 --port <span class=\"number\">4201</span> --<span class=\"keyword\">type</span> remote</span><br></pre></td></tr></table></figure></li>\n<li><p>在 mfe1 中创建一个 module，并创建一个组件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m charts --project mfe1</span><br><span class=\"line\">ng g c charts/map --project mfe1</span><br></pre></td></tr></table></figure></li>\n<li><p>在 charts.module.ts 中使用 map 组件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mfe1 =&gt; charts.module.ts</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forChild</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">MapComponent</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 mfe1 的 webpack.config.js 文件，把 charts 这个 module 暴露出去</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mfe1 =&gt; webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">withModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;mfe1&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;./Module&quot;</span>: <span class=\"string\">&quot;./projects/mfe1/src/app/charts/charts.module.ts&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">    ...<span class=\"title function_\">shareAll</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">strictVersion</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;auto&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>在 main 中使用(消费)mfe1 暴露出来的 module</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main =&gt; webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">withModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">mfe1</span>: <span class=\"string\">&quot;http://localhost:4201/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">    ...<span class=\"title function_\">shareAll</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">strictVersion</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;auto&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>在代码中按照懒加载的形式使用这个 module，并且由于 mfe1/Module 没有定义，所欲需要在 app 文件夹下面创建一个 mfe.d.ts 的文件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main =&gt; mfe.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;mfe1/Module&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main =&gt; app.module.ts</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;mfe1/Module&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">ChartsModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></li>\n<li><p>再另起一个项目 outProject(<strong>重新另起一个大的项目，而不是在这个 shell 项目下面生成一个 mfe2 的 application</strong>)，按照之前的步骤创建一个另外的子项目 mfe2，comments module，text component</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mfe2 =&gt; comments.module.ts</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forChild</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">TextComponent</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mfe2 =&gt; webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">withModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;mfe2&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;./Module&quot;</span>: <span class=\"string\">&quot;./projects/mfe2/src/app/comments/comments.module.ts&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">    ...<span class=\"title function_\">shareAll</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">strictVersion</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;auto&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main =&gt; webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">withModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">mfe1</span>: <span class=\"string\">&quot;http://localhost:4201/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">mfe2</span>: <span class=\"string\">&quot;http://localhost:4202/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">    ...<span class=\"title function_\">shareAll</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">strictVersion</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;auto&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"string\">&quot;projects/shared-lib/src/public-api&quot;</span>: &#123; <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main =&gt; mfe.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;mfe1/Module&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;mfe2/Module&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main =&gt; app.module.ts</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;mfe1/Module&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">ChartsModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe2&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;mfe2/Module&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">CommentsModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"实现不同项目中的通信\"><a href=\"#实现不同项目中的通信\" class=\"headerlink\" title=\"实现不同项目中的通信\"></a>实现不同项目中的通信</h2><ul>\n<li><p>分别在两个项目中创建一个 library</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g library shared-lib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// shell =&gt; shared-lib =&gt; shared-lib.service.ts</span></span><br><span class=\"line\"><span class=\"comment\">// outProject =&gt; shared-lib =&gt; shared-lib.service.ts</span></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedLibService</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&#x27;main SharedLibService&#x27;</span></span><br><span class=\"line\">  count = <span class=\"number\">0</span></span><br><span class=\"line\">  count$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"built_in\">number</span>&gt;()</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setCount</span>(<span class=\"params\">count: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">count</span> = count</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">count$</span>.<span class=\"title function_\">next</span>(count)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>分别在两个项目中使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main =&gt; app.component.html</span></span><br><span class=\"line\">&lt;button <span class=\"keyword\">type</span>=<span class=\"string\">&quot;button&quot;</span> [routerLink]=<span class=\"string\">&quot;&#x27;/mfe2&#x27;&quot;</span>&gt;mfe2&lt;/button&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;&#x27;/&#x27;&quot;</span>&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>main works name = &#123;&#123;name&#125;&#125;, count = &#123;&#123;count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onclick()&quot;</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main =&gt; app.component.ts</span></span><br><span class=\"line\">title = <span class=\"string\">&#x27;main&#x27;</span>;</span><br><span class=\"line\">name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"keyword\">private</span> sharedLibService: SharedLibService</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">sharedLibService</span>.<span class=\"property\">name</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sharedLibService</span>.<span class=\"property\">count$</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">count</span> = count</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">onclick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sharedLibService</span>.<span class=\"title function_\">setCount</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mfe2 =&gt; text.component.html</span></span><br><span class=\"line\">&lt;p&gt;text works! name = &#123;&#123;name&#125;&#125;; count = &#123;&#123;count&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mfe2 =&gt; text.component.ts</span></span><br><span class=\"line\">name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"keyword\">private</span> sharedLibService: SharedLibService</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">sharedLibService</span>.<span class=\"property\">name</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sharedLibService</span>.<span class=\"property\">count$</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">count</span> = count</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在启动项目，点击 add 按钮，只会更改 main 中的 count 值</p>\n</li>\n<li><p>最后一步，在两个项目的 webpack.config.js 中更改 shared</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main =&gt; webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// mfe2 =&gt; webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">  ...<span class=\"title function_\">shareAll</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">strictVersion</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;auto&quot;</span>,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"string\">&quot;projects/shared-lib/src/public-api&quot;</span>: &#123; <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>现在再点击 add，两个 count 值都会同步发生改变，这样就可以实现在不同的两个代码仓库中实现通信，<strong>还有最重要的一点是，一定要在代码中都使用 shared-lib service，这样才不会再 build 中因为 tree shaking 导致这个 service 没有加载出来</strong></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建项目，并实现模块共享\"><a href=\"#创建项目，并实现模块共享\" class=\"headerlink\" title=\"创建项目，并实现模块共享\"></a>创建项目，并实现模块共享</h2><ul>\n<li><p>创建一个没有项目的空壳子</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng <span class=\"keyword\">new</span> shell --create-application=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></li>\n<li><p>添加主应用和子应用 1</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g application main</span><br><span class=\"line\">ng g application mfe1</span><br></pre></td></tr></table></figure></li>\n<li><p>安装 <code>@angular-architects/module-federation</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i <span class=\"meta\">@angular</span>-architects/<span class=\"variable language_\">module</span>-federation -D</span><br></pre></td></tr></table></figure></li>\n<li><p>初始化主项目和子项目</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g <span class=\"meta\">@angular</span>-architects/<span class=\"variable language_\">module</span>-<span class=\"attr\">federation</span>:init --project main --port <span class=\"number\">4200</span> --<span class=\"keyword\">type</span> host</span><br><span class=\"line\">ng g <span class=\"meta\">@angular</span>-architects/<span class=\"variable language_\">module</span>-<span class=\"attr\">federation</span>:init --project mfe1 --port <span class=\"number\">4201</span> --<span class=\"keyword\">type</span> remote</span><br></pre></td></tr></table></figure></li>\n<li><p>在 mfe1 中创建一个 module，并创建一个组件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m charts --project mfe1</span><br><span class=\"line\">ng g c charts/map --project mfe1</span><br></pre></td></tr></table></figure></li>\n<li><p>在 charts.module.ts 中使用 map 组件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mfe1 =&gt; charts.module.ts</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forChild</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">MapComponent</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 mfe1 的 webpack.config.js 文件，把 charts 这个 module 暴露出去</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mfe1 =&gt; webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">withModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;mfe1&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;./Module&quot;</span>: <span class=\"string\">&quot;./projects/mfe1/src/app/charts/charts.module.ts&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">    ...<span class=\"title function_\">shareAll</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">strictVersion</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;auto&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>在 main 中使用(消费)mfe1 暴露出来的 module</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main =&gt; webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">withModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">mfe1</span>: <span class=\"string\">&quot;http://localhost:4201/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">    ...<span class=\"title function_\">shareAll</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">strictVersion</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;auto&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>在代码中按照懒加载的形式使用这个 module，并且由于 mfe1/Module 没有定义，所欲需要在 app 文件夹下面创建一个 mfe.d.ts 的文件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main =&gt; mfe.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;mfe1/Module&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main =&gt; app.module.ts</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;mfe1/Module&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">ChartsModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></li>\n<li><p>再另起一个项目 outProject(<strong>重新另起一个大的项目，而不是在这个 shell 项目下面生成一个 mfe2 的 application</strong>)，按照之前的步骤创建一个另外的子项目 mfe2，comments module，text component</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mfe2 =&gt; comments.module.ts</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forChild</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">TextComponent</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mfe2 =&gt; webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">withModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;mfe2&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;./Module&quot;</span>: <span class=\"string\">&quot;./projects/mfe2/src/app/comments/comments.module.ts&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">    ...<span class=\"title function_\">shareAll</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">strictVersion</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;auto&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main =&gt; webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">withModuleFederationPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">mfe1</span>: <span class=\"string\">&quot;http://localhost:4201/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">mfe2</span>: <span class=\"string\">&quot;http://localhost:4202/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">    ...<span class=\"title function_\">shareAll</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">strictVersion</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;auto&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"string\">&quot;projects/shared-lib/src/public-api&quot;</span>: &#123; <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main =&gt; mfe.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;mfe1/Module&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;mfe2/Module&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main =&gt; app.module.ts</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;mfe1/Module&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">ChartsModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe2&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;mfe2/Module&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">CommentsModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"实现不同项目中的通信\"><a href=\"#实现不同项目中的通信\" class=\"headerlink\" title=\"实现不同项目中的通信\"></a>实现不同项目中的通信</h2><ul>\n<li><p>分别在两个项目中创建一个 library</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g library shared-lib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// shell =&gt; shared-lib =&gt; shared-lib.service.ts</span></span><br><span class=\"line\"><span class=\"comment\">// outProject =&gt; shared-lib =&gt; shared-lib.service.ts</span></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedLibService</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&#x27;main SharedLibService&#x27;</span></span><br><span class=\"line\">  count = <span class=\"number\">0</span></span><br><span class=\"line\">  count$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"built_in\">number</span>&gt;()</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setCount</span>(<span class=\"params\">count: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">count</span> = count</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">count$</span>.<span class=\"title function_\">next</span>(count)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>分别在两个项目中使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main =&gt; app.component.html</span></span><br><span class=\"line\">&lt;button <span class=\"keyword\">type</span>=<span class=\"string\">&quot;button&quot;</span> [routerLink]=<span class=\"string\">&quot;&#x27;/mfe2&#x27;&quot;</span>&gt;mfe2&lt;/button&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;&#x27;/&#x27;&quot;</span>&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>main works name = &#123;&#123;name&#125;&#125;, count = &#123;&#123;count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onclick()&quot;</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main =&gt; app.component.ts</span></span><br><span class=\"line\">title = <span class=\"string\">&#x27;main&#x27;</span>;</span><br><span class=\"line\">name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"keyword\">private</span> sharedLibService: SharedLibService</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">sharedLibService</span>.<span class=\"property\">name</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sharedLibService</span>.<span class=\"property\">count$</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">count</span> = count</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">onclick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sharedLibService</span>.<span class=\"title function_\">setCount</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mfe2 =&gt; text.component.html</span></span><br><span class=\"line\">&lt;p&gt;text works! name = &#123;&#123;name&#125;&#125;; count = &#123;&#123;count&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mfe2 =&gt; text.component.ts</span></span><br><span class=\"line\">name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"keyword\">private</span> sharedLibService: SharedLibService</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">sharedLibService</span>.<span class=\"property\">name</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sharedLibService</span>.<span class=\"property\">count$</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">count</span> = count</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在启动项目，点击 add 按钮，只会更改 main 中的 count 值</p>\n</li>\n<li><p>最后一步，在两个项目的 webpack.config.js 中更改 shared</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main =&gt; webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// mfe2 =&gt; webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">  ...<span class=\"title function_\">shareAll</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">strictVersion</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;auto&quot;</span>,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"string\">&quot;projects/shared-lib/src/public-api&quot;</span>: &#123; <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>现在再点击 add，两个 count 值都会同步发生改变，这样就可以实现在不同的两个代码仓库中实现通信，<strong>还有最重要的一点是，一定要在代码中都使用 shared-lib service，这样才不会再 build 中因为 tree shaking 导致这个 service 没有加载出来</strong></p>\n</li>\n</ul>\n"},{"title":"react 简化版类似angular service的状态管理","date":"2023-02-06T04:59:48.000Z","_content":"\n## 原理\n\n> react 的 context.Provider 组件会在子组件创建一个一个上下文，函数子组件总可以通过 useContext 方法来获取 context 传递的数据\n\n## 实现\n\n- 首先，我们需要先创建一个 context\n\n  ```typescript\n  const SERVICE_CONTEXT = createContext(null);\n  ```\n\n- 然后在我们需要的组件外层包上 context.Provider 组件，我们可以通过一个方法来实现\n\n  ```typescript\n  function createServiceProvider<C>(Comp: React.FC<C>) {\n    return React.memo((props: any) => {\n      return (\n        <SERVICE_CONTEXT.Provider>\n          <Comp {...props}></Comp>\n        </SERVICE_CONTEXT.Provider>\n      );\n    });\n  }\n  ```\n\n- service 的创建就像 angular 一样，直接创建一个 service 的 class，这中间的 Subject 使用的是 rxjs，直接 `npm i rxjs` 就行\n\n  ```typescript\n  class UserService {\n    name = \"admin\";\n    age: number = 18;\n    age$ = new Subject<number>();\n\n    setAge(age: number) {\n      this.age = age;\n      this.age$.next(this.age);\n    }\n  }\n  ```\n\n- 之后，我们需要把我们 service 通过 createServiceProvider 函数注册到他的上下文中\n\n  > 首先我们考虑的全局唯一的情况，就可以在 App 组件上面用，此时没有外层 service，所以代码运行到这里只需要直接进行实例化，然后在全局的上下文中都可以使用到注册的 service\n\n  ```typescript\n  function createServiceProvider<C>(Comp: React.FC<C>, services: any) {\n    return React.memo((props: any) => {\n      // const outerContext = useContext(SERVICE_CONTEXT);\n      let providers: any = {};\n      // if (outerContext) providers = Object.create(outerContext);\n\n      for (let service of services) {\n        providers[service.name] = new service();\n      }\n\n      return (\n        <SERVICE_CONTEXT.Provider value={providers}>\n          <Comp {...props}></Comp>\n        </SERVICE_CONTEXT.Provider>\n      );\n    });\n  }\n  ```\n\n- 那么在组件中怎么用呢？\n\n  - 可以直接用 hook 钩子来获取\n\n    ```typescript\n    // 获取全部的service，然后需要哪个获取哪个\n    const providers: any = useContext(SERVICE_CONTEXT);\n    const provider = providers[<service.name>];\n    ```\n\n  - 自定义 hook 函数\n    ```typescript\n    function useServiceHook<T>(service: new () => T): T {\n      const providers: any = useContext(SERVICE_CONTEXT);\n      const provider = providers[(service as any).name];\n      if (provider) {\n        return provider;\n      } else {\n        throw new Error(\n          `未找到${\n            (service as any).name\n          }的依赖值，请在上层servcieComponent中提供对应的service`\n        );\n      }\n    }\n    ```\n\n- 接下来我们在组件中使用\n\n  ```typescript\n  export default createServiceProvider(User, [UserService]);\n\n  function User() {\n    const userService = useServiceHook(UserService);\n    const [name, setname] = useState(userService.name);\n    const [age, setage] = useState(userService.age);\n    useEffect(() => {\n      const subscriptions: Subscription[] = [];\n      subscriptions.push(\n        userService.age$.subscribe((age) => {\n          setage(age);\n        })\n      );\n      return () => {\n        subscriptions.forEach((i) => i.unsubscribe());\n      };\n    }, []);\n\n    const addAge = () => {\n      userService.setAge(age + 1);\n    };\n    return (\n      <div>\n        <span>\n          I am user: {name}, my age is {age}\n        </span>{\" \"}\n        <button onClick={addAge}>add age</button>\n      </div>\n    );\n  }\n  ```\n\n- 在子组件中使用，创建一个另一个组件和另一个 service，然后把之前 createServiceProvider 函数中注释的内容放开，分别试试 User 组件中注册和不注册 UserService (createServiceProvider(User, [UserService]) 和 createServiceProvider(User))\n\n  > User 不注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 会同步变化\n  > User 注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 不会同步变化\n  > 这是因为父组件 Home 也注册了 UserService，User 子组件如果不注册自己的 service，就会共享父组件的 service 数据，但是如果 User 子组件注册了自己的 service，对于同一个 service 就具有不同的上下文\n\n  ```typescript\n  class ManageService {\n    manageId: number = 1;\n    manageId$ = new Subject<number>();\n\n    setManageId(id: number) {\n      this.manageId = id;\n      this.manageId$.next(this.manageId);\n    }\n  }\n\n  export default createServiceProvider(Home, [ManageService, UserService]);\n\n  function Home() {\n    const manageService = useServiceHook(ManageService);\n    const [manageId, setmanageId] = useState(manageService.manageId);\n\n    useEffect(() => {\n      const subscription = manageService.manageId$.subscribe((manageId) => {\n        setmanageId(manageId);\n      });\n      return () => {\n        subscription.unsubscribe();\n      };\n    }, []);\n\n    const addManageId = () => {\n      manageService.setManageId(manageId + 1);\n    };\n    return (\n      <div>\n        <div>\n          <span>I am manage, manageId: {manageId}</span>{\" \"}\n          <button onClick={addManageId}>add manageId</button>\n        </div>\n        <User></User>\n        <User></User>\n      </div>\n    );\n  }\n  ```\n\n# 链接\n\nGithub 地址：https://github.com/darkeering/hooks-context-state-dar\n","source":"_posts/hooks-context-state.md","raw":"---\ntitle: react 简化版类似angular service的状态管理\ndate: 2023-02-06 12:59:48\ntags: ['状态管理', 'react']\n---\n\n## 原理\n\n> react 的 context.Provider 组件会在子组件创建一个一个上下文，函数子组件总可以通过 useContext 方法来获取 context 传递的数据\n\n## 实现\n\n- 首先，我们需要先创建一个 context\n\n  ```typescript\n  const SERVICE_CONTEXT = createContext(null);\n  ```\n\n- 然后在我们需要的组件外层包上 context.Provider 组件，我们可以通过一个方法来实现\n\n  ```typescript\n  function createServiceProvider<C>(Comp: React.FC<C>) {\n    return React.memo((props: any) => {\n      return (\n        <SERVICE_CONTEXT.Provider>\n          <Comp {...props}></Comp>\n        </SERVICE_CONTEXT.Provider>\n      );\n    });\n  }\n  ```\n\n- service 的创建就像 angular 一样，直接创建一个 service 的 class，这中间的 Subject 使用的是 rxjs，直接 `npm i rxjs` 就行\n\n  ```typescript\n  class UserService {\n    name = \"admin\";\n    age: number = 18;\n    age$ = new Subject<number>();\n\n    setAge(age: number) {\n      this.age = age;\n      this.age$.next(this.age);\n    }\n  }\n  ```\n\n- 之后，我们需要把我们 service 通过 createServiceProvider 函数注册到他的上下文中\n\n  > 首先我们考虑的全局唯一的情况，就可以在 App 组件上面用，此时没有外层 service，所以代码运行到这里只需要直接进行实例化，然后在全局的上下文中都可以使用到注册的 service\n\n  ```typescript\n  function createServiceProvider<C>(Comp: React.FC<C>, services: any) {\n    return React.memo((props: any) => {\n      // const outerContext = useContext(SERVICE_CONTEXT);\n      let providers: any = {};\n      // if (outerContext) providers = Object.create(outerContext);\n\n      for (let service of services) {\n        providers[service.name] = new service();\n      }\n\n      return (\n        <SERVICE_CONTEXT.Provider value={providers}>\n          <Comp {...props}></Comp>\n        </SERVICE_CONTEXT.Provider>\n      );\n    });\n  }\n  ```\n\n- 那么在组件中怎么用呢？\n\n  - 可以直接用 hook 钩子来获取\n\n    ```typescript\n    // 获取全部的service，然后需要哪个获取哪个\n    const providers: any = useContext(SERVICE_CONTEXT);\n    const provider = providers[<service.name>];\n    ```\n\n  - 自定义 hook 函数\n    ```typescript\n    function useServiceHook<T>(service: new () => T): T {\n      const providers: any = useContext(SERVICE_CONTEXT);\n      const provider = providers[(service as any).name];\n      if (provider) {\n        return provider;\n      } else {\n        throw new Error(\n          `未找到${\n            (service as any).name\n          }的依赖值，请在上层servcieComponent中提供对应的service`\n        );\n      }\n    }\n    ```\n\n- 接下来我们在组件中使用\n\n  ```typescript\n  export default createServiceProvider(User, [UserService]);\n\n  function User() {\n    const userService = useServiceHook(UserService);\n    const [name, setname] = useState(userService.name);\n    const [age, setage] = useState(userService.age);\n    useEffect(() => {\n      const subscriptions: Subscription[] = [];\n      subscriptions.push(\n        userService.age$.subscribe((age) => {\n          setage(age);\n        })\n      );\n      return () => {\n        subscriptions.forEach((i) => i.unsubscribe());\n      };\n    }, []);\n\n    const addAge = () => {\n      userService.setAge(age + 1);\n    };\n    return (\n      <div>\n        <span>\n          I am user: {name}, my age is {age}\n        </span>{\" \"}\n        <button onClick={addAge}>add age</button>\n      </div>\n    );\n  }\n  ```\n\n- 在子组件中使用，创建一个另一个组件和另一个 service，然后把之前 createServiceProvider 函数中注释的内容放开，分别试试 User 组件中注册和不注册 UserService (createServiceProvider(User, [UserService]) 和 createServiceProvider(User))\n\n  > User 不注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 会同步变化\n  > User 注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 不会同步变化\n  > 这是因为父组件 Home 也注册了 UserService，User 子组件如果不注册自己的 service，就会共享父组件的 service 数据，但是如果 User 子组件注册了自己的 service，对于同一个 service 就具有不同的上下文\n\n  ```typescript\n  class ManageService {\n    manageId: number = 1;\n    manageId$ = new Subject<number>();\n\n    setManageId(id: number) {\n      this.manageId = id;\n      this.manageId$.next(this.manageId);\n    }\n  }\n\n  export default createServiceProvider(Home, [ManageService, UserService]);\n\n  function Home() {\n    const manageService = useServiceHook(ManageService);\n    const [manageId, setmanageId] = useState(manageService.manageId);\n\n    useEffect(() => {\n      const subscription = manageService.manageId$.subscribe((manageId) => {\n        setmanageId(manageId);\n      });\n      return () => {\n        subscription.unsubscribe();\n      };\n    }, []);\n\n    const addManageId = () => {\n      manageService.setManageId(manageId + 1);\n    };\n    return (\n      <div>\n        <div>\n          <span>I am manage, manageId: {manageId}</span>{\" \"}\n          <button onClick={addManageId}>add manageId</button>\n        </div>\n        <User></User>\n        <User></User>\n      </div>\n    );\n  }\n  ```\n\n# 链接\n\nGithub 地址：https://github.com/darkeering/hooks-context-state-dar\n","slug":"hooks-context-state","published":1,"updated":"2023-03-10T02:58:39.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf26jirz0003601ufnzf0nti","content":"<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><blockquote>\n<p>react 的 context.Provider 组件会在子组件创建一个一个上下文，函数子组件总可以通过 useContext 方法来获取 context 传递的数据</p>\n</blockquote>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><ul>\n<li><p>首先，我们需要先创建一个 context</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SERVICE_CONTEXT</span> = <span class=\"title function_\">createContext</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>然后在我们需要的组件外层包上 context.Provider 组件，我们可以通过一个方法来实现</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createServiceProvider&lt;C&gt;(<span class=\"title class_\">Comp</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;C&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SERVICE_CONTEXT.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Comp</span> &#123;<span class=\"attr\">...props</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Comp</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">SERVICE_CONTEXT.Provider</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>service 的创建就像 angular 一样，直接创建一个 service 的 class，这中间的 Subject 使用的是 rxjs，直接 <code>npm i rxjs</code> 就行</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&quot;admin&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span> = <span class=\"number\">18</span>;</span><br><span class=\"line\">  age$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setAge</span>(<span class=\"params\">age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>之后，我们需要把我们 service 通过 createServiceProvider 函数注册到他的上下文中</p>\n<blockquote>\n<p>首先我们考虑的全局唯一的情况，就可以在 App 组件上面用，此时没有外层 service，所以代码运行到这里只需要直接进行实例化，然后在全局的上下文中都可以使用到注册的 service</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createServiceProvider&lt;C&gt;(<span class=\"title class_\">Comp</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;C&gt;, <span class=\"attr\">services</span>: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// const outerContext = useContext(SERVICE_CONTEXT);</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">providers</span>: <span class=\"built_in\">any</span> = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// if (outerContext) providers = Object.create(outerContext);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> service <span class=\"keyword\">of</span> services) &#123;</span><br><span class=\"line\">      providers[service.<span class=\"property\">name</span>] = <span class=\"keyword\">new</span> <span class=\"title function_\">service</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SERVICE_CONTEXT.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;providers&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Comp</span> &#123;<span class=\"attr\">...props</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Comp</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">SERVICE_CONTEXT.Provider</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>那么在组件中怎么用呢？</p>\n<ul>\n<li><p>可以直接用 hook 钩子来获取</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取全部的service，然后需要哪个获取哪个</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">providers</span>: <span class=\"built_in\">any</span> = <span class=\"title function_\">useContext</span>(<span class=\"variable constant_\">SERVICE_CONTEXT</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> provider = providers[&lt;service.<span class=\"property\">name</span>&gt;];</span><br></pre></td></tr></table></figure></li>\n<li><p>自定义 hook 函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> useServiceHook&lt;T&gt;(<span class=\"attr\">service</span>: <span class=\"keyword\">new</span> () =&gt; T): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">providers</span>: <span class=\"built_in\">any</span> = <span class=\"title function_\">useContext</span>(<span class=\"variable constant_\">SERVICE_CONTEXT</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> provider = providers[(service <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">name</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (provider) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> provider;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">`未找到<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        (service <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).name</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">      &#125;</span>的依赖值，请在上层servcieComponent中提供对应的service`</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>接下来我们在组件中使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">createServiceProvider</span>(<span class=\"title class_\">User</span>, [<span class=\"title class_\">UserService</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> userService = <span class=\"title function_\">useServiceHook</span>(<span class=\"title class_\">UserService</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, setname] = <span class=\"title function_\">useState</span>(userService.<span class=\"property\">name</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [age, setage] = <span class=\"title function_\">useState</span>(userService.<span class=\"property\">age</span>);</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">subscriptions</span>: <span class=\"title class_\">Subscription</span>[] = [];</span><br><span class=\"line\">    subscriptions.<span class=\"title function_\">push</span>(</span><br><span class=\"line\">      userService.<span class=\"property\">age$</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setage</span>(age);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      subscriptions.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> i.<span class=\"title function_\">unsubscribe</span>());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">addAge</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    userService.<span class=\"title function_\">setAge</span>(age + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        I am user: &#123;name&#125;, my age is &#123;age&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addAge&#125;</span>&gt;</span>add age<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在子组件中使用，创建一个另一个组件和另一个 service，然后把之前 createServiceProvider 函数中注释的内容放开，分别试试 User 组件中注册和不注册 UserService (createServiceProvider(User, [UserService]) 和 createServiceProvider(User))</p>\n<blockquote>\n<p>User 不注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 会同步变化<br>User 注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 不会同步变化<br>这是因为父组件 Home 也注册了 UserService，User 子组件如果不注册自己的 service，就会共享父组件的 service 数据，但是如果 User 子组件注册了自己的 service，对于同一个 service 就具有不同的上下文</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ManageService</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">manageId</span>: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  manageId$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setManageId</span>(<span class=\"params\">id: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">manageId</span> = id;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">manageId$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">manageId</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">createServiceProvider</span>(<span class=\"title class_\">Home</span>, [<span class=\"title class_\">ManageService</span>, <span class=\"title class_\">UserService</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> manageService = <span class=\"title function_\">useServiceHook</span>(<span class=\"title class_\">ManageService</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [manageId, setmanageId] = <span class=\"title function_\">useState</span>(manageService.<span class=\"property\">manageId</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> subscription = manageService.<span class=\"property\">manageId$</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">manageId</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setmanageId</span>(manageId);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      subscription.<span class=\"title function_\">unsubscribe</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">addManageId</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    manageService.<span class=\"title function_\">setManageId</span>(manageId + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>I am manage, manageId: &#123;manageId&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addManageId&#125;</span>&gt;</span>add manageId<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">User</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">User</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">User</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">User</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>Github 地址：<a href=\"https://github.com/darkeering/hooks-context-state-dar\">https://github.com/darkeering/hooks-context-state-dar</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><blockquote>\n<p>react 的 context.Provider 组件会在子组件创建一个一个上下文，函数子组件总可以通过 useContext 方法来获取 context 传递的数据</p>\n</blockquote>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><ul>\n<li><p>首先，我们需要先创建一个 context</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SERVICE_CONTEXT</span> = <span class=\"title function_\">createContext</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>然后在我们需要的组件外层包上 context.Provider 组件，我们可以通过一个方法来实现</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createServiceProvider&lt;C&gt;(<span class=\"title class_\">Comp</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;C&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SERVICE_CONTEXT.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Comp</span> &#123;<span class=\"attr\">...props</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Comp</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">SERVICE_CONTEXT.Provider</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>service 的创建就像 angular 一样，直接创建一个 service 的 class，这中间的 Subject 使用的是 rxjs，直接 <code>npm i rxjs</code> 就行</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&quot;admin&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span> = <span class=\"number\">18</span>;</span><br><span class=\"line\">  age$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setAge</span>(<span class=\"params\">age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>之后，我们需要把我们 service 通过 createServiceProvider 函数注册到他的上下文中</p>\n<blockquote>\n<p>首先我们考虑的全局唯一的情况，就可以在 App 组件上面用，此时没有外层 service，所以代码运行到这里只需要直接进行实例化，然后在全局的上下文中都可以使用到注册的 service</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createServiceProvider&lt;C&gt;(<span class=\"title class_\">Comp</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;C&gt;, <span class=\"attr\">services</span>: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">React</span>.<span class=\"title function_\">memo</span>(<span class=\"function\">(<span class=\"params\">props: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// const outerContext = useContext(SERVICE_CONTEXT);</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">providers</span>: <span class=\"built_in\">any</span> = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// if (outerContext) providers = Object.create(outerContext);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> service <span class=\"keyword\">of</span> services) &#123;</span><br><span class=\"line\">      providers[service.<span class=\"property\">name</span>] = <span class=\"keyword\">new</span> <span class=\"title function_\">service</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SERVICE_CONTEXT.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;providers&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Comp</span> &#123;<span class=\"attr\">...props</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Comp</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">SERVICE_CONTEXT.Provider</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>那么在组件中怎么用呢？</p>\n<ul>\n<li><p>可以直接用 hook 钩子来获取</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取全部的service，然后需要哪个获取哪个</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">providers</span>: <span class=\"built_in\">any</span> = <span class=\"title function_\">useContext</span>(<span class=\"variable constant_\">SERVICE_CONTEXT</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> provider = providers[&lt;service.<span class=\"property\">name</span>&gt;];</span><br></pre></td></tr></table></figure></li>\n<li><p>自定义 hook 函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> useServiceHook&lt;T&gt;(<span class=\"attr\">service</span>: <span class=\"keyword\">new</span> () =&gt; T): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">providers</span>: <span class=\"built_in\">any</span> = <span class=\"title function_\">useContext</span>(<span class=\"variable constant_\">SERVICE_CONTEXT</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> provider = providers[(service <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">name</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (provider) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> provider;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">`未找到<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        (service <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).name</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">      &#125;</span>的依赖值，请在上层servcieComponent中提供对应的service`</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>接下来我们在组件中使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">createServiceProvider</span>(<span class=\"title class_\">User</span>, [<span class=\"title class_\">UserService</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> userService = <span class=\"title function_\">useServiceHook</span>(<span class=\"title class_\">UserService</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, setname] = <span class=\"title function_\">useState</span>(userService.<span class=\"property\">name</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [age, setage] = <span class=\"title function_\">useState</span>(userService.<span class=\"property\">age</span>);</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">subscriptions</span>: <span class=\"title class_\">Subscription</span>[] = [];</span><br><span class=\"line\">    subscriptions.<span class=\"title function_\">push</span>(</span><br><span class=\"line\">      userService.<span class=\"property\">age$</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setage</span>(age);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      subscriptions.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> i.<span class=\"title function_\">unsubscribe</span>());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">addAge</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    userService.<span class=\"title function_\">setAge</span>(age + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        I am user: &#123;name&#125;, my age is &#123;age&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addAge&#125;</span>&gt;</span>add age<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在子组件中使用，创建一个另一个组件和另一个 service，然后把之前 createServiceProvider 函数中注释的内容放开，分别试试 User 组件中注册和不注册 UserService (createServiceProvider(User, [UserService]) 和 createServiceProvider(User))</p>\n<blockquote>\n<p>User 不注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 会同步变化<br>User 注册 UserService，改了其中一个 user 组件中的 age，另一个 user 组件 age 不会同步变化<br>这是因为父组件 Home 也注册了 UserService，User 子组件如果不注册自己的 service，就会共享父组件的 service 数据，但是如果 User 子组件注册了自己的 service，对于同一个 service 就具有不同的上下文</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ManageService</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">manageId</span>: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  manageId$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setManageId</span>(<span class=\"params\">id: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">manageId</span> = id;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">manageId$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">manageId</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">createServiceProvider</span>(<span class=\"title class_\">Home</span>, [<span class=\"title class_\">ManageService</span>, <span class=\"title class_\">UserService</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> manageService = <span class=\"title function_\">useServiceHook</span>(<span class=\"title class_\">ManageService</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [manageId, setmanageId] = <span class=\"title function_\">useState</span>(manageService.<span class=\"property\">manageId</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> subscription = manageService.<span class=\"property\">manageId$</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">manageId</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setmanageId</span>(manageId);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      subscription.<span class=\"title function_\">unsubscribe</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">addManageId</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    manageService.<span class=\"title function_\">setManageId</span>(manageId + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>I am manage, manageId: &#123;manageId&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;addManageId&#125;</span>&gt;</span>add manageId<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">User</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">User</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">User</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">User</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>Github 地址：<a href=\"https://github.com/darkeering/hooks-context-state-dar\">https://github.com/darkeering/hooks-context-state-dar</a></p>\n"},{"title":"angular 利用 module federation 实现微前端，并实现通信(2)","date":"2023-03-04T10:10:03.000Z","_content":"\n书接上文，现在已经实现了在一个项目中使用另一个项目的 module，但是还有一些 bug 在现有项目的改造中会碰到，或者还有一些优化\n\n## 把整个项目都 expose 出去\n\n很多项目中 shell 项目都只是一个架子，一般都是直接使用 mfe2 的全部功能，就需要 mfe2 把自己 AppModule 直接 expose 出来，但是这是不可行的\n\n因为，在 shell 中是使用 RouterModule.forRoot 的，mfe2 的 AppModule 也是使用 RouterModule.forRoot，两者是不能兼容的，所以不能直接 expose AppModule 的\n\n所以，就需要在 mfe2 项目的 AppModule 外面再包一层，我们姑且叫它 DashboardModule\n\n1. 创建 DashboardModule 和 dashboard component\n\n   ```typescript\n   ng g m dashboard --flat true --project mfe2\n   ng g c dashboard --project mfe2 --module dashboard\n   ```\n\n2. DashboardModule 中使用 BrowserModule 和 RouterModule.forRoot，在 AppModule 中使用 CommonModule 和 BouterModule.forChild\n\n3. 把 angular 默认的入口改成 DashboardModule\n\n4. webpack.config.js 中更改 expose 属性\n\n   ```typescript\n   // dashboard.module.ts\n   @NgModule({\n     declarations: [DashboardComponent],\n     imports: [\n       BrowserModule,\n       RouterModule.forRoot([\n         {\n           path: \"\",\n           loadChildren: () => import(\"./app.module\").then((m) => m.AppModule),\n         },\n       ]),\n     ],\n     bootstrap: [DashboardComponent],\n   })\n   export class DashboardModule {}\n\n   // dashboard.component.html\n   <p>mfe2 dashboard works!</p>\n   <button [routerLink]=\"'/'\">home</button>\n   <button [routerLink]=\"'/comments'\">comments</button>\n   <router-outlet></router-outlet>\n\n   // app.module.ts\n   @NgModule({\n    declarations: [\n      AppComponent\n    ],\n    imports: [\n      CommonModule,\n      RouterModule.forChild([\n        {\n          path: '',\n          component: AppComponent,\n          children: [\n            {\n              path: 'comments',\n              loadChildren: () => import('./comments/comments.module').then(m => m.CommentsModule)\n            },\n          ]\n        }\n      ])\n    ],\n    providers: []\n   })\n   export class AppModule { }\n\n   // bootstrap.ts\n   platformBrowserDynamic().bootstrapModule(DashboardModule)\n     .catch(err => console.error(err));\n\n   // index.html\n   <body>\n     <app-dashboard></app-dashboard>\n   </body>\n\n   // webpack.config.js\n    exposes: {\n    \"./CommentsModule\": \"./projects/mfe2/src/app/comments/comments.module.ts\",\n    \"./AppModule\": \"./projects/mfe2/src/app/app.module.ts\",\n   },\n   ```\n\n## 在 shell 中使用 AppModule\n\n```typescript\n// 方法1:\n// webpack.config.js\nremotes: {\n mfe2: \"http://localhost:4202/remoteEntry.js\",\n},\n// mfe.d.ts\ndeclare module 'mfe2/AppModule'\n// app.module.ts\nRouterModule.forRoot([\n  {\n    path: \"mfe2\",\n    loadChildren: () => import(\"mfe2/AppModule\").then((m) => m.AppModule),\n  },\n]);\n// 方法2:\nRouterModule.forRoot([\n  {\n    path: \"mfe2\",\n    loadChildren: () =>\n      loadRemoteModule({\n        type: \"module\",\n        remoteEntry: \"http://localhost:4202/remoteEntry.js\",\n        exposedModule: \"./AppModule\",\n      }).then((m) => m.AppModule),\n  },\n]);\n```\n\n## 拦截器问题\n\n拦截器一般都是放在根 module 中的，在 mfe2 项目改造前是在 AppModule 中的，改造后，因为还是要放在 AppModule 中的，并且拦截器依赖于 HttpClientModule，所以，HttpClientModule 要和拦截器在一个 module 下面，也就是需要在 AppModule 中\n\n## Service 问题\n\n在上面 拦截器问题 中提到过 HttpClientModule，在 Service 中必然不可缺少的就是 http 请求，也需要依赖 HttpClientModule，所以，所有的 Service 就不能直接 providedIn: 'root'，而是需要在 AppModule 中的 providers 中注入 Service\n\n## 项目间通信（npm）\n\n如果在每个项目中都写一遍 shared-lib 是很麻烦的，我们可以把 shared-lib 的代码发布到 npm 上面，在需要的项目中直接引用，shared-lib 中写一些公共的代码来实现项目间的通信\n","source":"_posts/module-federation2.md","raw":"---\ntitle: angular 利用 module federation 实现微前端，并实现通信(2)\ndate: 2023-03-04 18:10:03\ntags: ['微前端', 'module federation', 'angular']\n---\n\n书接上文，现在已经实现了在一个项目中使用另一个项目的 module，但是还有一些 bug 在现有项目的改造中会碰到，或者还有一些优化\n\n## 把整个项目都 expose 出去\n\n很多项目中 shell 项目都只是一个架子，一般都是直接使用 mfe2 的全部功能，就需要 mfe2 把自己 AppModule 直接 expose 出来，但是这是不可行的\n\n因为，在 shell 中是使用 RouterModule.forRoot 的，mfe2 的 AppModule 也是使用 RouterModule.forRoot，两者是不能兼容的，所以不能直接 expose AppModule 的\n\n所以，就需要在 mfe2 项目的 AppModule 外面再包一层，我们姑且叫它 DashboardModule\n\n1. 创建 DashboardModule 和 dashboard component\n\n   ```typescript\n   ng g m dashboard --flat true --project mfe2\n   ng g c dashboard --project mfe2 --module dashboard\n   ```\n\n2. DashboardModule 中使用 BrowserModule 和 RouterModule.forRoot，在 AppModule 中使用 CommonModule 和 BouterModule.forChild\n\n3. 把 angular 默认的入口改成 DashboardModule\n\n4. webpack.config.js 中更改 expose 属性\n\n   ```typescript\n   // dashboard.module.ts\n   @NgModule({\n     declarations: [DashboardComponent],\n     imports: [\n       BrowserModule,\n       RouterModule.forRoot([\n         {\n           path: \"\",\n           loadChildren: () => import(\"./app.module\").then((m) => m.AppModule),\n         },\n       ]),\n     ],\n     bootstrap: [DashboardComponent],\n   })\n   export class DashboardModule {}\n\n   // dashboard.component.html\n   <p>mfe2 dashboard works!</p>\n   <button [routerLink]=\"'/'\">home</button>\n   <button [routerLink]=\"'/comments'\">comments</button>\n   <router-outlet></router-outlet>\n\n   // app.module.ts\n   @NgModule({\n    declarations: [\n      AppComponent\n    ],\n    imports: [\n      CommonModule,\n      RouterModule.forChild([\n        {\n          path: '',\n          component: AppComponent,\n          children: [\n            {\n              path: 'comments',\n              loadChildren: () => import('./comments/comments.module').then(m => m.CommentsModule)\n            },\n          ]\n        }\n      ])\n    ],\n    providers: []\n   })\n   export class AppModule { }\n\n   // bootstrap.ts\n   platformBrowserDynamic().bootstrapModule(DashboardModule)\n     .catch(err => console.error(err));\n\n   // index.html\n   <body>\n     <app-dashboard></app-dashboard>\n   </body>\n\n   // webpack.config.js\n    exposes: {\n    \"./CommentsModule\": \"./projects/mfe2/src/app/comments/comments.module.ts\",\n    \"./AppModule\": \"./projects/mfe2/src/app/app.module.ts\",\n   },\n   ```\n\n## 在 shell 中使用 AppModule\n\n```typescript\n// 方法1:\n// webpack.config.js\nremotes: {\n mfe2: \"http://localhost:4202/remoteEntry.js\",\n},\n// mfe.d.ts\ndeclare module 'mfe2/AppModule'\n// app.module.ts\nRouterModule.forRoot([\n  {\n    path: \"mfe2\",\n    loadChildren: () => import(\"mfe2/AppModule\").then((m) => m.AppModule),\n  },\n]);\n// 方法2:\nRouterModule.forRoot([\n  {\n    path: \"mfe2\",\n    loadChildren: () =>\n      loadRemoteModule({\n        type: \"module\",\n        remoteEntry: \"http://localhost:4202/remoteEntry.js\",\n        exposedModule: \"./AppModule\",\n      }).then((m) => m.AppModule),\n  },\n]);\n```\n\n## 拦截器问题\n\n拦截器一般都是放在根 module 中的，在 mfe2 项目改造前是在 AppModule 中的，改造后，因为还是要放在 AppModule 中的，并且拦截器依赖于 HttpClientModule，所以，HttpClientModule 要和拦截器在一个 module 下面，也就是需要在 AppModule 中\n\n## Service 问题\n\n在上面 拦截器问题 中提到过 HttpClientModule，在 Service 中必然不可缺少的就是 http 请求，也需要依赖 HttpClientModule，所以，所有的 Service 就不能直接 providedIn: 'root'，而是需要在 AppModule 中的 providers 中注入 Service\n\n## 项目间通信（npm）\n\n如果在每个项目中都写一遍 shared-lib 是很麻烦的，我们可以把 shared-lib 的代码发布到 npm 上面，在需要的项目中直接引用，shared-lib 中写一些公共的代码来实现项目间的通信\n","slug":"module-federation2","published":1,"updated":"2023-03-10T02:55:30.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf26jis00004601u0sz9b2me","content":"<p>书接上文，现在已经实现了在一个项目中使用另一个项目的 module，但是还有一些 bug 在现有项目的改造中会碰到，或者还有一些优化</p>\n<h2 id=\"把整个项目都-expose-出去\"><a href=\"#把整个项目都-expose-出去\" class=\"headerlink\" title=\"把整个项目都 expose 出去\"></a>把整个项目都 expose 出去</h2><p>很多项目中 shell 项目都只是一个架子，一般都是直接使用 mfe2 的全部功能，就需要 mfe2 把自己 AppModule 直接 expose 出来，但是这是不可行的</p>\n<p>因为，在 shell 中是使用 RouterModule.forRoot 的，mfe2 的 AppModule 也是使用 RouterModule.forRoot，两者是不能兼容的，所以不能直接 expose AppModule 的</p>\n<p>所以，就需要在 mfe2 项目的 AppModule 外面再包一层，我们姑且叫它 DashboardModule</p>\n<ol>\n<li><p>创建 DashboardModule 和 dashboard component</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m dashboard --flat <span class=\"literal\">true</span> --project mfe2</span><br><span class=\"line\">ng g c dashboard --project mfe2 --<span class=\"variable language_\">module</span> dashboard</span><br></pre></td></tr></table></figure></li>\n<li><p>DashboardModule 中使用 BrowserModule 和 RouterModule.forRoot，在 AppModule 中使用 CommonModule 和 BouterModule.forChild</p>\n</li>\n<li><p>把 angular 默认的入口改成 DashboardModule</p>\n</li>\n<li><p>webpack.config.js 中更改 expose 属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dashboard.module.ts</span></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">DashboardComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;./app.module&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">AppModule</span>),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">DashboardComponent</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DashboardModule</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dashboard.component.html</span></span><br><span class=\"line\">&lt;p&gt;mfe2 dashboard works!&lt;/p&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;&#x27;/&#x27;&quot;</span>&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;&#x27;/comments&#x27;&quot;</span>&gt;</span>comments<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\"> <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">   <span class=\"title class_\">AppComponent</span></span><br><span class=\"line\"> ],</span><br><span class=\"line\"> <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">   <span class=\"title class_\">CommonModule</span>,</span><br><span class=\"line\">   <span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forChild</span>([</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">       <span class=\"attr\">component</span>: <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">       <span class=\"attr\">children</span>: [</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           <span class=\"attr\">path</span>: <span class=\"string\">&#x27;comments&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./comments/comments.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">CommentsModule</span>)</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">       ]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   ])</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> <span class=\"attr\">providers</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bootstrap.ts</span></span><br><span class=\"line\"><span class=\"title function_\">platformBrowserDynamic</span>().<span class=\"title function_\">bootstrapModule</span>(<span class=\"title class_\">DashboardModule</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.html</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">app-dashboard</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-dashboard</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"> <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\"> <span class=\"string\">&quot;./CommentsModule&quot;</span>: <span class=\"string\">&quot;./projects/mfe2/src/app/comments/comments.module.ts&quot;</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;./AppModule&quot;</span>: <span class=\"string\">&quot;./projects/mfe2/src/app/app.module.ts&quot;</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"在-shell-中使用-AppModule\"><a href=\"#在-shell-中使用-AppModule\" class=\"headerlink\" title=\"在 shell 中使用 AppModule\"></a>在 shell 中使用 AppModule</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法1:</span></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\"> <span class=\"attr\">mfe2</span>: <span class=\"string\">&quot;http://localhost:4202/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// mfe.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&#x27;mfe2/AppModule&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe2&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;mfe2/AppModule&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">AppModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"comment\">// 方法2:</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe2&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">      <span class=\"title function_\">loadRemoteModule</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;module&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">remoteEntry</span>: <span class=\"string\">&quot;http://localhost:4202/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">exposedModule</span>: <span class=\"string\">&quot;./AppModule&quot;</span>,</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">AppModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拦截器问题\"><a href=\"#拦截器问题\" class=\"headerlink\" title=\"拦截器问题\"></a>拦截器问题</h2><p>拦截器一般都是放在根 module 中的，在 mfe2 项目改造前是在 AppModule 中的，改造后，因为还是要放在 AppModule 中的，并且拦截器依赖于 HttpClientModule，所以，HttpClientModule 要和拦截器在一个 module 下面，也就是需要在 AppModule 中</p>\n<h2 id=\"Service-问题\"><a href=\"#Service-问题\" class=\"headerlink\" title=\"Service 问题\"></a>Service 问题</h2><p>在上面 拦截器问题 中提到过 HttpClientModule，在 Service 中必然不可缺少的就是 http 请求，也需要依赖 HttpClientModule，所以，所有的 Service 就不能直接 providedIn: ‘root’，而是需要在 AppModule 中的 providers 中注入 Service</p>\n<h2 id=\"项目间通信（npm）\"><a href=\"#项目间通信（npm）\" class=\"headerlink\" title=\"项目间通信（npm）\"></a>项目间通信（npm）</h2><p>如果在每个项目中都写一遍 shared-lib 是很麻烦的，我们可以把 shared-lib 的代码发布到 npm 上面，在需要的项目中直接引用，shared-lib 中写一些公共的代码来实现项目间的通信</p>\n","site":{"data":{}},"excerpt":"","more":"<p>书接上文，现在已经实现了在一个项目中使用另一个项目的 module，但是还有一些 bug 在现有项目的改造中会碰到，或者还有一些优化</p>\n<h2 id=\"把整个项目都-expose-出去\"><a href=\"#把整个项目都-expose-出去\" class=\"headerlink\" title=\"把整个项目都 expose 出去\"></a>把整个项目都 expose 出去</h2><p>很多项目中 shell 项目都只是一个架子，一般都是直接使用 mfe2 的全部功能，就需要 mfe2 把自己 AppModule 直接 expose 出来，但是这是不可行的</p>\n<p>因为，在 shell 中是使用 RouterModule.forRoot 的，mfe2 的 AppModule 也是使用 RouterModule.forRoot，两者是不能兼容的，所以不能直接 expose AppModule 的</p>\n<p>所以，就需要在 mfe2 项目的 AppModule 外面再包一层，我们姑且叫它 DashboardModule</p>\n<ol>\n<li><p>创建 DashboardModule 和 dashboard component</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m dashboard --flat <span class=\"literal\">true</span> --project mfe2</span><br><span class=\"line\">ng g c dashboard --project mfe2 --<span class=\"variable language_\">module</span> dashboard</span><br></pre></td></tr></table></figure></li>\n<li><p>DashboardModule 中使用 BrowserModule 和 RouterModule.forRoot，在 AppModule 中使用 CommonModule 和 BouterModule.forChild</p>\n</li>\n<li><p>把 angular 默认的入口改成 DashboardModule</p>\n</li>\n<li><p>webpack.config.js 中更改 expose 属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dashboard.module.ts</span></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">DashboardComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;./app.module&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">AppModule</span>),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">DashboardComponent</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DashboardModule</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dashboard.component.html</span></span><br><span class=\"line\">&lt;p&gt;mfe2 dashboard works!&lt;/p&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;&#x27;/&#x27;&quot;</span>&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;&#x27;/comments&#x27;&quot;</span>&gt;</span>comments<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\"> <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">   <span class=\"title class_\">AppComponent</span></span><br><span class=\"line\"> ],</span><br><span class=\"line\"> <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">   <span class=\"title class_\">CommonModule</span>,</span><br><span class=\"line\">   <span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forChild</span>([</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">       <span class=\"attr\">component</span>: <span class=\"title class_\">AppComponent</span>,</span><br><span class=\"line\">       <span class=\"attr\">children</span>: [</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           <span class=\"attr\">path</span>: <span class=\"string\">&#x27;comments&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./comments/comments.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">CommentsModule</span>)</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">       ]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   ])</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> <span class=\"attr\">providers</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bootstrap.ts</span></span><br><span class=\"line\"><span class=\"title function_\">platformBrowserDynamic</span>().<span class=\"title function_\">bootstrapModule</span>(<span class=\"title class_\">DashboardModule</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.html</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">app-dashboard</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-dashboard</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"> <span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\"> <span class=\"string\">&quot;./CommentsModule&quot;</span>: <span class=\"string\">&quot;./projects/mfe2/src/app/comments/comments.module.ts&quot;</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;./AppModule&quot;</span>: <span class=\"string\">&quot;./projects/mfe2/src/app/app.module.ts&quot;</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"在-shell-中使用-AppModule\"><a href=\"#在-shell-中使用-AppModule\" class=\"headerlink\" title=\"在 shell 中使用 AppModule\"></a>在 shell 中使用 AppModule</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法1:</span></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\"> <span class=\"attr\">mfe2</span>: <span class=\"string\">&quot;http://localhost:4202/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// mfe.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&#x27;mfe2/AppModule&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe2&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;mfe2/AppModule&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">AppModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"comment\">// 方法2:</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe2&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">      <span class=\"title function_\">loadRemoteModule</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;module&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">remoteEntry</span>: <span class=\"string\">&quot;http://localhost:4202/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">exposedModule</span>: <span class=\"string\">&quot;./AppModule&quot;</span>,</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">AppModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拦截器问题\"><a href=\"#拦截器问题\" class=\"headerlink\" title=\"拦截器问题\"></a>拦截器问题</h2><p>拦截器一般都是放在根 module 中的，在 mfe2 项目改造前是在 AppModule 中的，改造后，因为还是要放在 AppModule 中的，并且拦截器依赖于 HttpClientModule，所以，HttpClientModule 要和拦截器在一个 module 下面，也就是需要在 AppModule 中</p>\n<h2 id=\"Service-问题\"><a href=\"#Service-问题\" class=\"headerlink\" title=\"Service 问题\"></a>Service 问题</h2><p>在上面 拦截器问题 中提到过 HttpClientModule，在 Service 中必然不可缺少的就是 http 请求，也需要依赖 HttpClientModule，所以，所有的 Service 就不能直接 providedIn: ‘root’，而是需要在 AppModule 中的 providers 中注入 Service</p>\n<h2 id=\"项目间通信（npm）\"><a href=\"#项目间通信（npm）\" class=\"headerlink\" title=\"项目间通信（npm）\"></a>项目间通信（npm）</h2><p>如果在每个项目中都写一遍 shared-lib 是很麻烦的，我们可以把 shared-lib 的代码发布到 npm 上面，在需要的项目中直接引用，shared-lib 中写一些公共的代码来实现项目间的通信</p>\n"},{"title":"angular 利用 module federation 实现微前端，并实现通信(3)","date":"2023-03-09T16:15:00.000Z","_content":"\n书接上文，我们已经实现了，项目间通信，拦截器，接下来我们要解决的问题是：1. 样式问题 2. 路由问题\n\n## 样式问题\n\n在 angular 中，一般的组件中的样式并不会被影响，但是全局样式是会被影响的\n\n我们一般会在 angular.json 文件中引入公共样式和依赖的组件库的样式\n\n但是在 expose 出去的 AppModule 中，并不会把这些公共样式带着\n\n所以我们需要在 AppModule 中导入这些公共的样式文件\n\n我们可以把这些公共样式单独的建一个 css 文件（最好是 css 文件，在一般组件库肯定会打包成 css 文件，而且 css 文件会被浏览器直接识别，没有预编译的问题），我们姑且叫他 main.css\n\n```typescript\n// main.css\n@import \"../../../node_modules/ng-devui/devui.min.css\";\n@import '../../../node_modules/@devui-design/icons/icomoon/devui-icon.css';\n\n@import \"../../../node_modules/ng-zorro-antd/ng-zorro-antd.min.css\";\n@import \"./styles.css\";\n```\n\n虽然，AppModule 是懒加载，但是在整个项目进来的时候，相当于直接加载，并且 router-outlet 是在 app component 上面的（你也可以设置你需要的组件），所以我们直接在 app component 中使用 main.css\n\n**这里是重要的一点，虽然在 app component 中引入了公共样式，但是现在这个样式文件只能作用于 app component 这一个组件，所以这还不算是公共样式，我们需要去掉 angular 在编译时对该组件的样式编译**\n\n```typescript\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['../main.css','./app.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\n```\n\n最后一点，关于图标字体库的问题，暂时还没有解决方案，敬请期待\n\n## 路由问题\n\n因为子项目是通过 module 的方式接入的主项目，并且技术栈都是 angular，所以我们在子项目进行路由切换的时候，其实走的还是主项目的路由，但是在子项目中我们并不会在前面加一层前缀，所以会报一些找不到路由的情况\n\n主要原因还是因为在子项目中进行路由跳转的时候，子项目并不知道这时是子项目，但是在子项目中加路由前缀，又太麻烦，所以，我在主项目路由跳转时做了一个简单的路由守卫（canActive）\n\n```typescript\n// shell 项目\n// can-active.guard.ts\n@Injectable({\n  providedIn: \"root\",\n})\nexport class CanActiveGuard implements CanActivate {\n  constructor(private router: Router) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const currentMfe = this.router.url.split(\"/\")[1];\n    // 当子路由进行切换的时候，判断当前是哪个子项目，自动在前面加上当前子项目对应的路由前缀\n    if (currentMfe !== \"\" || (currentMfe === \"\" && state.url !== \"/\")) {\n      const hasFind = this.router.config.find((r) => r.path === currentMfe);\n      if (hasFind) {\n        const url = `${\"/\" + currentMfe}${state.url}`;\n        this.router.navigate([url]);\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n// app.module.ts\nRouterModule.forRoot([\n  {\n    path: \"\",\n    canActivate: [CanActiveGuard],\n    component: HomeComponent,\n    pathMatch: \"full\",\n  },\n  {\n    path: \"mfe1\",\n    loadChildren: () => import(\"mfe1/Module\").then((m) => m.ChartsModule),\n  },\n  {\n    path: \"mfe2\",\n    // canDeactivate: [LeaveGuard],\n    loadChildren: () =>\n      loadRemoteModule({\n        type: \"module\",\n        remoteEntry: \"http://localhost:4202/remoteEntry.js\",\n        exposedModule: \"./AppModule\",\n      }).then((m) => m.AppModule),\n  },\n  {\n    path: \"**\",\n    canActivate: [CanActiveGuard],\n    component: NotfoundComponent,\n  },\n]);\n```\n\n但是，这个还是有 bug 的，在当你一个 a 项目切换到另一个 b 项目的时候，通过浏览器的后退按钮是不好用的，因为，判断的当前的路由是 b 项目的，所以还是会走路由守卫\n\n另一个就是，当你从一个项目切换到另一个项目的时候，最好还是走项目间的通信，把相关信息传递给 shell 项目，通过 shell 项目进行路由切换\n","source":"_posts/module-federation3.md","raw":"---\ntitle: angular 利用 module federation 实现微前端，并实现通信(3)\ndate: 2023-03-10 00:15:00\ntags: ['微前端', 'module federation', 'angular']\n---\n\n书接上文，我们已经实现了，项目间通信，拦截器，接下来我们要解决的问题是：1. 样式问题 2. 路由问题\n\n## 样式问题\n\n在 angular 中，一般的组件中的样式并不会被影响，但是全局样式是会被影响的\n\n我们一般会在 angular.json 文件中引入公共样式和依赖的组件库的样式\n\n但是在 expose 出去的 AppModule 中，并不会把这些公共样式带着\n\n所以我们需要在 AppModule 中导入这些公共的样式文件\n\n我们可以把这些公共样式单独的建一个 css 文件（最好是 css 文件，在一般组件库肯定会打包成 css 文件，而且 css 文件会被浏览器直接识别，没有预编译的问题），我们姑且叫他 main.css\n\n```typescript\n// main.css\n@import \"../../../node_modules/ng-devui/devui.min.css\";\n@import '../../../node_modules/@devui-design/icons/icomoon/devui-icon.css';\n\n@import \"../../../node_modules/ng-zorro-antd/ng-zorro-antd.min.css\";\n@import \"./styles.css\";\n```\n\n虽然，AppModule 是懒加载，但是在整个项目进来的时候，相当于直接加载，并且 router-outlet 是在 app component 上面的（你也可以设置你需要的组件），所以我们直接在 app component 中使用 main.css\n\n**这里是重要的一点，虽然在 app component 中引入了公共样式，但是现在这个样式文件只能作用于 app component 这一个组件，所以这还不算是公共样式，我们需要去掉 angular 在编译时对该组件的样式编译**\n\n```typescript\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['../main.css','./app.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\n```\n\n最后一点，关于图标字体库的问题，暂时还没有解决方案，敬请期待\n\n## 路由问题\n\n因为子项目是通过 module 的方式接入的主项目，并且技术栈都是 angular，所以我们在子项目进行路由切换的时候，其实走的还是主项目的路由，但是在子项目中我们并不会在前面加一层前缀，所以会报一些找不到路由的情况\n\n主要原因还是因为在子项目中进行路由跳转的时候，子项目并不知道这时是子项目，但是在子项目中加路由前缀，又太麻烦，所以，我在主项目路由跳转时做了一个简单的路由守卫（canActive）\n\n```typescript\n// shell 项目\n// can-active.guard.ts\n@Injectable({\n  providedIn: \"root\",\n})\nexport class CanActiveGuard implements CanActivate {\n  constructor(private router: Router) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const currentMfe = this.router.url.split(\"/\")[1];\n    // 当子路由进行切换的时候，判断当前是哪个子项目，自动在前面加上当前子项目对应的路由前缀\n    if (currentMfe !== \"\" || (currentMfe === \"\" && state.url !== \"/\")) {\n      const hasFind = this.router.config.find((r) => r.path === currentMfe);\n      if (hasFind) {\n        const url = `${\"/\" + currentMfe}${state.url}`;\n        this.router.navigate([url]);\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n// app.module.ts\nRouterModule.forRoot([\n  {\n    path: \"\",\n    canActivate: [CanActiveGuard],\n    component: HomeComponent,\n    pathMatch: \"full\",\n  },\n  {\n    path: \"mfe1\",\n    loadChildren: () => import(\"mfe1/Module\").then((m) => m.ChartsModule),\n  },\n  {\n    path: \"mfe2\",\n    // canDeactivate: [LeaveGuard],\n    loadChildren: () =>\n      loadRemoteModule({\n        type: \"module\",\n        remoteEntry: \"http://localhost:4202/remoteEntry.js\",\n        exposedModule: \"./AppModule\",\n      }).then((m) => m.AppModule),\n  },\n  {\n    path: \"**\",\n    canActivate: [CanActiveGuard],\n    component: NotfoundComponent,\n  },\n]);\n```\n\n但是，这个还是有 bug 的，在当你一个 a 项目切换到另一个 b 项目的时候，通过浏览器的后退按钮是不好用的，因为，判断的当前的路由是 b 项目的，所以还是会走路由守卫\n\n另一个就是，当你从一个项目切换到另一个项目的时候，最好还是走项目间的通信，把相关信息传递给 shell 项目，通过 shell 项目进行路由切换\n","slug":"module-federation3","published":1,"updated":"2023-03-10T02:55:32.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf26jis10005601u8h7z7c8b","content":"<p>书接上文，我们已经实现了，项目间通信，拦截器，接下来我们要解决的问题是：1. 样式问题 2. 路由问题</p>\n<h2 id=\"样式问题\"><a href=\"#样式问题\" class=\"headerlink\" title=\"样式问题\"></a>样式问题</h2><p>在 angular 中，一般的组件中的样式并不会被影响，但是全局样式是会被影响的</p>\n<p>我们一般会在 angular.json 文件中引入公共样式和依赖的组件库的样式</p>\n<p>但是在 expose 出去的 AppModule 中，并不会把这些公共样式带着</p>\n<p>所以我们需要在 AppModule 中导入这些公共的样式文件</p>\n<p>我们可以把这些公共样式单独的建一个 css 文件（最好是 css 文件，在一般组件库肯定会打包成 css 文件，而且 css 文件会被浏览器直接识别，没有预编译的问题），我们姑且叫他 main.css</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.css</span></span><br><span class=\"line\"><span class=\"meta\">@import</span> <span class=\"string\">&quot;../../../node_modules/ng-devui/devui.min.css&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@import</span> <span class=\"string\">&#x27;../../../node_modules/@devui-design/icons/icomoon/devui-icon.css&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@import</span> <span class=\"string\">&quot;../../../node_modules/ng-zorro-antd/ng-zorro-antd.min.css&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@import</span> <span class=\"string\">&quot;./styles.css&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>虽然，AppModule 是懒加载，但是在整个项目进来的时候，相当于直接加载，并且 router-outlet 是在 app component 上面的（你也可以设置你需要的组件），所以我们直接在 app component 中使用 main.css</p>\n<p><strong>这里是重要的一点，虽然在 app component 中引入了公共样式，但是现在这个样式文件只能作用于 app component 这一个组件，所以这还不算是公共样式，我们需要去掉 angular 在编译时对该组件的样式编译</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;../main.css&#x27;</span>,<span class=\"string\">&#x27;./app.component.css&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">encapsulation</span>: <span class=\"title class_\">ViewEncapsulation</span>.<span class=\"property\">None</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>最后一点，关于图标字体库的问题，暂时还没有解决方案，敬请期待</p>\n<h2 id=\"路由问题\"><a href=\"#路由问题\" class=\"headerlink\" title=\"路由问题\"></a>路由问题</h2><p>因为子项目是通过 module 的方式接入的主项目，并且技术栈都是 angular，所以我们在子项目进行路由切换的时候，其实走的还是主项目的路由，但是在子项目中我们并不会在前面加一层前缀，所以会报一些找不到路由的情况</p>\n<p>主要原因还是因为在子项目中进行路由跳转的时候，子项目并不知道这时是子项目，但是在子项目中加路由前缀，又太麻烦，所以，我在主项目路由跳转时做了一个简单的路由守卫（canActive）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// shell 项目</span></span><br><span class=\"line\"><span class=\"comment\">// can-active.guard.ts</span></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CanActiveGuard</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CanActivate</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router: Router</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">canActivate</span>(</span><br><span class=\"line\">    <span class=\"attr\">route</span>: <span class=\"title class_\">ActivatedRouteSnapshot</span>,</span><br><span class=\"line\">    <span class=\"attr\">state</span>: <span class=\"title class_\">RouterStateSnapshot</span></span><br><span class=\"line\">  ):</span><br><span class=\"line\">    | <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">boolean</span> | <span class=\"title class_\">UrlTree</span>&gt;</span><br><span class=\"line\">    | <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span> | <span class=\"title class_\">UrlTree</span>&gt;</span><br><span class=\"line\">    | <span class=\"built_in\">boolean</span></span><br><span class=\"line\">    | <span class=\"title class_\">UrlTree</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentMfe = <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"property\">url</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;/&quot;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 当子路由进行切换的时候，判断当前是哪个子项目，自动在前面加上当前子项目对应的路由前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentMfe !== <span class=\"string\">&quot;&quot;</span> || (currentMfe === <span class=\"string\">&quot;&quot;</span> &amp;&amp; state.<span class=\"property\">url</span> !== <span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> hasFind = <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"property\">config</span>.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">r</span>) =&gt;</span> r.<span class=\"property\">path</span> === currentMfe);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasFind) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"string\">&quot;/&quot;</span> + currentMfe&#125;</span><span class=\"subst\">$&#123;state.url&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">navigate</span>([url]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">canActivate</span>: [<span class=\"title class_\">CanActiveGuard</span>],</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">HomeComponent</span>,</span><br><span class=\"line\">    <span class=\"attr\">pathMatch</span>: <span class=\"string\">&quot;full&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;mfe1/Module&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">ChartsModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe2&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// canDeactivate: [LeaveGuard],</span></span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">      <span class=\"title function_\">loadRemoteModule</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;module&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">remoteEntry</span>: <span class=\"string\">&quot;http://localhost:4202/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">exposedModule</span>: <span class=\"string\">&quot;./AppModule&quot;</span>,</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">AppModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;**&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">canActivate</span>: [<span class=\"title class_\">CanActiveGuard</span>],</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">NotfoundComponent</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<p>但是，这个还是有 bug 的，在当你一个 a 项目切换到另一个 b 项目的时候，通过浏览器的后退按钮是不好用的，因为，判断的当前的路由是 b 项目的，所以还是会走路由守卫</p>\n<p>另一个就是，当你从一个项目切换到另一个项目的时候，最好还是走项目间的通信，把相关信息传递给 shell 项目，通过 shell 项目进行路由切换</p>\n","site":{"data":{}},"excerpt":"","more":"<p>书接上文，我们已经实现了，项目间通信，拦截器，接下来我们要解决的问题是：1. 样式问题 2. 路由问题</p>\n<h2 id=\"样式问题\"><a href=\"#样式问题\" class=\"headerlink\" title=\"样式问题\"></a>样式问题</h2><p>在 angular 中，一般的组件中的样式并不会被影响，但是全局样式是会被影响的</p>\n<p>我们一般会在 angular.json 文件中引入公共样式和依赖的组件库的样式</p>\n<p>但是在 expose 出去的 AppModule 中，并不会把这些公共样式带着</p>\n<p>所以我们需要在 AppModule 中导入这些公共的样式文件</p>\n<p>我们可以把这些公共样式单独的建一个 css 文件（最好是 css 文件，在一般组件库肯定会打包成 css 文件，而且 css 文件会被浏览器直接识别，没有预编译的问题），我们姑且叫他 main.css</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.css</span></span><br><span class=\"line\"><span class=\"meta\">@import</span> <span class=\"string\">&quot;../../../node_modules/ng-devui/devui.min.css&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@import</span> <span class=\"string\">&#x27;../../../node_modules/@devui-design/icons/icomoon/devui-icon.css&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@import</span> <span class=\"string\">&quot;../../../node_modules/ng-zorro-antd/ng-zorro-antd.min.css&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@import</span> <span class=\"string\">&quot;./styles.css&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>虽然，AppModule 是懒加载，但是在整个项目进来的时候，相当于直接加载，并且 router-outlet 是在 app component 上面的（你也可以设置你需要的组件），所以我们直接在 app component 中使用 main.css</p>\n<p><strong>这里是重要的一点，虽然在 app component 中引入了公共样式，但是现在这个样式文件只能作用于 app component 这一个组件，所以这还不算是公共样式，我们需要去掉 angular 在编译时对该组件的样式编译</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;../main.css&#x27;</span>,<span class=\"string\">&#x27;./app.component.css&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">encapsulation</span>: <span class=\"title class_\">ViewEncapsulation</span>.<span class=\"property\">None</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>最后一点，关于图标字体库的问题，暂时还没有解决方案，敬请期待</p>\n<h2 id=\"路由问题\"><a href=\"#路由问题\" class=\"headerlink\" title=\"路由问题\"></a>路由问题</h2><p>因为子项目是通过 module 的方式接入的主项目，并且技术栈都是 angular，所以我们在子项目进行路由切换的时候，其实走的还是主项目的路由，但是在子项目中我们并不会在前面加一层前缀，所以会报一些找不到路由的情况</p>\n<p>主要原因还是因为在子项目中进行路由跳转的时候，子项目并不知道这时是子项目，但是在子项目中加路由前缀，又太麻烦，所以，我在主项目路由跳转时做了一个简单的路由守卫（canActive）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// shell 项目</span></span><br><span class=\"line\"><span class=\"comment\">// can-active.guard.ts</span></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CanActiveGuard</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CanActivate</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router: Router</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">canActivate</span>(</span><br><span class=\"line\">    <span class=\"attr\">route</span>: <span class=\"title class_\">ActivatedRouteSnapshot</span>,</span><br><span class=\"line\">    <span class=\"attr\">state</span>: <span class=\"title class_\">RouterStateSnapshot</span></span><br><span class=\"line\">  ):</span><br><span class=\"line\">    | <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">boolean</span> | <span class=\"title class_\">UrlTree</span>&gt;</span><br><span class=\"line\">    | <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span> | <span class=\"title class_\">UrlTree</span>&gt;</span><br><span class=\"line\">    | <span class=\"built_in\">boolean</span></span><br><span class=\"line\">    | <span class=\"title class_\">UrlTree</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentMfe = <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"property\">url</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;/&quot;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 当子路由进行切换的时候，判断当前是哪个子项目，自动在前面加上当前子项目对应的路由前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentMfe !== <span class=\"string\">&quot;&quot;</span> || (currentMfe === <span class=\"string\">&quot;&quot;</span> &amp;&amp; state.<span class=\"property\">url</span> !== <span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> hasFind = <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"property\">config</span>.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">r</span>) =&gt;</span> r.<span class=\"property\">path</span> === currentMfe);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasFind) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"string\">&quot;/&quot;</span> + currentMfe&#125;</span><span class=\"subst\">$&#123;state.url&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">navigate</span>([url]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">canActivate</span>: [<span class=\"title class_\">CanActiveGuard</span>],</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">HomeComponent</span>,</span><br><span class=\"line\">    <span class=\"attr\">pathMatch</span>: <span class=\"string\">&quot;full&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;mfe1/Module&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">ChartsModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;mfe2&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// canDeactivate: [LeaveGuard],</span></span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">      <span class=\"title function_\">loadRemoteModule</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;module&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">remoteEntry</span>: <span class=\"string\">&quot;http://localhost:4202/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">exposedModule</span>: <span class=\"string\">&quot;./AppModule&quot;</span>,</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> m.<span class=\"property\">AppModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;**&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">canActivate</span>: [<span class=\"title class_\">CanActiveGuard</span>],</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">NotfoundComponent</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<p>但是，这个还是有 bug 的，在当你一个 a 项目切换到另一个 b 项目的时候，通过浏览器的后退按钮是不好用的，因为，判断的当前的路由是 b 项目的，所以还是会走路由守卫</p>\n<p>另一个就是，当你从一个项目切换到另一个项目的时候，最好还是走项目间的通信，把相关信息传递给 shell 项目，通过 shell 项目进行路由切换</p>\n"},{"title":"手写简易promise","date":"2023-02-07T08:00:00.000Z","_content":"\n## Promise 的能力\n\n解决了回调地狱\n\n- 嵌套调用，第一个函数的返回值是第二个函数的入参（**then 的链式调用**）\n- 处理多个并发异步请求（**Promise.all**）\n\n## 手写 Promise\n\nPromise 的核心\n\n1. 有三个状态 pending、resolved、rejected，一旦改变，不可逆转\n2. Promise 构造函数接受一个 excutor 函数，立即执行\n3. excutor 有两个函数，resolve，reject\n4. then 函数接收两个函数，onResolve，onReject，excutor 调用 resolve。then 实现 onResolve，excutor 调用 reject，then 实现 onReject\n5. then 的链式调用和值的穿透\n\n### \\_Promise 1.0\n\n```typescript\nconst p1 = new _Promise((resolve, reject) => {\n  resolve(\"success\");\n  reject(\"failed\");\n}).then(\n  (data) => {\n    console.log(data);\n  },\n  (err) => {\n    console.log(err);\n  }\n);\n```\n\n首先我们希望这个最简单的代码能跑起来，根据上述的核心，先搭一个大概的架子\n\n```typescript\nclass _Promise {\n  constructor(executor) {\n    this.status = \"pending\";\n    this.value = undefined;\n    this.reason = undefined;\n    let resolve = () => {};\n    let reject = () => {};\n    executor(resolve, reject);\n  }\n\n  then(onResolve, onReject) {}\n}\n```\n\n调用 resolve 和 reject 的时候，状态要改变，并且把值保存起来\n\n```typescript\nclass _Promise {\n  constructor(executor) {\n    this.status = \"pending\";\n    this.value = undefined;\n    this.reason = undefined;\n    let resolve = (value) => {\n      if (this.status === \"pending\") {\n        this.value = value;\n        this.status = \"resolved\";\n      }\n    };\n    let reject = (reason) => {\n      if (this.status === \"pending\") {\n        this.reason = reason;\n        this.status = \"rejected\";\n      }\n    };\n    executor(resolve, reject);\n  }\n\n  then(onResolve, onReject) {}\n}\n```\n\nthen 函数会接受两个方法 resolve 就执行第一个，reject 就执行第二个\n\n```typescript\nclass _Promise {\n  constructor(executor) {\n    // ...\n  }\n\n  then(onResolve, onReject) {\n    if (this.status === \"resolved\") {\n      onResolve(this.value);\n    }\n    if (this.status === \"rejected\") {\n      onReject(this.reason);\n    }\n  }\n}\n```\n\n执行一下代码，确实是我们需要的，而且 resolve 执行过后，再调用 reject 也不起作用了\n\n![img](/assets/promise/1.png)\n\n### \\_Promise 2.0\n\n接下来，我们在 excutor 中传入一个异步操作\n\n![img](/assets/promise/2.png)\n\n发现，如上图所示，并没有任何的输出，这是因为代码运行到 then 方法的时候，resolve 没有调用，所以 status 还是 pending 状态的，所以没有输出。因此我们需要把回调函数存起来，当 resolve 或 reject 调用的时候，再执行\n\n```typescript\nclass _Promise {\n  constructor(executor) {\n    this.status = \"pending\"; // 状态\n    this.value = undefined; // resolve的值\n    this.reason = undefined; // reject的值\n    this.onResolveCbs = []; // onResolve 回调\n    this.onRejectCbs = []; // onReject 回调\n    let resolve = (value) => {\n      // 状态改变之后不可逆\n      if (this.status === \"pending\") {\n        this.value = value;\n        this.status = \"resolved\";\n        this.onResolveCbs.forEach((cb) => cb());\n      }\n    };\n    let reject = (reason) => {\n      // 状态改变之后不可逆\n      if (this.status === \"pending\") {\n        this.reason = reason;\n        this.status = \"rejected\";\n        this.onRejectCbs.forEach((cb) => cb());\n      }\n    };\n    executor(resolve, reject);\n  }\n\n  then(onResolve, onReject) {\n    if (this.status === \"resolved\") {\n      onResolve(this.value);\n    }\n    if (this.status === \"rejected\") {\n      onReject(this.reason);\n    }\n\n    if (this.status === \"pending\") {\n      this.onResolveCbs.push(() => {\n        onResolve(this.value);\n      });\n      this.onRejectCbs.push(() => {\n        onReject(this.reason);\n      });\n    }\n  }\n}\n```\n\n执行一下，我们可以看到异步成功的执行了\n\n![img](/assets/promise/3.png)\n\n### \\_Promise 3.0\n\n前面的都是基础，接下来的 then 的链式和值的穿透才是重点\n\n![img](/assets/promise/4.png) ![img](/assets/promise/5.png)\n\n> then 返回的是一个新的 Promise 对象\n> return 的值新 Promise 的 resolve 的参数\n\n```typescript\nthen(onResolve, onReject) {\n  // if (this.status === \"resolved\") {\n  //   onResolve(this.value);\n  // }\n  // if (this.status === \"rejected\") {\n  //   onReject(this.reason);\n  // }\n\n  // if (this.status === \"pending\") {\n  //   this.onResolveCbs.push(() => {\n  //     onResolve(this.value);\n  //   });\n  //   this.onRejectCbs.push(() => {\n  //     onReject(this.reason);\n  //   });\n  // }\n  const newpromise = new _Promise((resolve, reject) => {})\n\n  return newpromise\n}\n```\n\n原来的逻辑还是要存在的，但是新的 promise 的 resolve 函数的参数，需要获得现在这一个 then 函数的返回值\n\n```typescript\nthen(onResolve, onReject) {\n  let x;\n  const newpromise = new _Promise((resolve, reject) => {\n    if (this.status === \"resolved\") {\n      x = onResolve(this.value);\n      resolve(x);\n    }\n    if (this.status === \"rejected\") {\n      x = onReject(this.reason);\n      resolve(x);\n    }\n\n    if (this.status === \"pending\") {\n      this.onResolveCbs.push(() => {\n        x = onResolve(this.value);\n        resolve(x);\n      });\n      this.onRejectCbs.push(() => {\n        x = onReject(this.reason);\n        resolve(x);\n      });\n    }\n  });\n\n  return newpromise;\n}\n```\n\n执行之后的结果是正确的\n![img](/assets/promise/6.png)\n\n但是，去掉 excutor 中的 settimeout 函数之后，结果和正统的 Promise 结果(1->2->success->11->22)不一样\n\n![img](/assets/promise/7.png)\n\n这是因为正统的 Promise 中的 then 是异步的\n\n所以我们的 onResolve，onReject 也要是异步的，这就需要我们在外层加上异步函数\n\n```typescript\n  then(onResolve, onReject) {\n    let x;\n    const newpromise = new _Promise((resolve, reject) => {\n      if (this.status === \"resolved\") {\n        setTimeout(() => {\n          x = onResolve(this.value);\n          resolve(x);\n        });\n      }\n      if (this.status === \"rejected\") {\n        setTimeout(() => {\n          x = onReject(this.reason);\n          resolve(x);\n        });\n      }\n\n      if (this.status === \"pending\") {\n        this.onResolveCbs.push(() => {\n          setTimeout(() => {\n            x = onResolve(this.value);\n            resolve(x);\n          });\n        });\n        this.onRejectCbs.push(() => {\n          setTimeout(() => {\n            x = onReject(this.reason);\n            resolve(x);\n          });\n        });\n      }\n    });\n\n    return newpromise;\n  }\n```\n\n这是链式调用，接下来还有值的穿透，要是用现在的代码去跑代码.then().then()一定会报错，因为你的 then 方法根本什么参数都没有传，所以需要在 then 函数刚开始的时候进行判断，如果不是一个函数，那就直接设置 onResolve 为`(v) => v`方法，这样后面调用的时候直接返回的就是 value 值，onReject 也是一样的\n\n```typescript\nthen(onResolve, onReject) {\n  if (typeof onResolve !== \"function\") onResolve = (v) => v;\n  if (typeof onReject !== \"function\") onReject = (v) => v;\n  let x;\n  const newpromise = new _Promise((resolve, reject) => {\n    if (this.status === \"resolved\") {\n      setTimeout(() => {\n        x = onResolve(this.value);\n        resolve(x);\n      });\n    }\n    if (this.status === \"rejected\") {\n      setTimeout(() => {\n        x = onReject(this.reason);\n        resolve(x);\n      });\n    }\n\n    if (this.status === \"pending\") {\n      this.onResolveCbs.push(() => {\n        setTimeout(() => {\n          x = onResolve(this.value);\n          resolve(x);\n        });\n      });\n      this.onRejectCbs.push(() => {\n        setTimeout(() => {\n          x = onReject(this.reason);\n          resolve(x);\n        });\n      });\n    }\n  });\n\n  return newpromise;\n}\n```\n\n执行看一下结果，确实实现了值的穿透\n![img](/assets/promise/8.png)\n\n至此，我们就大致实现了一个建议的 Promise，之后的就是处理一些特殊情况、实现一些 promise 的 api 和进行公共方法的封装\n\n### \\_Promise 4.0\n\nthen 函数的返回值有这几类\n\n1. 如果不是对象也不是函数，那就直接 resolve\n2. 如果是一个对象或者一个函数，但是不含有 then 函数，说明不是 promise 对象，直接 resolve\n3. 如果是一个对象或者一个函数，但是含有 then 函数，说明是一个 promise 对象，需要实现这个 promise 然后 then 的返回值来\n\n所以我们需要封装一个 resolvePromise 函数\n\n```typescript\nresolvePromise(x, resolve, reject) {\n  resolve(x)\n}\n\nthen(onResolve, onReject) {\n  if (typeof onResolve !== \"function\") onResolve = (v) => v;\n  if (typeof onReject !== \"function\") onReject = (v) => v;\n  let x;\n  const newpromise = new _Promise((resolve, reject) => {\n    if (this.status === \"resolved\") {\n      setTimeout(() => {\n        x = onResolve(this.value);\n        this.resolvePromise(x, resolve, reject);\n      });\n    }\n    if (this.status === \"rejected\") {\n      setTimeout(() => {\n        x = onReject(this.reason);\n        this.resolvePromise(x, resolve, reject);\n      });\n    }\n\n    if (this.status === \"pending\") {\n      this.onResolveCbs.push(() => {\n        setTimeout(() => {\n          x = onResolve(this.value);\n          this.resolvePromise(x, resolve, reject);\n        });\n      });\n      this.onRejectCbs.push(() => {\n        setTimeout(() => {\n          x = onReject(this.reason);\n          this.resolvePromise(x, resolve, reject);\n        });\n      });\n    }\n  });\n\n  return newpromise;\n}\n```\n\nresolvePromise 函数需要满足之前说的三个条件\n\n```typescript\n  resolvePromise(x, resolve, reject) {\n    const xType = typeof x;\n    if (xType !== \"object\" && xType !== \"function\") {\n      resolve(x);\n      return;\n    }\n    const then = x.then;\n\n    if (typeof then === \"function\") {\n      then.call(\n        x,\n        (data) => {\n          this.resolvePromise(data, resolve, reject);\n        },\n        (reason) => {\n          reject(reason);\n        }\n      );\n    } else {\n      resolve(x);\n    }\n  }\n```\n\n最后添加一个 promise.all 方法\n\n```typescript\n  static all(promises) {\n    return new _Promise((resolve, reject) => {\n      let count = 0;\n      let arr = [];\n      promises.forEach((promise, index) => {\n        promise.then(\n          (res) => {\n            count++;\n            arr[index] = res;\n            if (count >= promises.length) resolve(arr);\n          },\n          (err) => {\n            reject(err);\n          }\n        );\n      });\n    });\n  }\n```\n","source":"_posts/promise.md","raw":"---\ntitle: 手写简易promise\ndate: 2023-02-07 16:00:00\ntags: ['js', 'promise']\n---\n\n## Promise 的能力\n\n解决了回调地狱\n\n- 嵌套调用，第一个函数的返回值是第二个函数的入参（**then 的链式调用**）\n- 处理多个并发异步请求（**Promise.all**）\n\n## 手写 Promise\n\nPromise 的核心\n\n1. 有三个状态 pending、resolved、rejected，一旦改变，不可逆转\n2. Promise 构造函数接受一个 excutor 函数，立即执行\n3. excutor 有两个函数，resolve，reject\n4. then 函数接收两个函数，onResolve，onReject，excutor 调用 resolve。then 实现 onResolve，excutor 调用 reject，then 实现 onReject\n5. then 的链式调用和值的穿透\n\n### \\_Promise 1.0\n\n```typescript\nconst p1 = new _Promise((resolve, reject) => {\n  resolve(\"success\");\n  reject(\"failed\");\n}).then(\n  (data) => {\n    console.log(data);\n  },\n  (err) => {\n    console.log(err);\n  }\n);\n```\n\n首先我们希望这个最简单的代码能跑起来，根据上述的核心，先搭一个大概的架子\n\n```typescript\nclass _Promise {\n  constructor(executor) {\n    this.status = \"pending\";\n    this.value = undefined;\n    this.reason = undefined;\n    let resolve = () => {};\n    let reject = () => {};\n    executor(resolve, reject);\n  }\n\n  then(onResolve, onReject) {}\n}\n```\n\n调用 resolve 和 reject 的时候，状态要改变，并且把值保存起来\n\n```typescript\nclass _Promise {\n  constructor(executor) {\n    this.status = \"pending\";\n    this.value = undefined;\n    this.reason = undefined;\n    let resolve = (value) => {\n      if (this.status === \"pending\") {\n        this.value = value;\n        this.status = \"resolved\";\n      }\n    };\n    let reject = (reason) => {\n      if (this.status === \"pending\") {\n        this.reason = reason;\n        this.status = \"rejected\";\n      }\n    };\n    executor(resolve, reject);\n  }\n\n  then(onResolve, onReject) {}\n}\n```\n\nthen 函数会接受两个方法 resolve 就执行第一个，reject 就执行第二个\n\n```typescript\nclass _Promise {\n  constructor(executor) {\n    // ...\n  }\n\n  then(onResolve, onReject) {\n    if (this.status === \"resolved\") {\n      onResolve(this.value);\n    }\n    if (this.status === \"rejected\") {\n      onReject(this.reason);\n    }\n  }\n}\n```\n\n执行一下代码，确实是我们需要的，而且 resolve 执行过后，再调用 reject 也不起作用了\n\n![img](/assets/promise/1.png)\n\n### \\_Promise 2.0\n\n接下来，我们在 excutor 中传入一个异步操作\n\n![img](/assets/promise/2.png)\n\n发现，如上图所示，并没有任何的输出，这是因为代码运行到 then 方法的时候，resolve 没有调用，所以 status 还是 pending 状态的，所以没有输出。因此我们需要把回调函数存起来，当 resolve 或 reject 调用的时候，再执行\n\n```typescript\nclass _Promise {\n  constructor(executor) {\n    this.status = \"pending\"; // 状态\n    this.value = undefined; // resolve的值\n    this.reason = undefined; // reject的值\n    this.onResolveCbs = []; // onResolve 回调\n    this.onRejectCbs = []; // onReject 回调\n    let resolve = (value) => {\n      // 状态改变之后不可逆\n      if (this.status === \"pending\") {\n        this.value = value;\n        this.status = \"resolved\";\n        this.onResolveCbs.forEach((cb) => cb());\n      }\n    };\n    let reject = (reason) => {\n      // 状态改变之后不可逆\n      if (this.status === \"pending\") {\n        this.reason = reason;\n        this.status = \"rejected\";\n        this.onRejectCbs.forEach((cb) => cb());\n      }\n    };\n    executor(resolve, reject);\n  }\n\n  then(onResolve, onReject) {\n    if (this.status === \"resolved\") {\n      onResolve(this.value);\n    }\n    if (this.status === \"rejected\") {\n      onReject(this.reason);\n    }\n\n    if (this.status === \"pending\") {\n      this.onResolveCbs.push(() => {\n        onResolve(this.value);\n      });\n      this.onRejectCbs.push(() => {\n        onReject(this.reason);\n      });\n    }\n  }\n}\n```\n\n执行一下，我们可以看到异步成功的执行了\n\n![img](/assets/promise/3.png)\n\n### \\_Promise 3.0\n\n前面的都是基础，接下来的 then 的链式和值的穿透才是重点\n\n![img](/assets/promise/4.png) ![img](/assets/promise/5.png)\n\n> then 返回的是一个新的 Promise 对象\n> return 的值新 Promise 的 resolve 的参数\n\n```typescript\nthen(onResolve, onReject) {\n  // if (this.status === \"resolved\") {\n  //   onResolve(this.value);\n  // }\n  // if (this.status === \"rejected\") {\n  //   onReject(this.reason);\n  // }\n\n  // if (this.status === \"pending\") {\n  //   this.onResolveCbs.push(() => {\n  //     onResolve(this.value);\n  //   });\n  //   this.onRejectCbs.push(() => {\n  //     onReject(this.reason);\n  //   });\n  // }\n  const newpromise = new _Promise((resolve, reject) => {})\n\n  return newpromise\n}\n```\n\n原来的逻辑还是要存在的，但是新的 promise 的 resolve 函数的参数，需要获得现在这一个 then 函数的返回值\n\n```typescript\nthen(onResolve, onReject) {\n  let x;\n  const newpromise = new _Promise((resolve, reject) => {\n    if (this.status === \"resolved\") {\n      x = onResolve(this.value);\n      resolve(x);\n    }\n    if (this.status === \"rejected\") {\n      x = onReject(this.reason);\n      resolve(x);\n    }\n\n    if (this.status === \"pending\") {\n      this.onResolveCbs.push(() => {\n        x = onResolve(this.value);\n        resolve(x);\n      });\n      this.onRejectCbs.push(() => {\n        x = onReject(this.reason);\n        resolve(x);\n      });\n    }\n  });\n\n  return newpromise;\n}\n```\n\n执行之后的结果是正确的\n![img](/assets/promise/6.png)\n\n但是，去掉 excutor 中的 settimeout 函数之后，结果和正统的 Promise 结果(1->2->success->11->22)不一样\n\n![img](/assets/promise/7.png)\n\n这是因为正统的 Promise 中的 then 是异步的\n\n所以我们的 onResolve，onReject 也要是异步的，这就需要我们在外层加上异步函数\n\n```typescript\n  then(onResolve, onReject) {\n    let x;\n    const newpromise = new _Promise((resolve, reject) => {\n      if (this.status === \"resolved\") {\n        setTimeout(() => {\n          x = onResolve(this.value);\n          resolve(x);\n        });\n      }\n      if (this.status === \"rejected\") {\n        setTimeout(() => {\n          x = onReject(this.reason);\n          resolve(x);\n        });\n      }\n\n      if (this.status === \"pending\") {\n        this.onResolveCbs.push(() => {\n          setTimeout(() => {\n            x = onResolve(this.value);\n            resolve(x);\n          });\n        });\n        this.onRejectCbs.push(() => {\n          setTimeout(() => {\n            x = onReject(this.reason);\n            resolve(x);\n          });\n        });\n      }\n    });\n\n    return newpromise;\n  }\n```\n\n这是链式调用，接下来还有值的穿透，要是用现在的代码去跑代码.then().then()一定会报错，因为你的 then 方法根本什么参数都没有传，所以需要在 then 函数刚开始的时候进行判断，如果不是一个函数，那就直接设置 onResolve 为`(v) => v`方法，这样后面调用的时候直接返回的就是 value 值，onReject 也是一样的\n\n```typescript\nthen(onResolve, onReject) {\n  if (typeof onResolve !== \"function\") onResolve = (v) => v;\n  if (typeof onReject !== \"function\") onReject = (v) => v;\n  let x;\n  const newpromise = new _Promise((resolve, reject) => {\n    if (this.status === \"resolved\") {\n      setTimeout(() => {\n        x = onResolve(this.value);\n        resolve(x);\n      });\n    }\n    if (this.status === \"rejected\") {\n      setTimeout(() => {\n        x = onReject(this.reason);\n        resolve(x);\n      });\n    }\n\n    if (this.status === \"pending\") {\n      this.onResolveCbs.push(() => {\n        setTimeout(() => {\n          x = onResolve(this.value);\n          resolve(x);\n        });\n      });\n      this.onRejectCbs.push(() => {\n        setTimeout(() => {\n          x = onReject(this.reason);\n          resolve(x);\n        });\n      });\n    }\n  });\n\n  return newpromise;\n}\n```\n\n执行看一下结果，确实实现了值的穿透\n![img](/assets/promise/8.png)\n\n至此，我们就大致实现了一个建议的 Promise，之后的就是处理一些特殊情况、实现一些 promise 的 api 和进行公共方法的封装\n\n### \\_Promise 4.0\n\nthen 函数的返回值有这几类\n\n1. 如果不是对象也不是函数，那就直接 resolve\n2. 如果是一个对象或者一个函数，但是不含有 then 函数，说明不是 promise 对象，直接 resolve\n3. 如果是一个对象或者一个函数，但是含有 then 函数，说明是一个 promise 对象，需要实现这个 promise 然后 then 的返回值来\n\n所以我们需要封装一个 resolvePromise 函数\n\n```typescript\nresolvePromise(x, resolve, reject) {\n  resolve(x)\n}\n\nthen(onResolve, onReject) {\n  if (typeof onResolve !== \"function\") onResolve = (v) => v;\n  if (typeof onReject !== \"function\") onReject = (v) => v;\n  let x;\n  const newpromise = new _Promise((resolve, reject) => {\n    if (this.status === \"resolved\") {\n      setTimeout(() => {\n        x = onResolve(this.value);\n        this.resolvePromise(x, resolve, reject);\n      });\n    }\n    if (this.status === \"rejected\") {\n      setTimeout(() => {\n        x = onReject(this.reason);\n        this.resolvePromise(x, resolve, reject);\n      });\n    }\n\n    if (this.status === \"pending\") {\n      this.onResolveCbs.push(() => {\n        setTimeout(() => {\n          x = onResolve(this.value);\n          this.resolvePromise(x, resolve, reject);\n        });\n      });\n      this.onRejectCbs.push(() => {\n        setTimeout(() => {\n          x = onReject(this.reason);\n          this.resolvePromise(x, resolve, reject);\n        });\n      });\n    }\n  });\n\n  return newpromise;\n}\n```\n\nresolvePromise 函数需要满足之前说的三个条件\n\n```typescript\n  resolvePromise(x, resolve, reject) {\n    const xType = typeof x;\n    if (xType !== \"object\" && xType !== \"function\") {\n      resolve(x);\n      return;\n    }\n    const then = x.then;\n\n    if (typeof then === \"function\") {\n      then.call(\n        x,\n        (data) => {\n          this.resolvePromise(data, resolve, reject);\n        },\n        (reason) => {\n          reject(reason);\n        }\n      );\n    } else {\n      resolve(x);\n    }\n  }\n```\n\n最后添加一个 promise.all 方法\n\n```typescript\n  static all(promises) {\n    return new _Promise((resolve, reject) => {\n      let count = 0;\n      let arr = [];\n      promises.forEach((promise, index) => {\n        promise.then(\n          (res) => {\n            count++;\n            arr[index] = res;\n            if (count >= promises.length) resolve(arr);\n          },\n          (err) => {\n            reject(err);\n          }\n        );\n      });\n    });\n  }\n```\n","slug":"promise","published":1,"updated":"2023-03-10T02:55:49.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf26jis20007601ufqzj75t7","content":"<h2 id=\"Promise-的能力\"><a href=\"#Promise-的能力\" class=\"headerlink\" title=\"Promise 的能力\"></a>Promise 的能力</h2><p>解决了回调地狱</p>\n<ul>\n<li>嵌套调用，第一个函数的返回值是第二个函数的入参（<strong>then 的链式调用</strong>）</li>\n<li>处理多个并发异步请求（<strong>Promise.all</strong>）</li>\n</ul>\n<h2 id=\"手写-Promise\"><a href=\"#手写-Promise\" class=\"headerlink\" title=\"手写 Promise\"></a>手写 Promise</h2><p>Promise 的核心</p>\n<ol>\n<li>有三个状态 pending、resolved、rejected，一旦改变，不可逆转</li>\n<li>Promise 构造函数接受一个 excutor 函数，立即执行</li>\n<li>excutor 有两个函数，resolve，reject</li>\n<li>then 函数接收两个函数，onResolve，onReject，excutor 调用 resolve。then 实现 onResolve，excutor 调用 reject，then 实现 onReject</li>\n<li>then 的链式调用和值的穿透</li>\n</ol>\n<h3 id=\"Promise-1-0\"><a href=\"#Promise-1-0\" class=\"headerlink\" title=\"_Promise 1.0\"></a>_Promise 1.0</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&quot;failed&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>首先我们希望这个最简单的代码能跑起来，根据上述的核心，先搭一个大概的架子</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\"></span>) =&gt; &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\"></span>) =&gt; &#123;&#125;;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用 resolve 和 reject 的时候，状态要改变，并且把值保存起来</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;resolved&quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>then 函数会接受两个方法 resolve 就执行第一个，reject 就执行第二个</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;resolved&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行一下代码，确实是我们需要的，而且 resolve 执行过后，再调用 reject 也不起作用了</p>\n<p><img src=\"/assets/promise/1.png\" alt=\"img\"></p>\n<h3 id=\"Promise-2-0\"><a href=\"#Promise-2-0\" class=\"headerlink\" title=\"_Promise 2.0\"></a>_Promise 2.0</h3><p>接下来，我们在 excutor 中传入一个异步操作</p>\n<p><img src=\"/assets/promise/2.png\" alt=\"img\"></p>\n<p>发现，如上图所示，并没有任何的输出，这是因为代码运行到 then 方法的时候，resolve 没有调用，所以 status 还是 pending 状态的，所以没有输出。因此我们需要把回调函数存起来，当 resolve 或 reject 调用的时候，再执行</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;pending&quot;</span>; <span class=\"comment\">// 状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>; <span class=\"comment\">// resolve的值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>; <span class=\"comment\">// reject的值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span> = []; <span class=\"comment\">// onResolve 回调</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span> = []; <span class=\"comment\">// onReject 回调</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 状态改变之后不可逆</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;resolved&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">cb</span>) =&gt;</span> <span class=\"title function_\">cb</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 状态改变之后不可逆</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">cb</span>) =&gt;</span> <span class=\"title function_\">cb</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;resolved&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行一下，我们可以看到异步成功的执行了</p>\n<p><img src=\"/assets/promise/3.png\" alt=\"img\"></p>\n<h3 id=\"Promise-3-0\"><a href=\"#Promise-3-0\" class=\"headerlink\" title=\"_Promise 3.0\"></a>_Promise 3.0</h3><p>前面的都是基础，接下来的 then 的链式和值的穿透才是重点</p>\n<p><img src=\"/assets/promise/4.png\" alt=\"img\"> <img src=\"/assets/promise/5.png\" alt=\"img\"></p>\n<blockquote>\n<p>then 返回的是一个新的 Promise 对象<br>return 的值新 Promise 的 resolve 的参数</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// if (this.status === &quot;resolved&quot;) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   onResolve(this.value);</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// if (this.status === &quot;rejected&quot;) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   onReject(this.reason);</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// if (this.status === &quot;pending&quot;) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   this.onResolveCbs.push(() =&gt; &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     onResolve(this.value);</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\">  <span class=\"comment\">//   this.onRejectCbs.push(() =&gt; &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     onReject(this.reason);</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newpromise = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newpromise</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原来的逻辑还是要存在的，但是新的 promise 的 resolve 函数的参数，需要获得现在这一个 then 函数的返回值</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newpromise = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;resolved&quot;</span>) &#123;</span><br><span class=\"line\">      x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">      x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newpromise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行之后的结果是正确的<br><img src=\"/assets/promise/6.png\" alt=\"img\"></p>\n<p>但是，去掉 excutor 中的 settimeout 函数之后，结果和正统的 Promise 结果(1-&gt;2-&gt;success-&gt;11-&gt;22)不一样</p>\n<p><img src=\"/assets/promise/7.png\" alt=\"img\"></p>\n<p>这是因为正统的 Promise 中的 then 是异步的</p>\n<p>所以我们的 onResolve，onReject 也要是异步的，这就需要我们在外层加上异步函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newpromise = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;resolved&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newpromise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是链式调用，接下来还有值的穿透，要是用现在的代码去跑代码.then().then()一定会报错，因为你的 then 方法根本什么参数都没有传，所以需要在 then 函数刚开始的时候进行判断，如果不是一个函数，那就直接设置 onResolve 为<code>(v) =&gt; v</code>方法，这样后面调用的时候直接返回的就是 value 值，onReject 也是一样的</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onResolve !== <span class=\"string\">&quot;function&quot;</span>) onResolve = <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onReject !== <span class=\"string\">&quot;function&quot;</span>) onReject = <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newpromise = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;resolved&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newpromise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行看一下结果，确实实现了值的穿透<br><img src=\"/assets/promise/8.png\" alt=\"img\"></p>\n<p>至此，我们就大致实现了一个建议的 Promise，之后的就是处理一些特殊情况、实现一些 promise 的 api 和进行公共方法的封装</p>\n<h3 id=\"Promise-4-0\"><a href=\"#Promise-4-0\" class=\"headerlink\" title=\"_Promise 4.0\"></a>_Promise 4.0</h3><p>then 函数的返回值有这几类</p>\n<ol>\n<li>如果不是对象也不是函数，那就直接 resolve</li>\n<li>如果是一个对象或者一个函数，但是不含有 then 函数，说明不是 promise 对象，直接 resolve</li>\n<li>如果是一个对象或者一个函数，但是含有 then 函数，说明是一个 promise 对象，需要实现这个 promise 然后 then 的返回值来</li>\n</ol>\n<p>所以我们需要封装一个 resolvePromise 函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">resolvePromise</span>(<span class=\"params\">x, resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onResolve !== <span class=\"string\">&quot;function&quot;</span>) onResolve = <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onReject !== <span class=\"string\">&quot;function&quot;</span>) onReject = <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newpromise = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;resolved&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">resolvePromise</span>(x, resolve, reject);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">resolvePromise</span>(x, resolve, reject);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">resolvePromise</span>(x, resolve, reject);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">resolvePromise</span>(x, resolve, reject);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newpromise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>resolvePromise 函数需要满足之前说的三个条件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">resolvePromise</span>(<span class=\"params\">x, resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> xType = <span class=\"keyword\">typeof</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xType !== <span class=\"string\">&quot;object&quot;</span> &amp;&amp; xType !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> then = x.<span class=\"property\">then</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    then.<span class=\"title function_\">call</span>(</span><br><span class=\"line\">      x,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">resolvePromise</span>(data, resolve, reject);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(reason);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后添加一个 promise.all 方法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title function_\">all</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">    promises.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">promise, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          count++;</span><br><span class=\"line\">          arr[index] = res;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count &gt;= promises.<span class=\"property\">length</span>) <span class=\"title function_\">resolve</span>(arr);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Promise-的能力\"><a href=\"#Promise-的能力\" class=\"headerlink\" title=\"Promise 的能力\"></a>Promise 的能力</h2><p>解决了回调地狱</p>\n<ul>\n<li>嵌套调用，第一个函数的返回值是第二个函数的入参（<strong>then 的链式调用</strong>）</li>\n<li>处理多个并发异步请求（<strong>Promise.all</strong>）</li>\n</ul>\n<h2 id=\"手写-Promise\"><a href=\"#手写-Promise\" class=\"headerlink\" title=\"手写 Promise\"></a>手写 Promise</h2><p>Promise 的核心</p>\n<ol>\n<li>有三个状态 pending、resolved、rejected，一旦改变，不可逆转</li>\n<li>Promise 构造函数接受一个 excutor 函数，立即执行</li>\n<li>excutor 有两个函数，resolve，reject</li>\n<li>then 函数接收两个函数，onResolve，onReject，excutor 调用 resolve。then 实现 onResolve，excutor 调用 reject，then 实现 onReject</li>\n<li>then 的链式调用和值的穿透</li>\n</ol>\n<h3 id=\"Promise-1-0\"><a href=\"#Promise-1-0\" class=\"headerlink\" title=\"_Promise 1.0\"></a>_Promise 1.0</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&quot;failed&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>首先我们希望这个最简单的代码能跑起来，根据上述的核心，先搭一个大概的架子</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\"></span>) =&gt; &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\"></span>) =&gt; &#123;&#125;;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用 resolve 和 reject 的时候，状态要改变，并且把值保存起来</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;resolved&quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>then 函数会接受两个方法 resolve 就执行第一个，reject 就执行第二个</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;resolved&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行一下代码，确实是我们需要的，而且 resolve 执行过后，再调用 reject 也不起作用了</p>\n<p><img src=\"/assets/promise/1.png\" alt=\"img\"></p>\n<h3 id=\"Promise-2-0\"><a href=\"#Promise-2-0\" class=\"headerlink\" title=\"_Promise 2.0\"></a>_Promise 2.0</h3><p>接下来，我们在 excutor 中传入一个异步操作</p>\n<p><img src=\"/assets/promise/2.png\" alt=\"img\"></p>\n<p>发现，如上图所示，并没有任何的输出，这是因为代码运行到 then 方法的时候，resolve 没有调用，所以 status 还是 pending 状态的，所以没有输出。因此我们需要把回调函数存起来，当 resolve 或 reject 调用的时候，再执行</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;pending&quot;</span>; <span class=\"comment\">// 状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>; <span class=\"comment\">// resolve的值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>; <span class=\"comment\">// reject的值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span> = []; <span class=\"comment\">// onResolve 回调</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span> = []; <span class=\"comment\">// onReject 回调</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 状态改变之后不可逆</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;resolved&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">cb</span>) =&gt;</span> <span class=\"title function_\">cb</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 状态改变之后不可逆</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">cb</span>) =&gt;</span> <span class=\"title function_\">cb</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;resolved&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行一下，我们可以看到异步成功的执行了</p>\n<p><img src=\"/assets/promise/3.png\" alt=\"img\"></p>\n<h3 id=\"Promise-3-0\"><a href=\"#Promise-3-0\" class=\"headerlink\" title=\"_Promise 3.0\"></a>_Promise 3.0</h3><p>前面的都是基础，接下来的 then 的链式和值的穿透才是重点</p>\n<p><img src=\"/assets/promise/4.png\" alt=\"img\"> <img src=\"/assets/promise/5.png\" alt=\"img\"></p>\n<blockquote>\n<p>then 返回的是一个新的 Promise 对象<br>return 的值新 Promise 的 resolve 的参数</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// if (this.status === &quot;resolved&quot;) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   onResolve(this.value);</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// if (this.status === &quot;rejected&quot;) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   onReject(this.reason);</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// if (this.status === &quot;pending&quot;) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   this.onResolveCbs.push(() =&gt; &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     onResolve(this.value);</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\">  <span class=\"comment\">//   this.onRejectCbs.push(() =&gt; &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     onReject(this.reason);</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newpromise = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newpromise</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原来的逻辑还是要存在的，但是新的 promise 的 resolve 函数的参数，需要获得现在这一个 then 函数的返回值</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newpromise = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;resolved&quot;</span>) &#123;</span><br><span class=\"line\">      x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">      x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newpromise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行之后的结果是正确的<br><img src=\"/assets/promise/6.png\" alt=\"img\"></p>\n<p>但是，去掉 excutor 中的 settimeout 函数之后，结果和正统的 Promise 结果(1-&gt;2-&gt;success-&gt;11-&gt;22)不一样</p>\n<p><img src=\"/assets/promise/7.png\" alt=\"img\"></p>\n<p>这是因为正统的 Promise 中的 then 是异步的</p>\n<p>所以我们的 onResolve，onReject 也要是异步的，这就需要我们在外层加上异步函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newpromise = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;resolved&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newpromise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是链式调用，接下来还有值的穿透，要是用现在的代码去跑代码.then().then()一定会报错，因为你的 then 方法根本什么参数都没有传，所以需要在 then 函数刚开始的时候进行判断，如果不是一个函数，那就直接设置 onResolve 为<code>(v) =&gt; v</code>方法，这样后面调用的时候直接返回的就是 value 值，onReject 也是一样的</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onResolve !== <span class=\"string\">&quot;function&quot;</span>) onResolve = <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onReject !== <span class=\"string\">&quot;function&quot;</span>) onReject = <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newpromise = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;resolved&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newpromise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行看一下结果，确实实现了值的穿透<br><img src=\"/assets/promise/8.png\" alt=\"img\"></p>\n<p>至此，我们就大致实现了一个建议的 Promise，之后的就是处理一些特殊情况、实现一些 promise 的 api 和进行公共方法的封装</p>\n<h3 id=\"Promise-4-0\"><a href=\"#Promise-4-0\" class=\"headerlink\" title=\"_Promise 4.0\"></a>_Promise 4.0</h3><p>then 函数的返回值有这几类</p>\n<ol>\n<li>如果不是对象也不是函数，那就直接 resolve</li>\n<li>如果是一个对象或者一个函数，但是不含有 then 函数，说明不是 promise 对象，直接 resolve</li>\n<li>如果是一个对象或者一个函数，但是含有 then 函数，说明是一个 promise 对象，需要实现这个 promise 然后 then 的返回值来</li>\n</ol>\n<p>所以我们需要封装一个 resolvePromise 函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">resolvePromise</span>(<span class=\"params\">x, resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">onResolve, onReject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onResolve !== <span class=\"string\">&quot;function&quot;</span>) onResolve = <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onReject !== <span class=\"string\">&quot;function&quot;</span>) onReject = <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newpromise = <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;resolved&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">resolvePromise</span>(x, resolve, reject);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">resolvePromise</span>(x, resolve, reject);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&quot;pending&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolveCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = <span class=\"title function_\">onResolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">resolvePromise</span>(x, resolve, reject);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectCbs</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = <span class=\"title function_\">onReject</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">resolvePromise</span>(x, resolve, reject);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newpromise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>resolvePromise 函数需要满足之前说的三个条件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">resolvePromise</span>(<span class=\"params\">x, resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> xType = <span class=\"keyword\">typeof</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xType !== <span class=\"string\">&quot;object&quot;</span> &amp;&amp; xType !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> then = x.<span class=\"property\">then</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    then.<span class=\"title function_\">call</span>(</span><br><span class=\"line\">      x,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">resolvePromise</span>(data, resolve, reject);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(reason);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后添加一个 promise.all 方法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title function_\">all</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">_Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">    promises.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">promise, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          count++;</span><br><span class=\"line\">          arr[index] = res;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count &gt;= promises.<span class=\"property\">length</span>) <span class=\"title function_\">resolve</span>(arr);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"微前端 qiankun angular子应用","date":"2023-02-05T11:07:16.000Z","_content":"\n# 生成项目\n\n```typescript\nng new <app-name> --skip-tests\n```\n\n# qiankun 配置\n\n1. 添加打包工具\n   ```typescript\n   yarn add @angular-builders/custom-webpack\n   ```\n2. 配置 `angular.json`\n   ```typescript\n   architect > build\n   \"builder\": \"@angular-builders/custom-webpack:browser\"\n   \"customWebpackConfig\": {\n     \"path\": \"./custom-webpack.config.js\"\n   }\n   architect > serve\n   \"builder\": \"@angular-builders/custom-webpack:dev-server\"\n   ```\n3. 根目录添加 `custom-webpack.config.js`\n   ```typescript\n   const appName = require(\"./package.json\").name;\n   module.exports = {\n     devServer: {\n       headers: {\n         \"Access-Control-Allow-Origin\": \"*\",\n       },\n     },\n     output: {\n       library: `${appName}-[name]`,\n       libraryTarget: \"umd\",\n     },\n   };\n   ```\n4. src 下添加 `public-path.js`\n   ```typescript\n   if (window.__POWERED_BY_QIANKUN__) {\n     // eslint-disable-next-line no-undef\n     __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n   }\n   ```\n5. 修改 `polyfills.ts`\n\n   ```typescript\n   // import 'zone.js';  // Included with Angular CLI.\n   ```\n\n6. 修改 `main.ts`\n\n   ```typescript\n   import \"./public-path\";\n   import { enableProdMode, NgModuleRef } from \"@angular/core\";\n   import { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n\n   import { AppModule } from \"./app/app.module\";\n   import { environment } from \"./environments/environment\";\n\n   if (environment.production) {\n     enableProdMode();\n   }\n\n   let app: void | NgModuleRef<AppModule>;\n   async function render() {\n     app = await platformBrowserDynamic()\n       .bootstrapModule(AppModule)\n       .catch((err) => console.error(err));\n   }\n   if (!(window as any).__POWERED_BY_QIANKUN__) {\n     render();\n   }\n\n   export async function bootstrap(props: Object) {\n     console.log(props);\n   }\n\n   export async function mount(props: Object) {\n     render();\n   }\n\n   export async function unmount(props: Object) {\n     console.log(props);\n     // @ts-ignore\n     app.destroy();\n   }\n   ```\n\n# 组件库 ng-darui\n\n# 参考链接\n\n> [华为组件库](https://devui.design/)\n","source":"_posts/qiankun-ng-child.md","raw":"---\ntitle: 微前端 qiankun angular子应用\ndate: 2023-02-05 19:07:16\ntags: ['微前端', \"qiankun\", 'angular']\n---\n\n# 生成项目\n\n```typescript\nng new <app-name> --skip-tests\n```\n\n# qiankun 配置\n\n1. 添加打包工具\n   ```typescript\n   yarn add @angular-builders/custom-webpack\n   ```\n2. 配置 `angular.json`\n   ```typescript\n   architect > build\n   \"builder\": \"@angular-builders/custom-webpack:browser\"\n   \"customWebpackConfig\": {\n     \"path\": \"./custom-webpack.config.js\"\n   }\n   architect > serve\n   \"builder\": \"@angular-builders/custom-webpack:dev-server\"\n   ```\n3. 根目录添加 `custom-webpack.config.js`\n   ```typescript\n   const appName = require(\"./package.json\").name;\n   module.exports = {\n     devServer: {\n       headers: {\n         \"Access-Control-Allow-Origin\": \"*\",\n       },\n     },\n     output: {\n       library: `${appName}-[name]`,\n       libraryTarget: \"umd\",\n     },\n   };\n   ```\n4. src 下添加 `public-path.js`\n   ```typescript\n   if (window.__POWERED_BY_QIANKUN__) {\n     // eslint-disable-next-line no-undef\n     __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n   }\n   ```\n5. 修改 `polyfills.ts`\n\n   ```typescript\n   // import 'zone.js';  // Included with Angular CLI.\n   ```\n\n6. 修改 `main.ts`\n\n   ```typescript\n   import \"./public-path\";\n   import { enableProdMode, NgModuleRef } from \"@angular/core\";\n   import { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n\n   import { AppModule } from \"./app/app.module\";\n   import { environment } from \"./environments/environment\";\n\n   if (environment.production) {\n     enableProdMode();\n   }\n\n   let app: void | NgModuleRef<AppModule>;\n   async function render() {\n     app = await platformBrowserDynamic()\n       .bootstrapModule(AppModule)\n       .catch((err) => console.error(err));\n   }\n   if (!(window as any).__POWERED_BY_QIANKUN__) {\n     render();\n   }\n\n   export async function bootstrap(props: Object) {\n     console.log(props);\n   }\n\n   export async function mount(props: Object) {\n     render();\n   }\n\n   export async function unmount(props: Object) {\n     console.log(props);\n     // @ts-ignore\n     app.destroy();\n   }\n   ```\n\n# 组件库 ng-darui\n\n# 参考链接\n\n> [华为组件库](https://devui.design/)\n","slug":"qiankun-ng-child","published":1,"updated":"2023-03-10T02:57:48.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf26jis30008601u2o1zag69","content":"<h1 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng <span class=\"keyword\">new</span> &lt;app-name&gt; --skip-tests</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"qiankun-配置\"><a href=\"#qiankun-配置\" class=\"headerlink\" title=\"qiankun 配置\"></a>qiankun 配置</h1><ol>\n<li><p>添加打包工具</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add <span class=\"meta\">@angular</span>-builders/custom-webpack</span><br></pre></td></tr></table></figure></li>\n<li><p>配置 <code>angular.json</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">architect &gt; build</span><br><span class=\"line\"><span class=\"string\">&quot;builder&quot;</span>: <span class=\"string\">&quot;@angular-builders/custom-webpack:browser&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;customWebpackConfig&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;./custom-webpack.config.js&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">architect &gt; serve</span><br><span class=\"line\"><span class=\"string\">&quot;builder&quot;</span>: <span class=\"string\">&quot;@angular-builders/custom-webpack:dev-server&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>根目录添加 <code>custom-webpack.config.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> appName = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./package.json&quot;</span>).<span class=\"property\">name</span>;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">`<span class=\"subst\">$&#123;appName&#125;</span>-[name]`</span>,</span><br><span class=\"line\">    <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&quot;umd&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>src 下添加 <code>public-path.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-undef</span></span><br><span class=\"line\">  __webpack_public_path__ = <span class=\"variable language_\">window</span>.<span class=\"property\">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>polyfills.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import &#x27;zone.js&#x27;;  // Included with Angular CLI.</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>main.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./public-path&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; enableProdMode, <span class=\"title class_\">NgModuleRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@angular/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@angular/platform-browser-dynamic&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app/app.module&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./environments/environment&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (environment.<span class=\"property\">production</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">enableProdMode</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">app</span>: <span class=\"built_in\">void</span> | <span class=\"title class_\">NgModuleRef</span>&lt;<span class=\"title class_\">AppModule</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  app = <span class=\"keyword\">await</span> <span class=\"title function_\">platformBrowserDynamic</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">bootstrapModule</span>(<span class=\"title class_\">AppModule</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\">props: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">mount</span>(<span class=\"params\">props: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unmount</span>(<span class=\"params\">props: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props);</span><br><span class=\"line\">  <span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\">  app.<span class=\"title function_\">destroy</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"组件库-ng-darui\"><a href=\"#组件库-ng-darui\" class=\"headerlink\" title=\"组件库 ng-darui\"></a>组件库 ng-darui</h1><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://devui.design/\">华为组件库</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng <span class=\"keyword\">new</span> &lt;app-name&gt; --skip-tests</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"qiankun-配置\"><a href=\"#qiankun-配置\" class=\"headerlink\" title=\"qiankun 配置\"></a>qiankun 配置</h1><ol>\n<li><p>添加打包工具</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add <span class=\"meta\">@angular</span>-builders/custom-webpack</span><br></pre></td></tr></table></figure></li>\n<li><p>配置 <code>angular.json</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">architect &gt; build</span><br><span class=\"line\"><span class=\"string\">&quot;builder&quot;</span>: <span class=\"string\">&quot;@angular-builders/custom-webpack:browser&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;customWebpackConfig&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;./custom-webpack.config.js&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">architect &gt; serve</span><br><span class=\"line\"><span class=\"string\">&quot;builder&quot;</span>: <span class=\"string\">&quot;@angular-builders/custom-webpack:dev-server&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>根目录添加 <code>custom-webpack.config.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> appName = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./package.json&quot;</span>).<span class=\"property\">name</span>;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">`<span class=\"subst\">$&#123;appName&#125;</span>-[name]`</span>,</span><br><span class=\"line\">    <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&quot;umd&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>src 下添加 <code>public-path.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-undef</span></span><br><span class=\"line\">  __webpack_public_path__ = <span class=\"variable language_\">window</span>.<span class=\"property\">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>polyfills.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import &#x27;zone.js&#x27;;  // Included with Angular CLI.</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>main.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./public-path&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; enableProdMode, <span class=\"title class_\">NgModuleRef</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@angular/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@angular/platform-browser-dynamic&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app/app.module&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./environments/environment&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (environment.<span class=\"property\">production</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">enableProdMode</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">app</span>: <span class=\"built_in\">void</span> | <span class=\"title class_\">NgModuleRef</span>&lt;<span class=\"title class_\">AppModule</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  app = <span class=\"keyword\">await</span> <span class=\"title function_\">platformBrowserDynamic</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">bootstrapModule</span>(<span class=\"title class_\">AppModule</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\">props: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">mount</span>(<span class=\"params\">props: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unmount</span>(<span class=\"params\">props: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props);</span><br><span class=\"line\">  <span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\">  app.<span class=\"title function_\">destroy</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"组件库-ng-darui\"><a href=\"#组件库-ng-darui\" class=\"headerlink\" title=\"组件库 ng-darui\"></a>组件库 ng-darui</h1><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://devui.design/\">华为组件库</a></p>\n</blockquote>\n"},{"title":"微前端 qiankun 基座应用","date":"2023-02-05T11:04:10.000Z","_content":"\n# 生成项目\n\n```typescript\nnpx create-react-app <app-name> --template=typescript\n```\n\n# qiankun 配置\n\n1. 添加 qiankun\n\n   ```typescript\n   yarn add qiankun\n   ```\n\n2. src 下添加 `public-path.js`\n\n   ```typescript\n   if (window.__POWERED_BY_QIANKUN__) {\n     // eslint-disable-next-line no-undef\n     __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n   }\n   ```\n\n3. 修改 `index.jsx`\n\n   ```typescript\n   import \"zone.js/dist/zone\"; // 如果子应用有angular，把子应用的zone.js引入删除，在base应用import\n   import React from \"react\";\n   import ReactDOM from \"react-dom/client\";\n   import \"./index.css\";\n   import App from \"./App\";\n   import reportWebVitals from \"./reportWebVitals\";\n   import { registerMicroApps, start } from \"qiankun\";\n   import { BrowserRouter } from \"react-router-dom\";\n   // qiankun 配置\n   registerMicroApps([\n     {\n       name: \"rc-child\", // 每一个子应用的名字  React应用的名字不重要\n       entry: \"//localhost:3001\", // 子应用的端口 必须一致\n       container: \"#rc-child\", // 子应用在父应用的挂载点\n       activeRule: (location) => location.pathname.startsWith(\"/rc-child\"), // 父应用中激活子应用的规则\n     },\n     {\n       name: \"ng-child\", // 每一个子应用的名字  React应用的名字不重要\n       entry: \"//localhost:3002\", // 子应用的端口 必须一致\n       container: \"#ng-child\", // 子应用在父应用的挂载点\n       activeRule: (location) => location.pathname.startsWith(\"/ng-child\"), // 父应用中激活子应用的规则\n     },\n   ]);\n   // 启动 父应用\n   start();\n\n   const root = ReactDOM.createRoot(\n     document.getElementById(\"root\") as HTMLElement\n   );\n   root.render(\n     <BrowserRouter>\n       <App></App>\n     </BrowserRouter>\n   );\n\n   // If you want to start measuring performance in your app, pass a function\n   // to log results (for example: reportWebVitals(console.log))\n   // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n   reportWebVitals();\n   ```\n\n# 组件库 react-darui\n\n# 参考链接\n\n> [antd 组件库](https://ant.design/components/overview-cn/)\n\n> [qiankun 实践](https://juejin.cn/post/6986258669172490271)\n","source":"_posts/qiankun-base.md","raw":"---\ntitle: 微前端 qiankun 基座应用\ndate: 2023-02-05 19:04:10\ntags: [\"微前端\", \"qiankun\", \"react\"]\n---\n\n# 生成项目\n\n```typescript\nnpx create-react-app <app-name> --template=typescript\n```\n\n# qiankun 配置\n\n1. 添加 qiankun\n\n   ```typescript\n   yarn add qiankun\n   ```\n\n2. src 下添加 `public-path.js`\n\n   ```typescript\n   if (window.__POWERED_BY_QIANKUN__) {\n     // eslint-disable-next-line no-undef\n     __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n   }\n   ```\n\n3. 修改 `index.jsx`\n\n   ```typescript\n   import \"zone.js/dist/zone\"; // 如果子应用有angular，把子应用的zone.js引入删除，在base应用import\n   import React from \"react\";\n   import ReactDOM from \"react-dom/client\";\n   import \"./index.css\";\n   import App from \"./App\";\n   import reportWebVitals from \"./reportWebVitals\";\n   import { registerMicroApps, start } from \"qiankun\";\n   import { BrowserRouter } from \"react-router-dom\";\n   // qiankun 配置\n   registerMicroApps([\n     {\n       name: \"rc-child\", // 每一个子应用的名字  React应用的名字不重要\n       entry: \"//localhost:3001\", // 子应用的端口 必须一致\n       container: \"#rc-child\", // 子应用在父应用的挂载点\n       activeRule: (location) => location.pathname.startsWith(\"/rc-child\"), // 父应用中激活子应用的规则\n     },\n     {\n       name: \"ng-child\", // 每一个子应用的名字  React应用的名字不重要\n       entry: \"//localhost:3002\", // 子应用的端口 必须一致\n       container: \"#ng-child\", // 子应用在父应用的挂载点\n       activeRule: (location) => location.pathname.startsWith(\"/ng-child\"), // 父应用中激活子应用的规则\n     },\n   ]);\n   // 启动 父应用\n   start();\n\n   const root = ReactDOM.createRoot(\n     document.getElementById(\"root\") as HTMLElement\n   );\n   root.render(\n     <BrowserRouter>\n       <App></App>\n     </BrowserRouter>\n   );\n\n   // If you want to start measuring performance in your app, pass a function\n   // to log results (for example: reportWebVitals(console.log))\n   // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n   reportWebVitals();\n   ```\n\n# 组件库 react-darui\n\n# 参考链接\n\n> [antd 组件库](https://ant.design/components/overview-cn/)\n\n> [qiankun 实践](https://juejin.cn/post/6986258669172490271)\n","slug":"qiankun-base","published":1,"updated":"2023-03-10T02:57:48.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf26jis4000a601u8q0ad66e","content":"<h1 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app &lt;app-name&gt; --template=typescript</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"qiankun-配置\"><a href=\"#qiankun-配置\" class=\"headerlink\" title=\"qiankun 配置\"></a>qiankun 配置</h1><ol>\n<li><p>添加 qiankun</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add qiankun</span><br></pre></td></tr></table></figure></li>\n<li><p>src 下添加 <code>public-path.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-undef</span></span><br><span class=\"line\">  __webpack_public_path__ = <span class=\"variable language_\">window</span>.<span class=\"property\">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>index.jsx</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;zone.js/dist/zone&quot;</span>; <span class=\"comment\">// 如果子应用有angular，把子应用的zone.js引入删除，在base应用import</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom/client&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reportWebVitals <span class=\"keyword\">from</span> <span class=\"string\">&quot;./reportWebVitals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; registerMicroApps, start &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;qiankun&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// qiankun 配置</span></span><br><span class=\"line\"><span class=\"title function_\">registerMicroApps</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;rc-child&quot;</span>, <span class=\"comment\">// 每一个子应用的名字  React应用的名字不重要</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;//localhost:3001&quot;</span>, <span class=\"comment\">// 子应用的端口 必须一致</span></span><br><span class=\"line\">    <span class=\"attr\">container</span>: <span class=\"string\">&quot;#rc-child&quot;</span>, <span class=\"comment\">// 子应用在父应用的挂载点</span></span><br><span class=\"line\">    <span class=\"attr\">activeRule</span>: <span class=\"function\">(<span class=\"params\">location</span>) =&gt;</span> location.<span class=\"property\">pathname</span>.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;/rc-child&quot;</span>), <span class=\"comment\">// 父应用中激活子应用的规则</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;ng-child&quot;</span>, <span class=\"comment\">// 每一个子应用的名字  React应用的名字不重要</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;//localhost:3002&quot;</span>, <span class=\"comment\">// 子应用的端口 必须一致</span></span><br><span class=\"line\">    <span class=\"attr\">container</span>: <span class=\"string\">&quot;#ng-child&quot;</span>, <span class=\"comment\">// 子应用在父应用的挂载点</span></span><br><span class=\"line\">    <span class=\"attr\">activeRule</span>: <span class=\"function\">(<span class=\"params\">location</span>) =&gt;</span> location.<span class=\"property\">pathname</span>.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;/ng-child&quot;</span>), <span class=\"comment\">// 父应用中激活子应用的规则</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"comment\">// 启动 父应用</span></span><br><span class=\"line\"><span class=\"title function_\">start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">createRoot</span>(</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span></span><br><span class=\"line\">);</span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">App</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">App</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If you want to start measuring performance in your app, pass a function</span></span><br><span class=\"line\"><span class=\"comment\">// to log results (for example: reportWebVitals(console.log))</span></span><br><span class=\"line\"><span class=\"comment\">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span></span><br><span class=\"line\"><span class=\"title function_\">reportWebVitals</span>();</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"组件库-react-darui\"><a href=\"#组件库-react-darui\" class=\"headerlink\" title=\"组件库 react-darui\"></a>组件库 react-darui</h1><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://ant.design/components/overview-cn/\">antd 组件库</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6986258669172490271\">qiankun 实践</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app &lt;app-name&gt; --template=typescript</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"qiankun-配置\"><a href=\"#qiankun-配置\" class=\"headerlink\" title=\"qiankun 配置\"></a>qiankun 配置</h1><ol>\n<li><p>添加 qiankun</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add qiankun</span><br></pre></td></tr></table></figure></li>\n<li><p>src 下添加 <code>public-path.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-undef</span></span><br><span class=\"line\">  __webpack_public_path__ = <span class=\"variable language_\">window</span>.<span class=\"property\">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>index.jsx</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;zone.js/dist/zone&quot;</span>; <span class=\"comment\">// 如果子应用有angular，把子应用的zone.js引入删除，在base应用import</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom/client&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reportWebVitals <span class=\"keyword\">from</span> <span class=\"string\">&quot;./reportWebVitals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; registerMicroApps, start &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;qiankun&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// qiankun 配置</span></span><br><span class=\"line\"><span class=\"title function_\">registerMicroApps</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;rc-child&quot;</span>, <span class=\"comment\">// 每一个子应用的名字  React应用的名字不重要</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;//localhost:3001&quot;</span>, <span class=\"comment\">// 子应用的端口 必须一致</span></span><br><span class=\"line\">    <span class=\"attr\">container</span>: <span class=\"string\">&quot;#rc-child&quot;</span>, <span class=\"comment\">// 子应用在父应用的挂载点</span></span><br><span class=\"line\">    <span class=\"attr\">activeRule</span>: <span class=\"function\">(<span class=\"params\">location</span>) =&gt;</span> location.<span class=\"property\">pathname</span>.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;/rc-child&quot;</span>), <span class=\"comment\">// 父应用中激活子应用的规则</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;ng-child&quot;</span>, <span class=\"comment\">// 每一个子应用的名字  React应用的名字不重要</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;//localhost:3002&quot;</span>, <span class=\"comment\">// 子应用的端口 必须一致</span></span><br><span class=\"line\">    <span class=\"attr\">container</span>: <span class=\"string\">&quot;#ng-child&quot;</span>, <span class=\"comment\">// 子应用在父应用的挂载点</span></span><br><span class=\"line\">    <span class=\"attr\">activeRule</span>: <span class=\"function\">(<span class=\"params\">location</span>) =&gt;</span> location.<span class=\"property\">pathname</span>.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;/ng-child&quot;</span>), <span class=\"comment\">// 父应用中激活子应用的规则</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"comment\">// 启动 父应用</span></span><br><span class=\"line\"><span class=\"title function_\">start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">createRoot</span>(</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span></span><br><span class=\"line\">);</span><br><span class=\"line\">root.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">App</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">App</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If you want to start measuring performance in your app, pass a function</span></span><br><span class=\"line\"><span class=\"comment\">// to log results (for example: reportWebVitals(console.log))</span></span><br><span class=\"line\"><span class=\"comment\">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span></span><br><span class=\"line\"><span class=\"title function_\">reportWebVitals</span>();</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"组件库-react-darui\"><a href=\"#组件库-react-darui\" class=\"headerlink\" title=\"组件库 react-darui\"></a>组件库 react-darui</h1><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://ant.design/components/overview-cn/\">antd 组件库</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6986258669172490271\">qiankun 实践</a></p>\n</blockquote>\n"},{"title":"微前端 qiankun react子应用","date":"2023-02-05T11:06:12.000Z","_content":"\n# 生成项目\n\n```typescript\nnpx create-react-app <app-name> --template=typescript\n```\n\n# qiankun 配置\n\n1. 添加打包工具\n   ```typescript\n   yarn add @rescripts/cli\n   ```\n2. 配置打包信息，在根目录下添加 `.rescriptsrc.js`\n\n   ```typescript\n   const { name } = require(\"./package\");\n   module.exports = {\n     webpack: (config) => {\n       config.output.library = `${name}-[name]`;\n       config.output.libraryTarget = \"umd\";\n       // config.output.jsonpFunction = `webpackJsonp_${name}`;\n       config.output.globalObject = \"window\";\n\n       return config;\n     },\n\n     devServer: (_) => {\n       const config = _;\n       config.port = \"3002\";\n       config.headers = {\n         \"Access-Control-Allow-Origin\": \"*\",\n       };\n       config.historyApiFallback = true;\n       config.hot = false;\n       // config.watchContentBase = false;\n       config.liveReload = false;\n\n       return config;\n     },\n   };\n   ```\n\n3. src 下添加 `public-path.js`\n   ```typescript\n   if (window.__POWERED_BY_QIANKUN__) {\n     // eslint-disable-next-line no-undef\n     __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n   }\n   ```\n4. 修改 `index.jsx`\n\n   ```typescript\n   import \"./public-path\";\n   import React from \"react\";\n   import ReactDOM from \"react-dom\";\n   import App from \"./App\";\n   import { BrowserRouter } from \"react-router-dom\";\n\n   function render(props) {\n     const { container } = props;\n     ReactDOM.render(\n       <BrowserRouter\n         basename={window.__POWERED_BY_QIANKUN__ ? \"/rc-child\" : \"/\"}\n       >\n         <App />\n       </BrowserRouter>,\n       container\n         ? container.querySelector(\"#root\")\n         : document.querySelector(\"#root\")\n     );\n   }\n\n   if (!window.__POWERED_BY_QIANKUN__) {\n     render({});\n   }\n\n   export async function bootstrap() {\n     console.log(\"[react16] react app bootstraped\");\n   }\n\n   export async function mount(props) {\n     console.log(\"[react16] props from main framework\", props);\n     render(props);\n   }\n\n   export async function unmount(props) {\n     const { container } = props;\n     ReactDOM.unmountComponentAtNode(\n       container\n         ? container.querySelector(\"#root\")\n         : document.querySelector(\"#root\")\n     );\n   }\n   ```\n\n# 组件库 react-darui\n\n# 参考链接\n\n> [antd 组件库](https://ant.design/components/overview-cn/)\n","source":"_posts/qiankun-rc-child.md","raw":"---\ntitle: 微前端 qiankun react子应用\ndate: 2023-02-05 19:06:12\ntags: ['微前端', 'qiankun','react']\n---\n\n# 生成项目\n\n```typescript\nnpx create-react-app <app-name> --template=typescript\n```\n\n# qiankun 配置\n\n1. 添加打包工具\n   ```typescript\n   yarn add @rescripts/cli\n   ```\n2. 配置打包信息，在根目录下添加 `.rescriptsrc.js`\n\n   ```typescript\n   const { name } = require(\"./package\");\n   module.exports = {\n     webpack: (config) => {\n       config.output.library = `${name}-[name]`;\n       config.output.libraryTarget = \"umd\";\n       // config.output.jsonpFunction = `webpackJsonp_${name}`;\n       config.output.globalObject = \"window\";\n\n       return config;\n     },\n\n     devServer: (_) => {\n       const config = _;\n       config.port = \"3002\";\n       config.headers = {\n         \"Access-Control-Allow-Origin\": \"*\",\n       };\n       config.historyApiFallback = true;\n       config.hot = false;\n       // config.watchContentBase = false;\n       config.liveReload = false;\n\n       return config;\n     },\n   };\n   ```\n\n3. src 下添加 `public-path.js`\n   ```typescript\n   if (window.__POWERED_BY_QIANKUN__) {\n     // eslint-disable-next-line no-undef\n     __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n   }\n   ```\n4. 修改 `index.jsx`\n\n   ```typescript\n   import \"./public-path\";\n   import React from \"react\";\n   import ReactDOM from \"react-dom\";\n   import App from \"./App\";\n   import { BrowserRouter } from \"react-router-dom\";\n\n   function render(props) {\n     const { container } = props;\n     ReactDOM.render(\n       <BrowserRouter\n         basename={window.__POWERED_BY_QIANKUN__ ? \"/rc-child\" : \"/\"}\n       >\n         <App />\n       </BrowserRouter>,\n       container\n         ? container.querySelector(\"#root\")\n         : document.querySelector(\"#root\")\n     );\n   }\n\n   if (!window.__POWERED_BY_QIANKUN__) {\n     render({});\n   }\n\n   export async function bootstrap() {\n     console.log(\"[react16] react app bootstraped\");\n   }\n\n   export async function mount(props) {\n     console.log(\"[react16] props from main framework\", props);\n     render(props);\n   }\n\n   export async function unmount(props) {\n     const { container } = props;\n     ReactDOM.unmountComponentAtNode(\n       container\n         ? container.querySelector(\"#root\")\n         : document.querySelector(\"#root\")\n     );\n   }\n   ```\n\n# 组件库 react-darui\n\n# 参考链接\n\n> [antd 组件库](https://ant.design/components/overview-cn/)\n","slug":"qiankun-rc-child","published":1,"updated":"2023-03-10T02:57:48.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf26jis5000c601ucs4169re","content":"<h1 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app &lt;app-name&gt; --template=typescript</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"qiankun-配置\"><a href=\"#qiankun-配置\" class=\"headerlink\" title=\"qiankun 配置\"></a>qiankun 配置</h1><ol>\n<li><p>添加打包工具</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add <span class=\"meta\">@rescripts</span>/cli</span><br></pre></td></tr></table></figure></li>\n<li><p>配置打包信息，在根目录下添加 <code>.rescriptsrc.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; name &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./package&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">webpack</span>: <span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    config.<span class=\"property\">output</span>.<span class=\"property\">library</span> = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>-[name]`</span>;</span><br><span class=\"line\">    config.<span class=\"property\">output</span>.<span class=\"property\">libraryTarget</span> = <span class=\"string\">&quot;umd&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// config.output.jsonpFunction = `webpackJsonp_$&#123;name&#125;`;</span></span><br><span class=\"line\">    config.<span class=\"property\">output</span>.<span class=\"property\">globalObject</span> = <span class=\"string\">&quot;window&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: <span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> config = _;</span><br><span class=\"line\">    config.<span class=\"property\">port</span> = <span class=\"string\">&quot;3002&quot;</span>;</span><br><span class=\"line\">    config.<span class=\"property\">headers</span> = &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    config.<span class=\"property\">historyApiFallback</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    config.<span class=\"property\">hot</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// config.watchContentBase = false;</span></span><br><span class=\"line\">    config.<span class=\"property\">liveReload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>src 下添加 <code>public-path.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-undef</span></span><br><span class=\"line\">  __webpack_public_path__ = <span class=\"variable language_\">window</span>.<span class=\"property\">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>index.jsx</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./public-path&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container &#125; = props;</span><br><span class=\"line\">  <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">basename</span>=<span class=\"string\">&#123;window.__POWERED_BY_QIANKUN__</span> ? &quot;/<span class=\"attr\">rc-child</span>&quot; <span class=\"attr\">:</span> &quot;/&quot;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">BrowserRouter</span>&gt;</span></span>,</span><br><span class=\"line\">    container</span><br><span class=\"line\">      ? container.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">      : <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(&#123;&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[react16] react app bootstraped&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">mount</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[react16] props from main framework&quot;</span>, props);</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unmount</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container &#125; = props;</span><br><span class=\"line\">  <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">unmountComponentAtNode</span>(</span><br><span class=\"line\">    container</span><br><span class=\"line\">      ? container.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">      : <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"组件库-react-darui\"><a href=\"#组件库-react-darui\" class=\"headerlink\" title=\"组件库 react-darui\"></a>组件库 react-darui</h1><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://ant.design/components/overview-cn/\">antd 组件库</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app &lt;app-name&gt; --template=typescript</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"qiankun-配置\"><a href=\"#qiankun-配置\" class=\"headerlink\" title=\"qiankun 配置\"></a>qiankun 配置</h1><ol>\n<li><p>添加打包工具</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add <span class=\"meta\">@rescripts</span>/cli</span><br></pre></td></tr></table></figure></li>\n<li><p>配置打包信息，在根目录下添加 <code>.rescriptsrc.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; name &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./package&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">webpack</span>: <span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    config.<span class=\"property\">output</span>.<span class=\"property\">library</span> = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>-[name]`</span>;</span><br><span class=\"line\">    config.<span class=\"property\">output</span>.<span class=\"property\">libraryTarget</span> = <span class=\"string\">&quot;umd&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// config.output.jsonpFunction = `webpackJsonp_$&#123;name&#125;`;</span></span><br><span class=\"line\">    config.<span class=\"property\">output</span>.<span class=\"property\">globalObject</span> = <span class=\"string\">&quot;window&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: <span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> config = _;</span><br><span class=\"line\">    config.<span class=\"property\">port</span> = <span class=\"string\">&quot;3002&quot;</span>;</span><br><span class=\"line\">    config.<span class=\"property\">headers</span> = &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    config.<span class=\"property\">historyApiFallback</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    config.<span class=\"property\">hot</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// config.watchContentBase = false;</span></span><br><span class=\"line\">    config.<span class=\"property\">liveReload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>src 下添加 <code>public-path.js</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line no-undef</span></span><br><span class=\"line\">  __webpack_public_path__ = <span class=\"variable language_\">window</span>.<span class=\"property\">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 <code>index.jsx</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./public-path&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container &#125; = props;</span><br><span class=\"line\">  <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">basename</span>=<span class=\"string\">&#123;window.__POWERED_BY_QIANKUN__</span> ? &quot;/<span class=\"attr\">rc-child</span>&quot; <span class=\"attr\">:</span> &quot;/&quot;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">BrowserRouter</span>&gt;</span></span>,</span><br><span class=\"line\">    container</span><br><span class=\"line\">      ? container.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">      : <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"variable language_\">window</span>.<span class=\"property\">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(&#123;&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[react16] react app bootstraped&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">mount</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[react16] props from main framework&quot;</span>, props);</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unmount</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container &#125; = props;</span><br><span class=\"line\">  <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">unmountComponentAtNode</span>(</span><br><span class=\"line\">    container</span><br><span class=\"line\">      ? container.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">      : <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#root&quot;</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"组件库-react-darui\"><a href=\"#组件库-react-darui\" class=\"headerlink\" title=\"组件库 react-darui\"></a>组件库 react-darui</h1><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://ant.design/components/overview-cn/\">antd 组件库</a></p>\n</blockquote>\n"},{"title":"vscode的终端设置成gitbash","date":"2023-02-09T14:44:30.000Z","_content":"\n1. 打开 vscode 设置\n\n2. 点击右上角转成 json 格式\n\n3. 添加代码\n\n   ```typescript\n   \"terminal.integrated.profiles.windows\": {\n       \"gitBash\": {\n           \"path\": \"D:\\\\soft\\\\Git\\\\bin\\\\bash.exe\", //本地bash程序的路径\n       }\n   },\n   \"terminal.integrated.defaultProfile.windows\": \"gitBash\",\n   ```\n\n4. 回到设置，搜索 shell windows，在以下的下拉框中选择 gitbash\n   ![vscode-gitbash-1](/assets/vscode-gitbash/vscode-gitbash-1.png)\n\n5. 重新打开终端就能看见了，如果不行就重启 vscode\n   ![vscode-gitbash-2](/assets/vscode-gitbash/vscode-gitbash-2.png)\n","source":"_posts/vscode-gitbash.md","raw":"---\ntitle: vscode的终端设置成gitbash\ndate: 2023-02-09 22:44:30\ntags: ['vscode']\n---\n\n1. 打开 vscode 设置\n\n2. 点击右上角转成 json 格式\n\n3. 添加代码\n\n   ```typescript\n   \"terminal.integrated.profiles.windows\": {\n       \"gitBash\": {\n           \"path\": \"D:\\\\soft\\\\Git\\\\bin\\\\bash.exe\", //本地bash程序的路径\n       }\n   },\n   \"terminal.integrated.defaultProfile.windows\": \"gitBash\",\n   ```\n\n4. 回到设置，搜索 shell windows，在以下的下拉框中选择 gitbash\n   ![vscode-gitbash-1](/assets/vscode-gitbash/vscode-gitbash-1.png)\n\n5. 重新打开终端就能看见了，如果不行就重启 vscode\n   ![vscode-gitbash-2](/assets/vscode-gitbash/vscode-gitbash-2.png)\n","slug":"vscode-gitbash","published":1,"updated":"2023-03-10T02:57:48.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf26jis6000f601uaspe9s8x","content":"<ol>\n<li><p>打开 vscode 设置</p>\n</li>\n<li><p>点击右上角转成 json 格式</p>\n</li>\n<li><p>添加代码</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;terminal.integrated.profiles.windows&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;gitBash&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;D:\\\\soft\\\\Git\\\\bin\\\\bash.exe&quot;</span>, <span class=\"comment\">//本地bash程序的路径</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">&quot;terminal.integrated.defaultProfile.windows&quot;</span>: <span class=\"string\">&quot;gitBash&quot;</span>,</span><br></pre></td></tr></table></figure></li>\n<li><p>回到设置，搜索 shell windows，在以下的下拉框中选择 gitbash<br><img src=\"/assets/vscode-gitbash/vscode-gitbash-1.png\" alt=\"vscode-gitbash-1\"></p>\n</li>\n<li><p>重新打开终端就能看见了，如果不行就重启 vscode<br><img src=\"/assets/vscode-gitbash/vscode-gitbash-2.png\" alt=\"vscode-gitbash-2\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>打开 vscode 设置</p>\n</li>\n<li><p>点击右上角转成 json 格式</p>\n</li>\n<li><p>添加代码</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;terminal.integrated.profiles.windows&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;gitBash&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;D:\\\\soft\\\\Git\\\\bin\\\\bash.exe&quot;</span>, <span class=\"comment\">//本地bash程序的路径</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">&quot;terminal.integrated.defaultProfile.windows&quot;</span>: <span class=\"string\">&quot;gitBash&quot;</span>,</span><br></pre></td></tr></table></figure></li>\n<li><p>回到设置，搜索 shell windows，在以下的下拉框中选择 gitbash<br><img src=\"/assets/vscode-gitbash/vscode-gitbash-1.png\" alt=\"vscode-gitbash-1\"></p>\n</li>\n<li><p>重新打开终端就能看见了，如果不行就重启 vscode<br><img src=\"/assets/vscode-gitbash/vscode-gitbash-2.png\" alt=\"vscode-gitbash-2\"></p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clf26jiro0000601u4vr292uw","tag_id":"clf26jirx0002601ud8jh8e7s","_id":"clf26jis5000b601u0emw3bpo"},{"post_id":"clf26jiro0000601u4vr292uw","tag_id":"clf26jis10006601ufkt05jek","_id":"clf26jis6000d601u1u9k6z4k"},{"post_id":"clf26jirv0001601u1djdgago","tag_id":"clf26jis40009601u0755gisd","_id":"clf26jis8000i601u3gyh623p"},{"post_id":"clf26jirv0001601u1djdgago","tag_id":"clf26jis6000e601u80xq0q4v","_id":"clf26jis8000j601u4s8642e7"},{"post_id":"clf26jirv0001601u1djdgago","tag_id":"clf26jis7000g601uhue86via","_id":"clf26jis8000l601uh0lw7qkk"},{"post_id":"clf26jirz0003601ufnzf0nti","tag_id":"clf26jis7000h601ugwus4hny","_id":"clf26jis9000n601u02w668pg"},{"post_id":"clf26jirz0003601ufnzf0nti","tag_id":"clf26jis8000k601udiau6c03","_id":"clf26jisa000o601u18x9bmhj"},{"post_id":"clf26jis00004601u0sz9b2me","tag_id":"clf26jis40009601u0755gisd","_id":"clf26jisb000s601uf2428et4"},{"post_id":"clf26jis00004601u0sz9b2me","tag_id":"clf26jis6000e601u80xq0q4v","_id":"clf26jisc000t601uen2u0g43"},{"post_id":"clf26jis00004601u0sz9b2me","tag_id":"clf26jis7000g601uhue86via","_id":"clf26jisc000v601u57w406qm"},{"post_id":"clf26jis10005601u8h7z7c8b","tag_id":"clf26jis40009601u0755gisd","_id":"clf26jisc000y601uf4z04viy"},{"post_id":"clf26jis10005601u8h7z7c8b","tag_id":"clf26jis6000e601u80xq0q4v","_id":"clf26jisd000z601u6w3agwcc"},{"post_id":"clf26jis10005601u8h7z7c8b","tag_id":"clf26jis7000g601uhue86via","_id":"clf26jisd0011601u1igu63jy"},{"post_id":"clf26jis20007601ufqzj75t7","tag_id":"clf26jirx0002601ud8jh8e7s","_id":"clf26jisd0012601ufxvc8gys"},{"post_id":"clf26jis20007601ufqzj75t7","tag_id":"clf26jisc000x601u9k065xpf","_id":"clf26jisd0014601u2ipm7bij"},{"post_id":"clf26jis30008601u2o1zag69","tag_id":"clf26jis40009601u0755gisd","_id":"clf26jise0017601ubl0u9aro"},{"post_id":"clf26jis30008601u2o1zag69","tag_id":"clf26jisd0013601uehyp2zdl","_id":"clf26jise0018601u3je48z08"},{"post_id":"clf26jis30008601u2o1zag69","tag_id":"clf26jis7000g601uhue86via","_id":"clf26jise001a601u7cklfdcs"},{"post_id":"clf26jis4000a601u8q0ad66e","tag_id":"clf26jis40009601u0755gisd","_id":"clf26jisf001c601uarizbz16"},{"post_id":"clf26jis4000a601u8q0ad66e","tag_id":"clf26jisd0013601uehyp2zdl","_id":"clf26jisf001d601u2ssbg7bu"},{"post_id":"clf26jis4000a601u8q0ad66e","tag_id":"clf26jis8000k601udiau6c03","_id":"clf26jisf001f601ufra16e79"},{"post_id":"clf26jis5000c601ucs4169re","tag_id":"clf26jis40009601u0755gisd","_id":"clf26jisg001h601uhb2b8267"},{"post_id":"clf26jis5000c601ucs4169re","tag_id":"clf26jisd0013601uehyp2zdl","_id":"clf26jisg001i601u9qk32y7n"},{"post_id":"clf26jis5000c601ucs4169re","tag_id":"clf26jis8000k601udiau6c03","_id":"clf26jisg001j601u21t833zy"},{"post_id":"clf26jis6000f601uaspe9s8x","tag_id":"clf26jisf001g601u73yr3bed","_id":"clf26jisg001k601ug3jr8stb"}],"Tag":[{"name":"js","_id":"clf26jirx0002601ud8jh8e7s"},{"name":"链式调用","_id":"clf26jis10006601ufkt05jek"},{"name":"微前端","_id":"clf26jis40009601u0755gisd"},{"name":"module federation","_id":"clf26jis6000e601u80xq0q4v"},{"name":"angular","_id":"clf26jis7000g601uhue86via"},{"name":"状态管理","_id":"clf26jis7000h601ugwus4hny"},{"name":"react","_id":"clf26jis8000k601udiau6c03"},{"name":"promise","_id":"clf26jisc000x601u9k065xpf"},{"name":"qiankun","_id":"clf26jisd0013601uehyp2zdl"},{"name":"vscode","_id":"clf26jisf001g601u73yr3bed"}]}}